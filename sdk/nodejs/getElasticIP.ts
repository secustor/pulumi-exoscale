// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * Provides information on an [Elastic IP][eip-doc].
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as exoscale from "@pulumi/exoscale";
 *
 * const zone = "ch-gva-2";
 * const vip = exoscale.getElasticIP({
 *     zone: zone,
 *     ipAddress: "1.2.3.4",
 * });
 * const ubuntu = exoscale.getComputeTemplate({
 *     zone: zone,
 *     name: "Linux Ubuntu 20.04 LTS 64-bit",
 * });
 * const example = new exoscale.ComputeInstance("example", {
 *     zone: zone,
 *     type: "standard.medium",
 *     templateId: ubuntu.then(ubuntu => ubuntu.id),
 *     elasticIpIds: [vip.then(vip => vip.id)],
 * });
 * ```
 */
export function getElasticIP(args: GetElasticIPArgs, opts?: pulumi.InvokeOptions): Promise<GetElasticIPResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("exoscale:index/getElasticIP:getElasticIP", {
        "id": args.id,
        "ipAddress": args.ipAddress,
        "zone": args.zone,
    }, opts);
}

/**
 * A collection of arguments for invoking getElasticIP.
 */
export interface GetElasticIPArgs {
    /**
     * The ID of the Elastic IP (conflicts with `ipAddress`).
     */
    id?: string;
    /**
     * The IP address of the Elastic IP (conflicts with `id`).
     */
    ipAddress?: string;
    /**
     * The [zone][zone] of the Elastic IP.
     */
    zone: string;
}

/**
 * A collection of values returned by getElasticIP.
 */
export interface GetElasticIPResult {
    /**
     * The description of the Elastic IP.
     */
    readonly description: string;
    /**
     * A health checking configuration for managed Elastic IPs. Structure is documented below.
     */
    readonly healthchecks: outputs.GetElasticIPHealthcheck[];
    readonly id?: string;
    readonly ipAddress?: string;
    readonly zone: string;
}

export function getElasticIPOutput(args: GetElasticIPOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetElasticIPResult> {
    return pulumi.output(args).apply(a => getElasticIP(a, opts))
}

/**
 * A collection of arguments for invoking getElasticIP.
 */
export interface GetElasticIPOutputArgs {
    /**
     * The ID of the Elastic IP (conflicts with `ipAddress`).
     */
    id?: pulumi.Input<string>;
    /**
     * The IP address of the Elastic IP (conflicts with `id`).
     */
    ipAddress?: pulumi.Input<string>;
    /**
     * The [zone][zone] of the Elastic IP.
     */
    zone: pulumi.Input<string>;
}
