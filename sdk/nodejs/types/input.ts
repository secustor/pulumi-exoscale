// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";

export interface DatabaseKafka {
    /**
     * Enable certificate-based authentication method.
     */
    enableCertAuth?: pulumi.Input<boolean>;
    /**
     * Enable Kafka Connect.
     */
    enableKafkaConnect?: pulumi.Input<boolean>;
    /**
     * Enable Kafka REST.
     */
    enableKafkaRest?: pulumi.Input<boolean>;
    /**
     * Enable SASL-based authentication method.
     */
    enableSaslAuth?: pulumi.Input<boolean>;
    /**
     * Enable Schema Registry.
     */
    enableSchemaRegistry?: pulumi.Input<boolean>;
    /**
     * A list of CIDR blocks to allow incoming connections from.
     */
    ipFilters?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Kafka Connect configuration settings in JSON format (`exo dbaas type show kafka --settings=kafka-connect` for reference).
     */
    kafkaConnectSettings?: pulumi.Input<string>;
    /**
     * Kafka REST configuration settings in JSON format (`exo dbaas type show kafka --settings=kafka-rest` for reference).
     */
    kafkaRestSettings?: pulumi.Input<string>;
    /**
     * Kafka configuration settings in JSON format (`exo dbaas type show kafka --settings=kafka` for reference).
     */
    kafkaSettings?: pulumi.Input<string>;
    /**
     * Schema Registry configuration settings in JSON format (`exo dbaas type show kafka --settings=schema-registry` for reference)
     */
    schemaRegistrySettings?: pulumi.Input<string>;
    /**
     * PostgreSQL major version (`exo dbaas type show pg` for reference). Can only be set during creation.
     */
    version?: pulumi.Input<string>;
}

export interface DatabaseMysql {
    /**
     * A custom administrator account password. Can only be set during creation.
     */
    adminPassword?: pulumi.Input<string>;
    /**
     * A custom administrator account username. Can only be set during creation.
     */
    adminUsername?: pulumi.Input<string>;
    /**
     * The automated backup schedule (format: HH:MM).
     */
    backupSchedule?: pulumi.Input<string>;
    /**
     * A list of CIDR blocks to allow incoming connections from.
     */
    ipFilters?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * MySQL configuration settings in JSON format (`exo dbaas type show mysql --settings=mysql` for reference).
     */
    mysqlSettings?: pulumi.Input<string>;
    /**
     * PostgreSQL major version (`exo dbaas type show pg` for reference). Can only be set during creation.
     */
    version?: pulumi.Input<string>;
}

export interface DatabasePg {
    /**
     * A custom administrator account password. Can only be set during creation.
     */
    adminPassword?: pulumi.Input<string>;
    /**
     * A custom administrator account username. Can only be set during creation.
     */
    adminUsername?: pulumi.Input<string>;
    /**
     * The automated backup schedule (format: HH:MM).
     */
    backupSchedule?: pulumi.Input<string>;
    /**
     * A list of CIDR blocks to allow incoming connections from.
     */
    ipFilters?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * PostgreSQL configuration settings in JSON format (`exo dbaas type show pg --settings=pg` for reference).
     */
    pgSettings?: pulumi.Input<string>;
    pgbouncerSettings?: pulumi.Input<string>;
    pglookoutSettings?: pulumi.Input<string>;
    /**
     * PostgreSQL major version (`exo dbaas type show pg` for reference). Can only be set during creation.
     */
    version?: pulumi.Input<string>;
}

export interface DatabaseRedis {
    /**
     * A list of CIDR blocks to allow incoming connections from.
     */
    ipFilters?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Redis configuration settings in JSON format (`exo dbaas type show redis --settings=redis` for reference).
     */
    redisSettings?: pulumi.Input<string>;
}

export interface ElasticIPHealthcheck {
    /**
     * The health checking interval in seconds (must be between `5` and `300`; default: `10`).
     */
    interval?: pulumi.Input<number>;
    /**
     * The health checking mode (`supported values: `tcp`, `http`, `https`).
     */
    mode: pulumi.Input<string>;
    /**
     * The health checking port (must be between `1` and `65535`).
     */
    port: pulumi.Input<number>;
    /**
     * The number of failed attempts before considering a managed Elastic IP target unhealthy (must be between `1` and `20`).
     */
    strikesFail?: pulumi.Input<number>;
    /**
     * The number of successful attempts before considering a managed Elastic IP target healthy (must be between `1` and `20`).
     */
    strikesOk?: pulumi.Input<number>;
    /**
     * The time in seconds before considering a healthcheck probing failed (must be between `2` and `60`; default: `3`).
     */
    timeout?: pulumi.Input<number>;
    /**
     * Disable TLS certificate verification for health checking in `https` mode.
     */
    tlsSkipVerify?: pulumi.Input<boolean>;
    /**
     * The health checking server name to present with SNI in `https` mode.
     */
    tlsSni?: pulumi.Input<string>;
    /**
     * The health checking URI (required in `http(s)` modes).
     */
    uri?: pulumi.Input<string>;
}

export interface GetDomainRecordFilter {
    /**
     * A regular expression matching the domain record content to lookup.
     */
    contentRegex?: string;
    /**
     * The ID matching the domain record ID to lookup.
     */
    id?: number;
    /**
     * The name matching the domain record name to lookup.
     */
    name?: string;
    /**
     * The record type matching the domain record type to lookup.
     */
    recordType?: string;
}

export interface GetDomainRecordFilterArgs {
    /**
     * A regular expression matching the domain record content to lookup.
     */
    contentRegex?: pulumi.Input<string>;
    /**
     * The ID matching the domain record ID to lookup.
     */
    id?: pulumi.Input<number>;
    /**
     * The name matching the domain record name to lookup.
     */
    name?: pulumi.Input<string>;
    /**
     * The record type matching the domain record type to lookup.
     */
    recordType?: pulumi.Input<string>;
}

export interface NLBServiceHealthcheck {
    /**
     * The healthcheck interval in seconds.
     */
    interval?: pulumi.Input<number>;
    /**
     * The healthcheck mode (`tcp`|`http`|`https`).
     */
    mode?: pulumi.Input<string>;
    /**
     * The healthcheck port.
     */
    port: pulumi.Input<number>;
    /**
     * The healthcheck retries.
     */
    retries?: pulumi.Input<number>;
    /**
     * The healthcheck timeout in seconds.
     */
    timeout?: pulumi.Input<number>;
    /**
     * The healthcheck TLS SNI server name, only if `mode` is `https`.
     */
    tlsSni?: pulumi.Input<string>;
    /**
     * The healthcheck URI, must be set only if `mode` is `http(s)`.
     */
    uri?: pulumi.Input<string>;
}

export interface SKSClusterOidc {
    /**
     * The OpenID client ID.
     */
    clientId: pulumi.Input<string>;
    /**
     * An OpenID JWT claim to use as the user's group.
     */
    groupsClaim?: pulumi.Input<string>;
    /**
     * An OpenID prefix prepended to group claims.
     */
    groupsPrefix?: pulumi.Input<string>;
    /**
     * The OpenID provider URL.
     */
    issuerUrl: pulumi.Input<string>;
    /**
     * A map of key/value pairs that describes a required claim in the OpenID Token.
     */
    requiredClaim?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * An OpenID JWT claim to use as the user name.
     */
    usernameClaim?: pulumi.Input<string>;
    /**
     * An OpenID prefix prepended to username claims.
     */
    usernamePrefix?: pulumi.Input<string>;
}

export interface SecurityGroupRulesEgress {
    /**
     * A list of source (for ingress)/destination (for egress) IP subnet (in [CIDR notation][cidr]) to match.
     */
    cidrLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A free-form text describing the Security Group rule purpose.
     */
    description?: pulumi.Input<string>;
    icmpCode?: pulumi.Input<number>;
    icmpType?: pulumi.Input<number>;
    ids?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of ports or port ranges (`start_port-end_port`).
     * * `icmpType`/`icmpCode` - An ICMP/ICMPv6 [type/code][icmp] to match.
     */
    ports?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The network protocol to match. Supported values are: `TCP`, `UDP`, `ICMP`, `ICMPv6`, `AH`, `ESP`, `GRE`, `IPIP` and `ALL`.
     */
    protocol?: pulumi.Input<string>;
    /**
     * A source (for ingress)/destination (for egress) of the traffic identified by a Security Group.
     */
    userSecurityGroupLists?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface SecurityGroupRulesIngress {
    /**
     * A list of source (for ingress)/destination (for egress) IP subnet (in [CIDR notation][cidr]) to match.
     */
    cidrLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A free-form text describing the Security Group rule purpose.
     */
    description?: pulumi.Input<string>;
    icmpCode?: pulumi.Input<number>;
    icmpType?: pulumi.Input<number>;
    ids?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of ports or port ranges (`start_port-end_port`).
     * * `icmpType`/`icmpCode` - An ICMP/ICMPv6 [type/code][icmp] to match.
     */
    ports?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The network protocol to match. Supported values are: `TCP`, `UDP`, `ICMP`, `ICMPv6`, `AH`, `ESP`, `GRE`, `IPIP` and `ALL`.
     */
    protocol?: pulumi.Input<string>;
    /**
     * A source (for ingress)/destination (for egress) of the traffic identified by a Security Group.
     */
    userSecurityGroupLists?: pulumi.Input<pulumi.Input<string>[]>;
}
