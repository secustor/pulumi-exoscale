// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides information on a [Security Group][sg-doc] for use in other resources such as a [`exoscale.InstancePool`][r-instance_pool] resource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as exoscale from "@pulumi/exoscale";
 *
 * const zone = "ch-gva-2";
 * const web = exoscale.getSecurityGroup({
 *     name: "web",
 * });
 * const ubuntu = exoscale.getComputeTemplate({
 *     zone: zone,
 *     name: "Linux Ubuntu 20.04 LTS 64-bit",
 * });
 * const webservers = new exoscale.InstancePool("webservers", {
 *     zone: zone,
 *     templateId: ubuntu.then(ubuntu => ubuntu.id),
 *     size: 5,
 *     serviceOffering: "medium",
 *     securityGroupIds: [web.then(web => web.id)],
 * });
 * ```
 */
export function getSecurityGroup(args?: GetSecurityGroupArgs, opts?: pulumi.InvokeOptions): Promise<GetSecurityGroupResult> {
    args = args || {};
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("exoscale:index/getSecurityGroup:getSecurityGroup", {
        "id": args.id,
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getSecurityGroup.
 */
export interface GetSecurityGroupArgs {
    /**
     * The ID of the Security Group (conflicts with `name`)
     */
    id?: string;
    /**
     * The name of the Security Group (conflicts with `id`)
     */
    name?: string;
}

/**
 * A collection of values returned by getSecurityGroup.
 */
export interface GetSecurityGroupResult {
    readonly id?: string;
    readonly name?: string;
}

export function getSecurityGroupOutput(args?: GetSecurityGroupOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetSecurityGroupResult> {
    return pulumi.output(args).apply(a => getSecurityGroup(a, opts))
}

/**
 * A collection of arguments for invoking getSecurityGroup.
 */
export interface GetSecurityGroupOutputArgs {
    /**
     * The ID of the Security Group (conflicts with `name`)
     */
    id?: pulumi.Input<string>;
    /**
     * The name of the Security Group (conflicts with `id`)
     */
    name?: pulumi.Input<string>;
}
