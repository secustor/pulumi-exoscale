// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * Provides an Exoscale [DBaaS][dbaas-doc] service resource. This can be used to create, modify, and delete database services.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as exoscale from "@pulumi/exoscale";
 *
 * const zone = "ch-dk-2";
 * const pgProd = new exoscale.Database("pgProd", {
 *     zone: zone,
 *     type: "pg",
 *     plan: "startup-4",
 *     maintenanceDow: "sunday",
 *     maintenanceTime: "23:00:00",
 *     terminationProtection: true,
 *     pg: {
 *         version: "13",
 *         backupSchedule: "04:00",
 *         ipFilters: [
 *             "1.2.3.4/32",
 *             "5.6.7.8/32",
 *         ],
 *         pgSettings: JSON.stringify({
 *             timezone: "Europe/Zurich",
 *         }),
 *     },
 * });
 * export const databaseUri = pgProd.uri;
 * ```
 *
 * ## Import
 *
 * An existing database service can be imported as a resource by specifying `NAME@ZONE`console
 *
 * ```sh
 *  $ pulumi import exoscale:index/database:Database example my-database@de-fra-1
 * ```
 *
 *  [dbaas-doc]https://community.exoscale.com/documentation/dbaas/ [zone]https://www.exoscale.com/datacenters/
 */
export class Database extends pulumi.CustomResource {
    /**
     * Get an existing Database resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DatabaseState, opts?: pulumi.CustomResourceOptions): Database {
        return new Database(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'exoscale:index/database:Database';

    /**
     * Returns true if the given object is an instance of Database.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Database {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Database.__pulumiType;
    }

    /**
     * The creation date of the database service.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * The disk size of the database service.
     */
    public /*out*/ readonly diskSize!: pulumi.Output<number>;
    /**
     * *kafka* database service type specific arguments. Structure is documented below.
     */
    public readonly kafka!: pulumi.Output<outputs.DatabaseKafka | undefined>;
    /**
     * The day of week to perform the automated database service maintenance (accepted values: `never`, `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`, `sunday`).
     */
    public readonly maintenanceDow!: pulumi.Output<string>;
    /**
     * The time of day to perform the automated database service maintenance (format: `HH:MM:SS`)
     */
    public readonly maintenanceTime!: pulumi.Output<string>;
    /**
     * *mysql* database service type specific arguments. Structure is documented below.
     */
    public readonly mysql!: pulumi.Output<outputs.DatabaseMysql | undefined>;
    /**
     * The name of the database service.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The number of CPUs of the database service.
     */
    public /*out*/ readonly nodeCpus!: pulumi.Output<number>;
    /**
     * The amount of memory of the database service.
     */
    public /*out*/ readonly nodeMemory!: pulumi.Output<number>;
    /**
     * The number of nodes of the database service.
     */
    public /*out*/ readonly nodes!: pulumi.Output<number>;
    /**
     * *pg* database service type specific arguments. Structure is documented below.
     */
    public readonly pg!: pulumi.Output<outputs.DatabasePg | undefined>;
    /**
     * The plan of the database service (`exo dbaas type show <TYPE>` for reference).
     */
    public readonly plan!: pulumi.Output<string>;
    /**
     * *redis* database service type specific arguments.Structure is documented below.
     */
    public readonly redis!: pulumi.Output<outputs.DatabaseRedis | undefined>;
    /**
     * The current state of the database service.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * The database service protection boolean flag against termination/power-off.
     */
    public readonly terminationProtection!: pulumi.Output<boolean | undefined>;
    /**
     * The type of the database service (accepted values: `kafka`, `mysql`, `pg`, `redis`).
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * The date of the latest database service update.
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;
    /**
     * The database service connection URI.
     */
    public /*out*/ readonly uri!: pulumi.Output<string>;
    /**
     * The name of the [zone][zone] to deploy the database service into.
     */
    public readonly zone!: pulumi.Output<string>;

    /**
     * Create a Database resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatabaseArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DatabaseArgs | DatabaseState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DatabaseState | undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["diskSize"] = state ? state.diskSize : undefined;
            resourceInputs["kafka"] = state ? state.kafka : undefined;
            resourceInputs["maintenanceDow"] = state ? state.maintenanceDow : undefined;
            resourceInputs["maintenanceTime"] = state ? state.maintenanceTime : undefined;
            resourceInputs["mysql"] = state ? state.mysql : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nodeCpus"] = state ? state.nodeCpus : undefined;
            resourceInputs["nodeMemory"] = state ? state.nodeMemory : undefined;
            resourceInputs["nodes"] = state ? state.nodes : undefined;
            resourceInputs["pg"] = state ? state.pg : undefined;
            resourceInputs["plan"] = state ? state.plan : undefined;
            resourceInputs["redis"] = state ? state.redis : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["terminationProtection"] = state ? state.terminationProtection : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
            resourceInputs["uri"] = state ? state.uri : undefined;
            resourceInputs["zone"] = state ? state.zone : undefined;
        } else {
            const args = argsOrState as DatabaseArgs | undefined;
            if ((!args || args.plan === undefined) && !opts.urn) {
                throw new Error("Missing required property 'plan'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            if ((!args || args.zone === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zone'");
            }
            resourceInputs["kafka"] = args ? args.kafka : undefined;
            resourceInputs["maintenanceDow"] = args ? args.maintenanceDow : undefined;
            resourceInputs["maintenanceTime"] = args ? args.maintenanceTime : undefined;
            resourceInputs["mysql"] = args ? args.mysql : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["pg"] = args ? args.pg : undefined;
            resourceInputs["plan"] = args ? args.plan : undefined;
            resourceInputs["redis"] = args ? args.redis : undefined;
            resourceInputs["terminationProtection"] = args ? args.terminationProtection : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["zone"] = args ? args.zone : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["diskSize"] = undefined /*out*/;
            resourceInputs["nodeCpus"] = undefined /*out*/;
            resourceInputs["nodeMemory"] = undefined /*out*/;
            resourceInputs["nodes"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
            resourceInputs["uri"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Database.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Database resources.
 */
export interface DatabaseState {
    /**
     * The creation date of the database service.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * The disk size of the database service.
     */
    diskSize?: pulumi.Input<number>;
    /**
     * *kafka* database service type specific arguments. Structure is documented below.
     */
    kafka?: pulumi.Input<inputs.DatabaseKafka>;
    /**
     * The day of week to perform the automated database service maintenance (accepted values: `never`, `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`, `sunday`).
     */
    maintenanceDow?: pulumi.Input<string>;
    /**
     * The time of day to perform the automated database service maintenance (format: `HH:MM:SS`)
     */
    maintenanceTime?: pulumi.Input<string>;
    /**
     * *mysql* database service type specific arguments. Structure is documented below.
     */
    mysql?: pulumi.Input<inputs.DatabaseMysql>;
    /**
     * The name of the database service.
     */
    name?: pulumi.Input<string>;
    /**
     * The number of CPUs of the database service.
     */
    nodeCpus?: pulumi.Input<number>;
    /**
     * The amount of memory of the database service.
     */
    nodeMemory?: pulumi.Input<number>;
    /**
     * The number of nodes of the database service.
     */
    nodes?: pulumi.Input<number>;
    /**
     * *pg* database service type specific arguments. Structure is documented below.
     */
    pg?: pulumi.Input<inputs.DatabasePg>;
    /**
     * The plan of the database service (`exo dbaas type show <TYPE>` for reference).
     */
    plan?: pulumi.Input<string>;
    /**
     * *redis* database service type specific arguments.Structure is documented below.
     */
    redis?: pulumi.Input<inputs.DatabaseRedis>;
    /**
     * The current state of the database service.
     */
    state?: pulumi.Input<string>;
    /**
     * The database service protection boolean flag against termination/power-off.
     */
    terminationProtection?: pulumi.Input<boolean>;
    /**
     * The type of the database service (accepted values: `kafka`, `mysql`, `pg`, `redis`).
     */
    type?: pulumi.Input<string>;
    /**
     * The date of the latest database service update.
     */
    updatedAt?: pulumi.Input<string>;
    /**
     * The database service connection URI.
     */
    uri?: pulumi.Input<string>;
    /**
     * The name of the [zone][zone] to deploy the database service into.
     */
    zone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Database resource.
 */
export interface DatabaseArgs {
    /**
     * *kafka* database service type specific arguments. Structure is documented below.
     */
    kafka?: pulumi.Input<inputs.DatabaseKafka>;
    /**
     * The day of week to perform the automated database service maintenance (accepted values: `never`, `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`, `sunday`).
     */
    maintenanceDow?: pulumi.Input<string>;
    /**
     * The time of day to perform the automated database service maintenance (format: `HH:MM:SS`)
     */
    maintenanceTime?: pulumi.Input<string>;
    /**
     * *mysql* database service type specific arguments. Structure is documented below.
     */
    mysql?: pulumi.Input<inputs.DatabaseMysql>;
    /**
     * The name of the database service.
     */
    name?: pulumi.Input<string>;
    /**
     * *pg* database service type specific arguments. Structure is documented below.
     */
    pg?: pulumi.Input<inputs.DatabasePg>;
    /**
     * The plan of the database service (`exo dbaas type show <TYPE>` for reference).
     */
    plan: pulumi.Input<string>;
    /**
     * *redis* database service type specific arguments.Structure is documented below.
     */
    redis?: pulumi.Input<inputs.DatabaseRedis>;
    /**
     * The database service protection boolean flag against termination/power-off.
     */
    terminationProtection?: pulumi.Input<boolean>;
    /**
     * The type of the database service (accepted values: `kafka`, `mysql`, `pg`, `redis`).
     */
    type: pulumi.Input<string>;
    /**
     * The name of the [zone][zone] to deploy the database service into.
     */
    zone: pulumi.Input<string>;
}
