// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * Provides an Exoscale Network Load Balancer ([NLB][r-nlb]) service resource. This can be used to create, modify, and delete NLB services.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as exoscale from "@pulumi/exoscale";
 *
 * const config = new pulumi.Config();
 * const zone = config.get("zone") || "de-fra-1";
 * const template = config.get("template") || "Linux Ubuntu 20.04 LTS 64-bit";
 * const websiteComputeTemplate = exoscale.getComputeTemplate({
 *     zone: zone,
 *     name: template,
 * });
 * const websiteInstancePool = new exoscale.InstancePool("websiteInstancePool", {
 *     description: "Instance Pool Website nodes",
 *     templateId: websiteComputeTemplate.then(websiteComputeTemplate => websiteComputeTemplate.id),
 *     serviceOffering: "medium",
 *     size: 3,
 *     zone: zone,
 * });
 * const websiteNLB = new exoscale.NLB("websiteNLB", {
 *     description: "This is the Network Load Balancer for my website",
 *     zone: zone,
 * });
 * const websiteNLBService = new exoscale.NLBService("websiteNLBService", {
 *     zone: websiteNLB.zone,
 *     description: "Website over HTTPS",
 *     nlbId: websiteNLB.id,
 *     instancePoolId: websiteInstancePool.id,
 *     protocol: "tcp",
 *     port: 443,
 *     targetPort: 8443,
 *     strategy: "round-robin",
 *     healthchecks: [{
 *         mode: "https",
 *         port: 8443,
 *         uri: "/healthz",
 *         tlsSni: "example.net",
 *         interval: 5,
 *         timeout: 3,
 *         retries: 1,
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * An existing NLB service can be imported as a resource by `<NLB-ID>/<SERVICE-ID>@<ZONE>`console
 *
 * ```sh
 *  $ pulumi import exoscale:index/nLBService:NLBService example eb556678-ec59-4be6-8c54-0406ae0f6da6/9ecc6b8b-73d4-4211-8ced-f7f29bb79524@de-fra-1
 * ```
 *
 *  [r-nlb]nlb.html [zone]https://www.exoscale.com/datacenters/
 */
export class NLBService extends pulumi.CustomResource {
    /**
     * Get an existing NLBService resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NLBServiceState, opts?: pulumi.CustomResourceOptions): NLBService {
        return new NLBService(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'exoscale:index/nLBService:NLBService';

    /**
     * Returns true if the given object is an instance of NLBService.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NLBService {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NLBService.__pulumiType;
    }

    /**
     * The description of the NLB service.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly healthchecks!: pulumi.Output<outputs.NLBServiceHealthcheck[]>;
    /**
     * The ID of the Instance Pool to forward network traffic to.
     */
    public readonly instancePoolId!: pulumi.Output<string>;
    /**
     * The name of the NLB service.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The ID of the NLB to attach the service.
     */
    public readonly nlbId!: pulumi.Output<string>;
    /**
     * The healthcheck port.
     */
    public readonly port!: pulumi.Output<number>;
    /**
     * The protocol (tcp/udp).
     */
    public readonly protocol!: pulumi.Output<string | undefined>;
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * The strategy (round-robin/source-hash).
     */
    public readonly strategy!: pulumi.Output<string | undefined>;
    /**
     * The port to forward network traffic to on target instances.
     */
    public readonly targetPort!: pulumi.Output<number>;
    /**
     * The name of the [zone][zone] used by the NLB.
     */
    public readonly zone!: pulumi.Output<string>;

    /**
     * Create a NLBService resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NLBServiceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NLBServiceArgs | NLBServiceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NLBServiceState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["healthchecks"] = state ? state.healthchecks : undefined;
            resourceInputs["instancePoolId"] = state ? state.instancePoolId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nlbId"] = state ? state.nlbId : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["strategy"] = state ? state.strategy : undefined;
            resourceInputs["targetPort"] = state ? state.targetPort : undefined;
            resourceInputs["zone"] = state ? state.zone : undefined;
        } else {
            const args = argsOrState as NLBServiceArgs | undefined;
            if ((!args || args.healthchecks === undefined) && !opts.urn) {
                throw new Error("Missing required property 'healthchecks'");
            }
            if ((!args || args.instancePoolId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instancePoolId'");
            }
            if ((!args || args.nlbId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nlbId'");
            }
            if ((!args || args.port === undefined) && !opts.urn) {
                throw new Error("Missing required property 'port'");
            }
            if ((!args || args.targetPort === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetPort'");
            }
            if ((!args || args.zone === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zone'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["healthchecks"] = args ? args.healthchecks : undefined;
            resourceInputs["instancePoolId"] = args ? args.instancePoolId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nlbId"] = args ? args.nlbId : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["strategy"] = args ? args.strategy : undefined;
            resourceInputs["targetPort"] = args ? args.targetPort : undefined;
            resourceInputs["zone"] = args ? args.zone : undefined;
            resourceInputs["state"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NLBService.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NLBService resources.
 */
export interface NLBServiceState {
    /**
     * The description of the NLB service.
     */
    description?: pulumi.Input<string>;
    healthchecks?: pulumi.Input<pulumi.Input<inputs.NLBServiceHealthcheck>[]>;
    /**
     * The ID of the Instance Pool to forward network traffic to.
     */
    instancePoolId?: pulumi.Input<string>;
    /**
     * The name of the NLB service.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the NLB to attach the service.
     */
    nlbId?: pulumi.Input<string>;
    /**
     * The healthcheck port.
     */
    port?: pulumi.Input<number>;
    /**
     * The protocol (tcp/udp).
     */
    protocol?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    /**
     * The strategy (round-robin/source-hash).
     */
    strategy?: pulumi.Input<string>;
    /**
     * The port to forward network traffic to on target instances.
     */
    targetPort?: pulumi.Input<number>;
    /**
     * The name of the [zone][zone] used by the NLB.
     */
    zone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NLBService resource.
 */
export interface NLBServiceArgs {
    /**
     * The description of the NLB service.
     */
    description?: pulumi.Input<string>;
    healthchecks: pulumi.Input<pulumi.Input<inputs.NLBServiceHealthcheck>[]>;
    /**
     * The ID of the Instance Pool to forward network traffic to.
     */
    instancePoolId: pulumi.Input<string>;
    /**
     * The name of the NLB service.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the NLB to attach the service.
     */
    nlbId: pulumi.Input<string>;
    /**
     * The healthcheck port.
     */
    port: pulumi.Input<number>;
    /**
     * The protocol (tcp/udp).
     */
    protocol?: pulumi.Input<string>;
    /**
     * The strategy (round-robin/source-hash).
     */
    strategy?: pulumi.Input<string>;
    /**
     * The port to forward network traffic to on target instances.
     */
    targetPort: pulumi.Input<number>;
    /**
     * The name of the [zone][zone] used by the NLB.
     */
    zone: pulumi.Input<string>;
}
