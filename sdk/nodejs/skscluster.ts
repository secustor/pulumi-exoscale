// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * Provides an Exoscale [SKS][sks-doc] cluster resource. This can be used to create, modify, and delete SKS clusters.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as exoscale from "@pulumi/exoscale";
 *
 * const zone = "de-fra-1";
 * const prod = new exoscale.SKSCluster("prod", {
 *     zone: zone,
 *     version: "1.20.2",
 *     labels: {
 *         env: "prod",
 *     },
 * });
 * export const sksEndpoint = prod.endpoint;
 * ```
 *
 * ## Import
 *
 * An existing SKS cluster can be imported as a resource by specifying `ID@ZONE`console
 *
 * ```sh
 *  $ pulumi import exoscale:index/sKSCluster:SKSCluster example eb556678-ec59-4be6-8c54-0406ae0f6da6@de-fra-1
 * ```
 *
 *  [cni]https://www.cni.dev/ [exo-ccm]https://github.com/exoscale/exoscale-cloud-controller-manager [k8s-ms]https://github.com/kubernetes-sigs/metrics-server [r-sks_nodepool]sks_nodepool.html [sks-doc]https://community.exoscale.com/documentation/sks/ [zone]https://www.exoscale.com/datacenters/
 */
export class SKSCluster extends pulumi.CustomResource {
    /**
     * Get an existing SKSCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SKSClusterState, opts?: pulumi.CustomResourceOptions): SKSCluster {
        return new SKSCluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'exoscale:index/sKSCluster:SKSCluster';

    /**
     * Returns true if the given object is an instance of SKSCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SKSCluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SKSCluster.__pulumiType;
    }

    /**
     * @deprecated This attribute has been replaced by `exoscale_ccm`/`metrics_server` attributes, it will be removed in a future release.
     */
    public readonly addons!: pulumi.Output<string[]>;
    /**
     * Enable automatic upgrading of the SKS cluster control plane Kubernetes version (default: `false`).
     */
    public readonly autoUpgrade!: pulumi.Output<boolean | undefined>;
    /**
     * The Kubernetes [CNI][cni] plugin to be deployed in the SKS cluster control plane (default: `"calico"`). Can only be set during creation.
     */
    public readonly cni!: pulumi.Output<string | undefined>;
    /**
     * The creation date of the SKS cluster.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * The description of the SKS cluster.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The Kubernetes public API endpoint of the SKS cluster.
     */
    public /*out*/ readonly endpoint!: pulumi.Output<string>;
    /**
     * Deploy the Exoscale [Cloud Controller Manager][exo-ccm] in the SKS cluster control plane (default: `true`). Can only be set during creation.
     */
    public readonly exoscaleCcm!: pulumi.Output<boolean | undefined>;
    /**
     * A map of key/value labels.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Deploy the [Kubernetes Metrics Server][k8s-ms] in the SKS cluster control plane (default: `true`). Can only be set during creation.
     */
    public readonly metricsServer!: pulumi.Output<boolean | undefined>;
    /**
     * The name of the SKS cluster.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The list of [SKS Nodepools][r-sks_nodepool] (IDs) attached to the SKS cluster.
     */
    public /*out*/ readonly nodepools!: pulumi.Output<string[]>;
    /**
     * An OpenID Connect configuration to provide to the Kubernetes API server. Can only be set during creation. Structure is documented below.
     */
    public readonly oidc!: pulumi.Output<outputs.SKSClusterOidc>;
    /**
     * The service level of the SKS cluster control plane (default: `"pro"`). Can only be set during creation.
     */
    public readonly serviceLevel!: pulumi.Output<string | undefined>;
    /**
     * The current state of the SKS cluster.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * The Kubernetes version of the SKS cluster control plane (default: latest version available from the API). Can only be set during creation.
     */
    public readonly version!: pulumi.Output<string>;
    /**
     * The name of the [zone][zone] to deploy the SKS cluster into.
     */
    public readonly zone!: pulumi.Output<string>;

    /**
     * Create a SKSCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SKSClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SKSClusterArgs | SKSClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SKSClusterState | undefined;
            resourceInputs["addons"] = state ? state.addons : undefined;
            resourceInputs["autoUpgrade"] = state ? state.autoUpgrade : undefined;
            resourceInputs["cni"] = state ? state.cni : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["endpoint"] = state ? state.endpoint : undefined;
            resourceInputs["exoscaleCcm"] = state ? state.exoscaleCcm : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["metricsServer"] = state ? state.metricsServer : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nodepools"] = state ? state.nodepools : undefined;
            resourceInputs["oidc"] = state ? state.oidc : undefined;
            resourceInputs["serviceLevel"] = state ? state.serviceLevel : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
            resourceInputs["zone"] = state ? state.zone : undefined;
        } else {
            const args = argsOrState as SKSClusterArgs | undefined;
            if ((!args || args.zone === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zone'");
            }
            resourceInputs["addons"] = args ? args.addons : undefined;
            resourceInputs["autoUpgrade"] = args ? args.autoUpgrade : undefined;
            resourceInputs["cni"] = args ? args.cni : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["exoscaleCcm"] = args ? args.exoscaleCcm : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["metricsServer"] = args ? args.metricsServer : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["oidc"] = args ? args.oidc : undefined;
            resourceInputs["serviceLevel"] = args ? args.serviceLevel : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
            resourceInputs["zone"] = args ? args.zone : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["endpoint"] = undefined /*out*/;
            resourceInputs["nodepools"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SKSCluster.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SKSCluster resources.
 */
export interface SKSClusterState {
    /**
     * @deprecated This attribute has been replaced by `exoscale_ccm`/`metrics_server` attributes, it will be removed in a future release.
     */
    addons?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Enable automatic upgrading of the SKS cluster control plane Kubernetes version (default: `false`).
     */
    autoUpgrade?: pulumi.Input<boolean>;
    /**
     * The Kubernetes [CNI][cni] plugin to be deployed in the SKS cluster control plane (default: `"calico"`). Can only be set during creation.
     */
    cni?: pulumi.Input<string>;
    /**
     * The creation date of the SKS cluster.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * The description of the SKS cluster.
     */
    description?: pulumi.Input<string>;
    /**
     * The Kubernetes public API endpoint of the SKS cluster.
     */
    endpoint?: pulumi.Input<string>;
    /**
     * Deploy the Exoscale [Cloud Controller Manager][exo-ccm] in the SKS cluster control plane (default: `true`). Can only be set during creation.
     */
    exoscaleCcm?: pulumi.Input<boolean>;
    /**
     * A map of key/value labels.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Deploy the [Kubernetes Metrics Server][k8s-ms] in the SKS cluster control plane (default: `true`). Can only be set during creation.
     */
    metricsServer?: pulumi.Input<boolean>;
    /**
     * The name of the SKS cluster.
     */
    name?: pulumi.Input<string>;
    /**
     * The list of [SKS Nodepools][r-sks_nodepool] (IDs) attached to the SKS cluster.
     */
    nodepools?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * An OpenID Connect configuration to provide to the Kubernetes API server. Can only be set during creation. Structure is documented below.
     */
    oidc?: pulumi.Input<inputs.SKSClusterOidc>;
    /**
     * The service level of the SKS cluster control plane (default: `"pro"`). Can only be set during creation.
     */
    serviceLevel?: pulumi.Input<string>;
    /**
     * The current state of the SKS cluster.
     */
    state?: pulumi.Input<string>;
    /**
     * The Kubernetes version of the SKS cluster control plane (default: latest version available from the API). Can only be set during creation.
     */
    version?: pulumi.Input<string>;
    /**
     * The name of the [zone][zone] to deploy the SKS cluster into.
     */
    zone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SKSCluster resource.
 */
export interface SKSClusterArgs {
    /**
     * @deprecated This attribute has been replaced by `exoscale_ccm`/`metrics_server` attributes, it will be removed in a future release.
     */
    addons?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Enable automatic upgrading of the SKS cluster control plane Kubernetes version (default: `false`).
     */
    autoUpgrade?: pulumi.Input<boolean>;
    /**
     * The Kubernetes [CNI][cni] plugin to be deployed in the SKS cluster control plane (default: `"calico"`). Can only be set during creation.
     */
    cni?: pulumi.Input<string>;
    /**
     * The description of the SKS cluster.
     */
    description?: pulumi.Input<string>;
    /**
     * Deploy the Exoscale [Cloud Controller Manager][exo-ccm] in the SKS cluster control plane (default: `true`). Can only be set during creation.
     */
    exoscaleCcm?: pulumi.Input<boolean>;
    /**
     * A map of key/value labels.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Deploy the [Kubernetes Metrics Server][k8s-ms] in the SKS cluster control plane (default: `true`). Can only be set during creation.
     */
    metricsServer?: pulumi.Input<boolean>;
    /**
     * The name of the SKS cluster.
     */
    name?: pulumi.Input<string>;
    /**
     * An OpenID Connect configuration to provide to the Kubernetes API server. Can only be set during creation. Structure is documented below.
     */
    oidc?: pulumi.Input<inputs.SKSClusterOidc>;
    /**
     * The service level of the SKS cluster control plane (default: `"pro"`). Can only be set during creation.
     */
    serviceLevel?: pulumi.Input<string>;
    /**
     * The Kubernetes version of the SKS cluster control plane (default: latest version available from the API). Can only be set during creation.
     */
    version?: pulumi.Input<string>;
    /**
     * The name of the [zone][zone] to deploy the SKS cluster into.
     */
    zone: pulumi.Input<string>;
}
