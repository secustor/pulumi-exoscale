// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides an Exoscale [SSH Keypair][ssh-keypairs-doc] resource. This can be used to create and delete SSH Keypairs.
 *
 * !> **WARNING:** This resource is deprecated and will be removed in the next major version.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as exoscale from "@pulumi/exoscale";
 *
 * const admin = new exoscale.SSHKeyPair("admin", {
 *     publicKey: "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDGRY...",
 * });
 * ```
 *
 * ## Import
 *
 * An existing SSH Keypair can be imported as a resource by nameconsole
 *
 * ```sh
 *  $ pulumi import exoscale:index/sSHKeyPair:SSHKeyPair mykey my-key
 * ```
 *
 *  [ssh-keypairs-doc]https://community.exoscale.com/documentation/compute/ssh-keypairs/
 */
export class SSHKeyPair extends pulumi.CustomResource {
    /**
     * Get an existing SSHKeyPair resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SSHKeyPairState, opts?: pulumi.CustomResourceOptions): SSHKeyPair {
        return new SSHKeyPair(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'exoscale:index/sSHKeyPair:SSHKeyPair';

    /**
     * Returns true if the given object is an instance of SSHKeyPair.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SSHKeyPair {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SSHKeyPair.__pulumiType;
    }

    /**
     * The unique identifier of the SSH Keypair.
     */
    public /*out*/ readonly fingerprint!: pulumi.Output<string>;
    /**
     * The name of the SSH Keypair.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The SSH private key generated if no public key was provided.
     */
    public /*out*/ readonly privateKey!: pulumi.Output<string>;
    /**
     * A SSH public key that will be copied into the instances at **first** boot. If not provided, a SSH keypair is generated and the is saved locally (see the `privateKey` attribute).
     */
    public readonly publicKey!: pulumi.Output<string | undefined>;

    /**
     * Create a SSHKeyPair resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SSHKeyPairArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SSHKeyPairArgs | SSHKeyPairState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SSHKeyPairState | undefined;
            resourceInputs["fingerprint"] = state ? state.fingerprint : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["privateKey"] = state ? state.privateKey : undefined;
            resourceInputs["publicKey"] = state ? state.publicKey : undefined;
        } else {
            const args = argsOrState as SSHKeyPairArgs | undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["publicKey"] = args ? args.publicKey : undefined;
            resourceInputs["fingerprint"] = undefined /*out*/;
            resourceInputs["privateKey"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SSHKeyPair.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SSHKeyPair resources.
 */
export interface SSHKeyPairState {
    /**
     * The unique identifier of the SSH Keypair.
     */
    fingerprint?: pulumi.Input<string>;
    /**
     * The name of the SSH Keypair.
     */
    name?: pulumi.Input<string>;
    /**
     * The SSH private key generated if no public key was provided.
     */
    privateKey?: pulumi.Input<string>;
    /**
     * A SSH public key that will be copied into the instances at **first** boot. If not provided, a SSH keypair is generated and the is saved locally (see the `privateKey` attribute).
     */
    publicKey?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SSHKeyPair resource.
 */
export interface SSHKeyPairArgs {
    /**
     * The name of the SSH Keypair.
     */
    name?: pulumi.Input<string>;
    /**
     * A SSH public key that will be copied into the instances at **first** boot. If not provided, a SSH keypair is generated and the is saved locally (see the `privateKey` attribute).
     */
    publicKey?: pulumi.Input<string>;
}
