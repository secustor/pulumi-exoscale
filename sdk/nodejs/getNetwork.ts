// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides information on a [Private Network][privnet-doc] for use in other resources such as a [`exoscale.InstancePool`][r-instance_pool] resource.
 *
 * !> **WARNING:** This data source is deprecated and will be removed in the next major version.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as exoscale from "@pulumi/exoscale";
 *
 * const zone = "ch-gva-2";
 * const db = exoscale.getNetwork({
 *     zone: zone,
 *     name: "db",
 * });
 * const ubuntu = exoscale.getComputeTemplate({
 *     zone: zone,
 *     name: "Linux Ubuntu 20.04 LTS 64-bit",
 * });
 * const webservers = new exoscale.InstancePool("webservers", {
 *     zone: zone,
 *     templateId: ubuntu.then(ubuntu => ubuntu.id),
 *     size: 5,
 *     serviceOffering: "medium",
 *     networkIds: [db.then(db => db.id)],
 * });
 * ```
 */
export function getNetwork(args: GetNetworkArgs, opts?: pulumi.InvokeOptions): Promise<GetNetworkResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("exoscale:index/getNetwork:getNetwork", {
        "id": args.id,
        "name": args.name,
        "zone": args.zone,
    }, opts);
}

/**
 * A collection of arguments for invoking getNetwork.
 */
export interface GetNetworkArgs {
    /**
     * The ID of the Private Network (conflicts with `name`)
     */
    id?: string;
    /**
     * The name of the Private Network (conflicts with `id`)
     */
    name?: string;
    /**
     * The [zone][zone] of the Private Network
     */
    zone: string;
}

/**
 * A collection of values returned by getNetwork.
 */
export interface GetNetworkResult {
    /**
     * The description of the Private Network
     */
    readonly description: string;
    /**
     * The last address of the IP range used by the DHCP service (for *managed* Private Networks)
     */
    readonly endIp: string;
    readonly id?: string;
    readonly name?: string;
    /**
     * The netmask defining the IP network allowed for the static lease (for *managed* Private Networks)
     */
    readonly netmask: string;
    /**
     * The first address of IP range used by the DHCP service to automatically assign (for *managed* Private Networks)
     */
    readonly startIp: string;
    readonly zone: string;
}

export function getNetworkOutput(args: GetNetworkOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetNetworkResult> {
    return pulumi.output(args).apply(a => getNetwork(a, opts))
}

/**
 * A collection of arguments for invoking getNetwork.
 */
export interface GetNetworkOutputArgs {
    /**
     * The ID of the Private Network (conflicts with `name`)
     */
    id?: pulumi.Input<string>;
    /**
     * The name of the Private Network (conflicts with `id`)
     */
    name?: pulumi.Input<string>;
    /**
     * The [zone][zone] of the Private Network
     */
    zone: pulumi.Input<string>;
}
