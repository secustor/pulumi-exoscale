// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides an Exoscale [DNS][dns-doc] domain record resource. This can be used to create, modify, and delete DNS domain records.
 *
 * ## Usage example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as exoscale from "@pulumi/exoscale";
 *
 * const example = new exoscale.Domain("example", {});
 * const myserver = new exoscale.DomainRecord("myserver", {
 *     domain: example.id,
 *     recordType: "A",
 *     content: "1.2.3.4",
 * });
 * const myserverAlias = new exoscale.DomainRecord("myserverAlias", {
 *     domain: example.id,
 *     recordType: "CNAME",
 *     content: myserver.hostname,
 * });
 * ```
 *
 * ## Import
 *
 * An existing DNS domain record can be imported as a resource by IDconsole
 *
 * ```sh
 *  $ pulumi import exoscale:index/domainRecord:DomainRecord www 12480484
 * ```
 *
 *  [dns-doc]https://community.exoscale.com/documentation/dns/ [r-domain]domain.html [ttl]https://en.wikipedia.org/wiki/Time_to_live
 */
export class DomainRecord extends pulumi.CustomResource {
    /**
     * Get an existing DomainRecord resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DomainRecordState, opts?: pulumi.CustomResourceOptions): DomainRecord {
        return new DomainRecord(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'exoscale:index/domainRecord:DomainRecord';

    /**
     * Returns true if the given object is an instance of DomainRecord.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DomainRecord {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DomainRecord.__pulumiType;
    }

    /**
     * The value of the domain record.
     */
    public readonly content!: pulumi.Output<string>;
    /**
     * The name of the [`exoscale.Domain`][r-domain] to create the record into.
     */
    public readonly domain!: pulumi.Output<string>;
    /**
     * The DNS domain record's *Fully Qualified Domain Name* (FQDN), useful for linking `A` records into `CNAME`.
     */
    public /*out*/ readonly hostname!: pulumi.Output<string>;
    /**
     * The name of the domain record; leave blank (`""`) to create a root record (similar to using `@` in a DNS zone file).
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The priority of the DNS domain record (for types that support it).
     */
    public readonly prio!: pulumi.Output<number>;
    /**
     * The type of the domain record. Supported values are: `A`, `AAAA`, `ALIAS`, `CAA`, `CNAME`, `HINFO`, `MX`, `NAPTR`, `NS`, `POOL`, `SPF`, `SRV`, `SSHFP`, `TXT`, `URL`.
     */
    public readonly recordType!: pulumi.Output<string>;
    /**
     * The [Time To Live][ttl] of the domain record.
     */
    public readonly ttl!: pulumi.Output<number>;

    /**
     * Create a DomainRecord resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DomainRecordArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DomainRecordArgs | DomainRecordState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DomainRecordState | undefined;
            resourceInputs["content"] = state ? state.content : undefined;
            resourceInputs["domain"] = state ? state.domain : undefined;
            resourceInputs["hostname"] = state ? state.hostname : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["prio"] = state ? state.prio : undefined;
            resourceInputs["recordType"] = state ? state.recordType : undefined;
            resourceInputs["ttl"] = state ? state.ttl : undefined;
        } else {
            const args = argsOrState as DomainRecordArgs | undefined;
            if ((!args || args.content === undefined) && !opts.urn) {
                throw new Error("Missing required property 'content'");
            }
            if ((!args || args.domain === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domain'");
            }
            if ((!args || args.recordType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'recordType'");
            }
            resourceInputs["content"] = args ? args.content : undefined;
            resourceInputs["domain"] = args ? args.domain : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["prio"] = args ? args.prio : undefined;
            resourceInputs["recordType"] = args ? args.recordType : undefined;
            resourceInputs["ttl"] = args ? args.ttl : undefined;
            resourceInputs["hostname"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DomainRecord.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DomainRecord resources.
 */
export interface DomainRecordState {
    /**
     * The value of the domain record.
     */
    content?: pulumi.Input<string>;
    /**
     * The name of the [`exoscale.Domain`][r-domain] to create the record into.
     */
    domain?: pulumi.Input<string>;
    /**
     * The DNS domain record's *Fully Qualified Domain Name* (FQDN), useful for linking `A` records into `CNAME`.
     */
    hostname?: pulumi.Input<string>;
    /**
     * The name of the domain record; leave blank (`""`) to create a root record (similar to using `@` in a DNS zone file).
     */
    name?: pulumi.Input<string>;
    /**
     * The priority of the DNS domain record (for types that support it).
     */
    prio?: pulumi.Input<number>;
    /**
     * The type of the domain record. Supported values are: `A`, `AAAA`, `ALIAS`, `CAA`, `CNAME`, `HINFO`, `MX`, `NAPTR`, `NS`, `POOL`, `SPF`, `SRV`, `SSHFP`, `TXT`, `URL`.
     */
    recordType?: pulumi.Input<string>;
    /**
     * The [Time To Live][ttl] of the domain record.
     */
    ttl?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a DomainRecord resource.
 */
export interface DomainRecordArgs {
    /**
     * The value of the domain record.
     */
    content: pulumi.Input<string>;
    /**
     * The name of the [`exoscale.Domain`][r-domain] to create the record into.
     */
    domain: pulumi.Input<string>;
    /**
     * The name of the domain record; leave blank (`""`) to create a root record (similar to using `@` in a DNS zone file).
     */
    name?: pulumi.Input<string>;
    /**
     * The priority of the DNS domain record (for types that support it).
     */
    prio?: pulumi.Input<number>;
    /**
     * The type of the domain record. Supported values are: `A`, `AAAA`, `ALIAS`, `CAA`, `CNAME`, `HINFO`, `MX`, `NAPTR`, `NS`, `POOL`, `SPF`, `SRV`, `SSHFP`, `TXT`, `URL`.
     */
    recordType: pulumi.Input<string>;
    /**
     * The [Time To Live][ttl] of the domain record.
     */
    ttl?: pulumi.Input<number>;
}
