// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * Provides information on [domain records][r-domain_record] hosted on [Exoscale DNS][exo-dns].
 *
 * ## Example Usage
 *
 * The example below matches all domain records that match with name `mailserver` and Record type `MX`.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as exoscale from "@pulumi/exoscale";
 *
 * const mycompany = exoscale.getDomain({
 *     name: my_company.com,
 * });
 * const mycompanyMailservers = mycompany.then(mycompany => exoscale.getDomainRecord({
 *     domain: mycompany.name,
 *     filter: {
 *         name: "mailserver",
 *         recordeType: "MX",
 *     },
 * }));
 * const mycompanyNameservers = mycompany.then(mycompany => exoscale.getDomainRecord({
 *     domain: mycompany.name,
 *     filter: {
 *         contentRegex: "ns.*",
 *     },
 * }));
 * export const firstDomainRecordName = mycompanyMailservers.then(mycompanyMailservers => mycompanyMailservers.records?[0]?.name);
 * export const firstDomainRecordContent = mycompanyNameservers.then(mycompanyNameservers => mycompanyNameservers.records?[0]?.content);
 * ```
 */
export function getDomainRecord(args: GetDomainRecordArgs, opts?: pulumi.InvokeOptions): Promise<GetDomainRecordResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("exoscale:index/getDomainRecord:getDomainRecord", {
        "domain": args.domain,
        "filter": args.filter,
    }, opts);
}

/**
 * A collection of arguments for invoking getDomainRecord.
 */
export interface GetDomainRecordArgs {
    /**
     * The name of the [domain][r-domain] where to look for domain records.
     */
    domain: string;
    /**
     * Filter to apply when looking up domain records.
     */
    filter: inputs.GetDomainRecordFilter;
}

/**
 * A collection of values returned by getDomainRecord.
 */
export interface GetDomainRecordResult {
    readonly domain: string;
    readonly filter: outputs.GetDomainRecordFilter;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly records: outputs.GetDomainRecordRecord[];
}

export function getDomainRecordOutput(args: GetDomainRecordOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDomainRecordResult> {
    return pulumi.output(args).apply(a => getDomainRecord(a, opts))
}

/**
 * A collection of arguments for invoking getDomainRecord.
 */
export interface GetDomainRecordOutputArgs {
    /**
     * The name of the [domain][r-domain] where to look for domain records.
     */
    domain: pulumi.Input<string>;
    /**
     * Filter to apply when looking up domain records.
     */
    filter: pulumi.Input<inputs.GetDomainRecordFilterArgs>;
}
