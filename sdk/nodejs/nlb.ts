// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides an Exoscale [Network Load Balancer][nlb-doc] (NLB) resource. This can be used to create, modify, and delete NLBs.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as exoscale from "@pulumi/exoscale";
 *
 * const config = new pulumi.Config();
 * const zone = config.get("zone") || "de-fra-1";
 * const website = new exoscale.NLB("website", {
 *     zone: zone,
 *     description: "This is the Network Load Balancer for my website",
 *     labels: {
 *         env: "prod",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * An existing NLB can be imported as a resource by `<ID>@<ZONE>`console
 *
 * ```sh
 *  $ pulumi import exoscale:index/nLB:NLB example eb556678-ec59-4be6-8c54-0406ae0f6da6@de-fra-1
 * ```
 *
 *  [nlb-doc]https://community.exoscale.com/documentation/compute/network-load-balancer/ [r-nlb_service]nlb_service.html [zone]https://www.exoscale.com/datacenters/
 */
export class NLB extends pulumi.CustomResource {
    /**
     * Get an existing NLB resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NLBState, opts?: pulumi.CustomResourceOptions): NLB {
        return new NLB(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'exoscale:index/nLB:NLB';

    /**
     * Returns true if the given object is an instance of NLB.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NLB {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NLB.__pulumiType;
    }

    /**
     * The creation date of the NLB.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * The description of the NLB.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The public IP address of the NLB.
     */
    public /*out*/ readonly ipAddress!: pulumi.Output<string>;
    /**
     * A map of key/value labels.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The name of the NLB.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The list of the NLB service names.
     */
    public /*out*/ readonly services!: pulumi.Output<string[]>;
    /**
     * The current state of the NLB.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * The name of the [zone][zone] to deploy the NLB into.
     */
    public readonly zone!: pulumi.Output<string>;

    /**
     * Create a NLB resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NLBArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NLBArgs | NLBState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NLBState | undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["ipAddress"] = state ? state.ipAddress : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["services"] = state ? state.services : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["zone"] = state ? state.zone : undefined;
        } else {
            const args = argsOrState as NLBArgs | undefined;
            if ((!args || args.zone === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zone'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["zone"] = args ? args.zone : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["ipAddress"] = undefined /*out*/;
            resourceInputs["services"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NLB.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NLB resources.
 */
export interface NLBState {
    /**
     * The creation date of the NLB.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * The description of the NLB.
     */
    description?: pulumi.Input<string>;
    /**
     * The public IP address of the NLB.
     */
    ipAddress?: pulumi.Input<string>;
    /**
     * A map of key/value labels.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The name of the NLB.
     */
    name?: pulumi.Input<string>;
    /**
     * The list of the NLB service names.
     */
    services?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The current state of the NLB.
     */
    state?: pulumi.Input<string>;
    /**
     * The name of the [zone][zone] to deploy the NLB into.
     */
    zone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NLB resource.
 */
export interface NLBArgs {
    /**
     * The description of the NLB.
     */
    description?: pulumi.Input<string>;
    /**
     * A map of key/value labels.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The name of the NLB.
     */
    name?: pulumi.Input<string>;
    /**
     * The name of the [zone][zone] to deploy the NLB into.
     */
    zone: pulumi.Input<string>;
}
