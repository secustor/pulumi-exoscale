// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package exoscale

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides an Exoscale [SKS][sks-doc] cluster resource. This can be used to create, modify, and delete SKS clusters.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-exoscale/sdk/go/exoscale"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		zone := "de-fra-1"
// 		prod, err := exoscale.NewSKSCluster(ctx, "prod", &exoscale.SKSClusterArgs{
// 			Zone:    pulumi.String(zone),
// 			Version: pulumi.String("1.20.2"),
// 			Labels: pulumi.StringMap{
// 				"env": pulumi.String("prod"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		ctx.Export("sksEndpoint", prod.Endpoint)
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// An existing SKS cluster can be imported as a resource by specifying `ID@ZONE`console
//
// ```sh
//  $ pulumi import exoscale:index/sKSCluster:SKSCluster example eb556678-ec59-4be6-8c54-0406ae0f6da6@de-fra-1
// ```
//
//  [cni]https://www.cni.dev/ [exo-ccm]https://github.com/exoscale/exoscale-cloud-controller-manager [k8s-ms]https://github.com/kubernetes-sigs/metrics-server [r-sks_nodepool]sks_nodepool.html [sks-doc]https://community.exoscale.com/documentation/sks/ [zone]https://www.exoscale.com/datacenters/
type SKSCluster struct {
	pulumi.CustomResourceState

	// Deprecated: This attribute has been replaced by `exoscale_ccm`/`metrics_server` attributes, it will be removed in a future release.
	Addons pulumi.StringArrayOutput `pulumi:"addons"`
	// Enable automatic upgrading of the SKS cluster control plane Kubernetes version (default: `false`).
	AutoUpgrade pulumi.BoolPtrOutput `pulumi:"autoUpgrade"`
	// The Kubernetes [CNI][cni] plugin to be deployed in the SKS cluster control plane (default: `"calico"`). Can only be set during creation.
	Cni pulumi.StringPtrOutput `pulumi:"cni"`
	// The creation date of the SKS cluster.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The description of the SKS cluster.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The Kubernetes public API endpoint of the SKS cluster.
	Endpoint pulumi.StringOutput `pulumi:"endpoint"`
	// Deploy the Exoscale [Cloud Controller Manager][exo-ccm] in the SKS cluster control plane (default: `true`). Can only be set during creation.
	ExoscaleCcm pulumi.BoolPtrOutput `pulumi:"exoscaleCcm"`
	// A map of key/value labels.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Deploy the [Kubernetes Metrics Server][k8s-ms] in the SKS cluster control plane (default: `true`). Can only be set during creation.
	MetricsServer pulumi.BoolPtrOutput `pulumi:"metricsServer"`
	// The name of the SKS cluster.
	Name pulumi.StringOutput `pulumi:"name"`
	// The list of [SKS Nodepools][r-sks_nodepool] (IDs) attached to the SKS cluster.
	Nodepools pulumi.StringArrayOutput `pulumi:"nodepools"`
	// An OpenID Connect configuration to provide to the Kubernetes API server. Can only be set during creation. Structure is documented below.
	Oidc SKSClusterOidcOutput `pulumi:"oidc"`
	// The service level of the SKS cluster control plane (default: `"pro"`). Can only be set during creation.
	ServiceLevel pulumi.StringPtrOutput `pulumi:"serviceLevel"`
	// The current state of the SKS cluster.
	State pulumi.StringOutput `pulumi:"state"`
	// The Kubernetes version of the SKS cluster control plane (default: latest version available from the API). Can only be set during creation.
	Version pulumi.StringOutput `pulumi:"version"`
	// The name of the [zone][zone] to deploy the SKS cluster into.
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewSKSCluster registers a new resource with the given unique name, arguments, and options.
func NewSKSCluster(ctx *pulumi.Context,
	name string, args *SKSClusterArgs, opts ...pulumi.ResourceOption) (*SKSCluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Zone == nil {
		return nil, errors.New("invalid value for required argument 'Zone'")
	}
	var resource SKSCluster
	err := ctx.RegisterResource("exoscale:index/sKSCluster:SKSCluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSKSCluster gets an existing SKSCluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSKSCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SKSClusterState, opts ...pulumi.ResourceOption) (*SKSCluster, error) {
	var resource SKSCluster
	err := ctx.ReadResource("exoscale:index/sKSCluster:SKSCluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SKSCluster resources.
type sksclusterState struct {
	// Deprecated: This attribute has been replaced by `exoscale_ccm`/`metrics_server` attributes, it will be removed in a future release.
	Addons []string `pulumi:"addons"`
	// Enable automatic upgrading of the SKS cluster control plane Kubernetes version (default: `false`).
	AutoUpgrade *bool `pulumi:"autoUpgrade"`
	// The Kubernetes [CNI][cni] plugin to be deployed in the SKS cluster control plane (default: `"calico"`). Can only be set during creation.
	Cni *string `pulumi:"cni"`
	// The creation date of the SKS cluster.
	CreatedAt *string `pulumi:"createdAt"`
	// The description of the SKS cluster.
	Description *string `pulumi:"description"`
	// The Kubernetes public API endpoint of the SKS cluster.
	Endpoint *string `pulumi:"endpoint"`
	// Deploy the Exoscale [Cloud Controller Manager][exo-ccm] in the SKS cluster control plane (default: `true`). Can only be set during creation.
	ExoscaleCcm *bool `pulumi:"exoscaleCcm"`
	// A map of key/value labels.
	Labels map[string]string `pulumi:"labels"`
	// Deploy the [Kubernetes Metrics Server][k8s-ms] in the SKS cluster control plane (default: `true`). Can only be set during creation.
	MetricsServer *bool `pulumi:"metricsServer"`
	// The name of the SKS cluster.
	Name *string `pulumi:"name"`
	// The list of [SKS Nodepools][r-sks_nodepool] (IDs) attached to the SKS cluster.
	Nodepools []string `pulumi:"nodepools"`
	// An OpenID Connect configuration to provide to the Kubernetes API server. Can only be set during creation. Structure is documented below.
	Oidc *SKSClusterOidc `pulumi:"oidc"`
	// The service level of the SKS cluster control plane (default: `"pro"`). Can only be set during creation.
	ServiceLevel *string `pulumi:"serviceLevel"`
	// The current state of the SKS cluster.
	State *string `pulumi:"state"`
	// The Kubernetes version of the SKS cluster control plane (default: latest version available from the API). Can only be set during creation.
	Version *string `pulumi:"version"`
	// The name of the [zone][zone] to deploy the SKS cluster into.
	Zone *string `pulumi:"zone"`
}

type SKSClusterState struct {
	// Deprecated: This attribute has been replaced by `exoscale_ccm`/`metrics_server` attributes, it will be removed in a future release.
	Addons pulumi.StringArrayInput
	// Enable automatic upgrading of the SKS cluster control plane Kubernetes version (default: `false`).
	AutoUpgrade pulumi.BoolPtrInput
	// The Kubernetes [CNI][cni] plugin to be deployed in the SKS cluster control plane (default: `"calico"`). Can only be set during creation.
	Cni pulumi.StringPtrInput
	// The creation date of the SKS cluster.
	CreatedAt pulumi.StringPtrInput
	// The description of the SKS cluster.
	Description pulumi.StringPtrInput
	// The Kubernetes public API endpoint of the SKS cluster.
	Endpoint pulumi.StringPtrInput
	// Deploy the Exoscale [Cloud Controller Manager][exo-ccm] in the SKS cluster control plane (default: `true`). Can only be set during creation.
	ExoscaleCcm pulumi.BoolPtrInput
	// A map of key/value labels.
	Labels pulumi.StringMapInput
	// Deploy the [Kubernetes Metrics Server][k8s-ms] in the SKS cluster control plane (default: `true`). Can only be set during creation.
	MetricsServer pulumi.BoolPtrInput
	// The name of the SKS cluster.
	Name pulumi.StringPtrInput
	// The list of [SKS Nodepools][r-sks_nodepool] (IDs) attached to the SKS cluster.
	Nodepools pulumi.StringArrayInput
	// An OpenID Connect configuration to provide to the Kubernetes API server. Can only be set during creation. Structure is documented below.
	Oidc SKSClusterOidcPtrInput
	// The service level of the SKS cluster control plane (default: `"pro"`). Can only be set during creation.
	ServiceLevel pulumi.StringPtrInput
	// The current state of the SKS cluster.
	State pulumi.StringPtrInput
	// The Kubernetes version of the SKS cluster control plane (default: latest version available from the API). Can only be set during creation.
	Version pulumi.StringPtrInput
	// The name of the [zone][zone] to deploy the SKS cluster into.
	Zone pulumi.StringPtrInput
}

func (SKSClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*sksclusterState)(nil)).Elem()
}

type sksclusterArgs struct {
	// Deprecated: This attribute has been replaced by `exoscale_ccm`/`metrics_server` attributes, it will be removed in a future release.
	Addons []string `pulumi:"addons"`
	// Enable automatic upgrading of the SKS cluster control plane Kubernetes version (default: `false`).
	AutoUpgrade *bool `pulumi:"autoUpgrade"`
	// The Kubernetes [CNI][cni] plugin to be deployed in the SKS cluster control plane (default: `"calico"`). Can only be set during creation.
	Cni *string `pulumi:"cni"`
	// The description of the SKS cluster.
	Description *string `pulumi:"description"`
	// Deploy the Exoscale [Cloud Controller Manager][exo-ccm] in the SKS cluster control plane (default: `true`). Can only be set during creation.
	ExoscaleCcm *bool `pulumi:"exoscaleCcm"`
	// A map of key/value labels.
	Labels map[string]string `pulumi:"labels"`
	// Deploy the [Kubernetes Metrics Server][k8s-ms] in the SKS cluster control plane (default: `true`). Can only be set during creation.
	MetricsServer *bool `pulumi:"metricsServer"`
	// The name of the SKS cluster.
	Name *string `pulumi:"name"`
	// An OpenID Connect configuration to provide to the Kubernetes API server. Can only be set during creation. Structure is documented below.
	Oidc *SKSClusterOidc `pulumi:"oidc"`
	// The service level of the SKS cluster control plane (default: `"pro"`). Can only be set during creation.
	ServiceLevel *string `pulumi:"serviceLevel"`
	// The Kubernetes version of the SKS cluster control plane (default: latest version available from the API). Can only be set during creation.
	Version *string `pulumi:"version"`
	// The name of the [zone][zone] to deploy the SKS cluster into.
	Zone string `pulumi:"zone"`
}

// The set of arguments for constructing a SKSCluster resource.
type SKSClusterArgs struct {
	// Deprecated: This attribute has been replaced by `exoscale_ccm`/`metrics_server` attributes, it will be removed in a future release.
	Addons pulumi.StringArrayInput
	// Enable automatic upgrading of the SKS cluster control plane Kubernetes version (default: `false`).
	AutoUpgrade pulumi.BoolPtrInput
	// The Kubernetes [CNI][cni] plugin to be deployed in the SKS cluster control plane (default: `"calico"`). Can only be set during creation.
	Cni pulumi.StringPtrInput
	// The description of the SKS cluster.
	Description pulumi.StringPtrInput
	// Deploy the Exoscale [Cloud Controller Manager][exo-ccm] in the SKS cluster control plane (default: `true`). Can only be set during creation.
	ExoscaleCcm pulumi.BoolPtrInput
	// A map of key/value labels.
	Labels pulumi.StringMapInput
	// Deploy the [Kubernetes Metrics Server][k8s-ms] in the SKS cluster control plane (default: `true`). Can only be set during creation.
	MetricsServer pulumi.BoolPtrInput
	// The name of the SKS cluster.
	Name pulumi.StringPtrInput
	// An OpenID Connect configuration to provide to the Kubernetes API server. Can only be set during creation. Structure is documented below.
	Oidc SKSClusterOidcPtrInput
	// The service level of the SKS cluster control plane (default: `"pro"`). Can only be set during creation.
	ServiceLevel pulumi.StringPtrInput
	// The Kubernetes version of the SKS cluster control plane (default: latest version available from the API). Can only be set during creation.
	Version pulumi.StringPtrInput
	// The name of the [zone][zone] to deploy the SKS cluster into.
	Zone pulumi.StringInput
}

func (SKSClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sksclusterArgs)(nil)).Elem()
}

type SKSClusterInput interface {
	pulumi.Input

	ToSKSClusterOutput() SKSClusterOutput
	ToSKSClusterOutputWithContext(ctx context.Context) SKSClusterOutput
}

func (*SKSCluster) ElementType() reflect.Type {
	return reflect.TypeOf((**SKSCluster)(nil)).Elem()
}

func (i *SKSCluster) ToSKSClusterOutput() SKSClusterOutput {
	return i.ToSKSClusterOutputWithContext(context.Background())
}

func (i *SKSCluster) ToSKSClusterOutputWithContext(ctx context.Context) SKSClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SKSClusterOutput)
}

// SKSClusterArrayInput is an input type that accepts SKSClusterArray and SKSClusterArrayOutput values.
// You can construct a concrete instance of `SKSClusterArrayInput` via:
//
//          SKSClusterArray{ SKSClusterArgs{...} }
type SKSClusterArrayInput interface {
	pulumi.Input

	ToSKSClusterArrayOutput() SKSClusterArrayOutput
	ToSKSClusterArrayOutputWithContext(context.Context) SKSClusterArrayOutput
}

type SKSClusterArray []SKSClusterInput

func (SKSClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SKSCluster)(nil)).Elem()
}

func (i SKSClusterArray) ToSKSClusterArrayOutput() SKSClusterArrayOutput {
	return i.ToSKSClusterArrayOutputWithContext(context.Background())
}

func (i SKSClusterArray) ToSKSClusterArrayOutputWithContext(ctx context.Context) SKSClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SKSClusterArrayOutput)
}

// SKSClusterMapInput is an input type that accepts SKSClusterMap and SKSClusterMapOutput values.
// You can construct a concrete instance of `SKSClusterMapInput` via:
//
//          SKSClusterMap{ "key": SKSClusterArgs{...} }
type SKSClusterMapInput interface {
	pulumi.Input

	ToSKSClusterMapOutput() SKSClusterMapOutput
	ToSKSClusterMapOutputWithContext(context.Context) SKSClusterMapOutput
}

type SKSClusterMap map[string]SKSClusterInput

func (SKSClusterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SKSCluster)(nil)).Elem()
}

func (i SKSClusterMap) ToSKSClusterMapOutput() SKSClusterMapOutput {
	return i.ToSKSClusterMapOutputWithContext(context.Background())
}

func (i SKSClusterMap) ToSKSClusterMapOutputWithContext(ctx context.Context) SKSClusterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SKSClusterMapOutput)
}

type SKSClusterOutput struct{ *pulumi.OutputState }

func (SKSClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SKSCluster)(nil)).Elem()
}

func (o SKSClusterOutput) ToSKSClusterOutput() SKSClusterOutput {
	return o
}

func (o SKSClusterOutput) ToSKSClusterOutputWithContext(ctx context.Context) SKSClusterOutput {
	return o
}

type SKSClusterArrayOutput struct{ *pulumi.OutputState }

func (SKSClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SKSCluster)(nil)).Elem()
}

func (o SKSClusterArrayOutput) ToSKSClusterArrayOutput() SKSClusterArrayOutput {
	return o
}

func (o SKSClusterArrayOutput) ToSKSClusterArrayOutputWithContext(ctx context.Context) SKSClusterArrayOutput {
	return o
}

func (o SKSClusterArrayOutput) Index(i pulumi.IntInput) SKSClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SKSCluster {
		return vs[0].([]*SKSCluster)[vs[1].(int)]
	}).(SKSClusterOutput)
}

type SKSClusterMapOutput struct{ *pulumi.OutputState }

func (SKSClusterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SKSCluster)(nil)).Elem()
}

func (o SKSClusterMapOutput) ToSKSClusterMapOutput() SKSClusterMapOutput {
	return o
}

func (o SKSClusterMapOutput) ToSKSClusterMapOutputWithContext(ctx context.Context) SKSClusterMapOutput {
	return o
}

func (o SKSClusterMapOutput) MapIndex(k pulumi.StringInput) SKSClusterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SKSCluster {
		return vs[0].(map[string]*SKSCluster)[vs[1].(string)]
	}).(SKSClusterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SKSClusterInput)(nil)).Elem(), &SKSCluster{})
	pulumi.RegisterInputType(reflect.TypeOf((*SKSClusterArrayInput)(nil)).Elem(), SKSClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SKSClusterMapInput)(nil)).Elem(), SKSClusterMap{})
	pulumi.RegisterOutputType(SKSClusterOutput{})
	pulumi.RegisterOutputType(SKSClusterArrayOutput{})
	pulumi.RegisterOutputType(SKSClusterMapOutput{})
}
