// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package exoscale

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides information on a [Private Network][privnet-doc] for use in other resources such as a [`InstancePool`][r-instance_pool] resource.
//
// !> **WARNING:** This data source is deprecated and will be removed in the next major version.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-exoscale/sdk/go/exoscale"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		zone := "ch-gva-2"
// 		opt0 := "db"
// 		db, err := exoscale.LookupNetwork(ctx, &GetNetworkArgs{
// 			Zone: zone,
// 			Name: &opt0,
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		opt1 := "Linux Ubuntu 20.04 LTS 64-bit"
// 		ubuntu, err := exoscale.GetComputeTemplate(ctx, &GetComputeTemplateArgs{
// 			Zone: zone,
// 			Name: &opt1,
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		_, err = exoscale.NewInstancePool(ctx, "webservers", &exoscale.InstancePoolArgs{
// 			Zone:            pulumi.String(zone),
// 			TemplateId:      pulumi.String(ubuntu.Id),
// 			Size:            pulumi.Int(5),
// 			ServiceOffering: pulumi.String("medium"),
// 			NetworkIds: pulumi.StringArray{
// 				pulumi.String(db.Id),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
func LookupNetwork(ctx *pulumi.Context, args *LookupNetworkArgs, opts ...pulumi.InvokeOption) (*LookupNetworkResult, error) {
	var rv LookupNetworkResult
	err := ctx.Invoke("exoscale:index/getNetwork:getNetwork", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getNetwork.
type LookupNetworkArgs struct {
	// The ID of the Private Network (conflicts with `name`)
	Id *string `pulumi:"id"`
	// The name of the Private Network (conflicts with `id`)
	Name *string `pulumi:"name"`
	// The [zone][zone] of the Private Network
	Zone string `pulumi:"zone"`
}

// A collection of values returned by getNetwork.
type LookupNetworkResult struct {
	// The description of the Private Network
	Description string `pulumi:"description"`
	// The last address of the IP range used by the DHCP service (for *managed* Private Networks)
	EndIp string  `pulumi:"endIp"`
	Id    *string `pulumi:"id"`
	Name  *string `pulumi:"name"`
	// The netmask defining the IP network allowed for the static lease (for *managed* Private Networks)
	Netmask string `pulumi:"netmask"`
	// The first address of IP range used by the DHCP service to automatically assign (for *managed* Private Networks)
	StartIp string `pulumi:"startIp"`
	Zone    string `pulumi:"zone"`
}

func LookupNetworkOutput(ctx *pulumi.Context, args LookupNetworkOutputArgs, opts ...pulumi.InvokeOption) LookupNetworkResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupNetworkResult, error) {
			args := v.(LookupNetworkArgs)
			r, err := LookupNetwork(ctx, &args, opts...)
			return *r, err
		}).(LookupNetworkResultOutput)
}

// A collection of arguments for invoking getNetwork.
type LookupNetworkOutputArgs struct {
	// The ID of the Private Network (conflicts with `name`)
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The name of the Private Network (conflicts with `id`)
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The [zone][zone] of the Private Network
	Zone pulumi.StringInput `pulumi:"zone"`
}

func (LookupNetworkOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNetworkArgs)(nil)).Elem()
}

// A collection of values returned by getNetwork.
type LookupNetworkResultOutput struct{ *pulumi.OutputState }

func (LookupNetworkResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNetworkResult)(nil)).Elem()
}

func (o LookupNetworkResultOutput) ToLookupNetworkResultOutput() LookupNetworkResultOutput {
	return o
}

func (o LookupNetworkResultOutput) ToLookupNetworkResultOutputWithContext(ctx context.Context) LookupNetworkResultOutput {
	return o
}

// The description of the Private Network
func (o LookupNetworkResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkResult) string { return v.Description }).(pulumi.StringOutput)
}

// The last address of the IP range used by the DHCP service (for *managed* Private Networks)
func (o LookupNetworkResultOutput) EndIp() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkResult) string { return v.EndIp }).(pulumi.StringOutput)
}

func (o LookupNetworkResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupNetworkResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o LookupNetworkResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupNetworkResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The netmask defining the IP network allowed for the static lease (for *managed* Private Networks)
func (o LookupNetworkResultOutput) Netmask() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkResult) string { return v.Netmask }).(pulumi.StringOutput)
}

// The first address of IP range used by the DHCP service to automatically assign (for *managed* Private Networks)
func (o LookupNetworkResultOutput) StartIp() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkResult) string { return v.StartIp }).(pulumi.StringOutput)
}

func (o LookupNetworkResultOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkResult) string { return v.Zone }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupNetworkResultOutput{})
}
