// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package exoscale

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides information on an [Anti-Affinity Group][aag-doc] for use in other resources such as a [`Compute`][r-compute] resource.
//
// !> **WARNING:** This data source is deprecated and will be removed in the next major version.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-exoscale/sdk/go/exoscale"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		zone := "ch-gva-2"
// 		opt0 := "web"
// 		web, err := exoscale.LookupAffinity(ctx, &GetAffinityArgs{
// 			Name: &opt0,
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		opt1 := "Linux Ubuntu 20.04 LTS 64-bit"
// 		ubuntu, err := exoscale.GetComputeTemplate(ctx, &GetComputeTemplateArgs{
// 			Zone: zone,
// 			Name: &opt1,
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		_, err = exoscale.NewCompute(ctx, "myServer", &exoscale.ComputeArgs{
// 			Zone:       pulumi.String(zone),
// 			TemplateId: pulumi.String(ubuntu.Id),
// 			DiskSize:   pulumi.Int(20),
// 			AffinityGroupIds: pulumi.StringArray{
// 				pulumi.String(web.Id),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
func LookupAffinity(ctx *pulumi.Context, args *LookupAffinityArgs, opts ...pulumi.InvokeOption) (*LookupAffinityResult, error) {
	var rv LookupAffinityResult
	err := ctx.Invoke("exoscale:index/getAffinity:getAffinity", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getAffinity.
type LookupAffinityArgs struct {
	// The ID of the Anti-Affinity Group (conflicts with `name`)
	Id *string `pulumi:"id"`
	// The name of the Anti-Affinity Group (conflicts with `id`)
	Name *string `pulumi:"name"`
}

// A collection of values returned by getAffinity.
type LookupAffinityResult struct {
	Id   *string `pulumi:"id"`
	Name *string `pulumi:"name"`
}

func LookupAffinityOutput(ctx *pulumi.Context, args LookupAffinityOutputArgs, opts ...pulumi.InvokeOption) LookupAffinityResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupAffinityResult, error) {
			args := v.(LookupAffinityArgs)
			r, err := LookupAffinity(ctx, &args, opts...)
			return *r, err
		}).(LookupAffinityResultOutput)
}

// A collection of arguments for invoking getAffinity.
type LookupAffinityOutputArgs struct {
	// The ID of the Anti-Affinity Group (conflicts with `name`)
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The name of the Anti-Affinity Group (conflicts with `id`)
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (LookupAffinityOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAffinityArgs)(nil)).Elem()
}

// A collection of values returned by getAffinity.
type LookupAffinityResultOutput struct{ *pulumi.OutputState }

func (LookupAffinityResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAffinityResult)(nil)).Elem()
}

func (o LookupAffinityResultOutput) ToLookupAffinityResultOutput() LookupAffinityResultOutput {
	return o
}

func (o LookupAffinityResultOutput) ToLookupAffinityResultOutputWithContext(ctx context.Context) LookupAffinityResultOutput {
	return o
}

func (o LookupAffinityResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAffinityResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o LookupAffinityResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAffinityResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupAffinityResultOutput{})
}
