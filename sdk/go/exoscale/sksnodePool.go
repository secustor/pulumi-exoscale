// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package exoscale

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides an Exoscale [SKS][sks-doc] Nodepool resource. This can be used to create, modify, and delete SKS Nodepools.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-exoscale/sdk/go/exoscale"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		zone := "de-fra-1"
// 		sksSecurityGroup, err := exoscale.NewSecurityGroup(ctx, "sksSecurityGroup", nil)
// 		if err != nil {
// 			return err
// 		}
// 		_, err = exoscale.NewSecurityGroupRules(ctx, "sksSecurityGroupRules", &exoscale.SecurityGroupRulesArgs{
// 			SecurityGroup: sksSecurityGroup.Name,
// 			Ingresses: SecurityGroupRulesIngressArray{
// 				&SecurityGroupRulesIngressArgs{
// 					Description: pulumi.String("Calico traffic"),
// 					Protocol:    pulumi.String("UDP"),
// 					Ports: pulumi.StringArray{
// 						pulumi.String("4789"),
// 					},
// 					UserSecurityGroupLists: pulumi.StringArray{
// 						sksSecurityGroup.Name,
// 					},
// 				},
// 				&SecurityGroupRulesIngressArgs{
// 					Description: pulumi.String("Nodes logs/exec"),
// 					Protocol:    pulumi.String("TCP"),
// 					Ports: pulumi.StringArray{
// 						pulumi.String("10250"),
// 					},
// 					CidrLists: pulumi.StringArray{
// 						pulumi.String("0.0.0.0/0"),
// 						pulumi.String("::/0"),
// 					},
// 				},
// 				&SecurityGroupRulesIngressArgs{
// 					Description: pulumi.String("NodePort services"),
// 					Protocol:    pulumi.String("TCP"),
// 					CidrLists: pulumi.StringArray{
// 						pulumi.String("0.0.0.0/0"),
// 						pulumi.String("::/0"),
// 					},
// 					Ports: pulumi.StringArray{
// 						pulumi.String("30000-32767"),
// 					},
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		prod, err := exoscale.NewSKSCluster(ctx, "prod", &exoscale.SKSClusterArgs{
// 			Zone:    pulumi.String(zone),
// 			Version: pulumi.String("1.20.3"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = exoscale.NewSKSNodePool(ctx, "ci-builders", &exoscale.SKSNodePoolArgs{
// 			Zone:         pulumi.String(zone),
// 			ClusterId:    prod.ID(),
// 			InstanceType: pulumi.String("standard.medium"),
// 			Size:         pulumi.Int(3),
// 			SecurityGroupIds: pulumi.StringArray{
// 				sksSecurityGroup.ID(),
// 			},
// 			Labels: pulumi.StringMap{
// 				"role": pulumi.String("ci-builders"),
// 			},
// 			Taints: pulumi.StringMap{
// 				"ci": pulumi.String("ci:NoSchedule"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// An existing SKS Nodepool can be imported as a resource by `<CLUSTER-ID>/<NODEPOOL-ID>@<ZONE>`console
//
// ```sh
//  $ pulumi import exoscale:index/sKSNodePool:SKSNodePool ci-builders eb556678-ec59-4be6-8c54-0406ae0f6da6/8c08b92a-e673-47c7-866e-dc009f620a82@de-fra-1
// ```
//
//  [k8s-taints]https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/ [r-sks_cluster]sks_cluster.html [sks-doc]https://community.exoscale.com/documentation/sks/ [type]https://www.exoscale.com/pricing/#/compute/ [zone]https://www.exoscale.com/datacenters/
type SKSNodePool struct {
	pulumi.CustomResourceState

	// The list of Anti-Affinity Groups (IDs) the Compute instances managed by the SKS Nodepool are member of.
	AntiAffinityGroupIds pulumi.StringArrayOutput `pulumi:"antiAffinityGroupIds"`
	// The ID of the parent SKS cluster.
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// The creation date of the SKS Nodepool.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// A Deploy Target ID to deploy managed Compute instances to.
	DeployTargetId pulumi.StringPtrOutput `pulumi:"deployTargetId"`
	// The description of the SKS Nodepool.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The disk size of the Compute instances managed by the SKS Nodepool (default: `50`).
	DiskSize pulumi.IntPtrOutput `pulumi:"diskSize"`
	// The ID of the Instance Pool managed by the SKS Nodepool.
	InstancePoolId pulumi.StringOutput `pulumi:"instancePoolId"`
	// The string to add as prefix to managed Compute instances name (default `pool`).
	InstancePrefix pulumi.StringPtrOutput `pulumi:"instancePrefix"`
	// The [type][type] of Compute instances managed by the SKS Nodepool (format: `FAMILY.SIZE`, e.g. `standard.medium`, `memory.huge`).
	InstanceType pulumi.StringOutput `pulumi:"instanceType"`
	// A map of key/value labels.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The name of the SKS Nodepool.
	Name pulumi.StringOutput `pulumi:"name"`
	// The list of Private Networks (IDs) to be attached to the Compute instances managed by the SKS Nodepool.
	PrivateNetworkIds pulumi.StringArrayOutput `pulumi:"privateNetworkIds"`
	// The list of Security Groups (IDs) the Compute instances managed by the SKS Nodepool are member of.
	SecurityGroupIds pulumi.StringArrayOutput `pulumi:"securityGroupIds"`
	// The number of Compute instances the SKS Nodepool manages.
	Size pulumi.IntOutput `pulumi:"size"`
	// The current state of the SKS Nodepool.
	State pulumi.StringOutput `pulumi:"state"`
	// A map of key/value [Kubernetes taints][k8s-taints] (value format: `VALUE:EFFECT`).
	Taints pulumi.StringMapOutput `pulumi:"taints"`
	// The ID of the Compute instance template used by the SKS Nodepool members.
	TemplateId pulumi.StringOutput `pulumi:"templateId"`
	// The Kubernetes version of the SKS Nodepool members.
	Version pulumi.StringOutput `pulumi:"version"`
	// The name of the [zone][zone] to deploy the SKS Nodepool into.
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewSKSNodePool registers a new resource with the given unique name, arguments, and options.
func NewSKSNodePool(ctx *pulumi.Context,
	name string, args *SKSNodePoolArgs, opts ...pulumi.ResourceOption) (*SKSNodePool, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	if args.InstanceType == nil {
		return nil, errors.New("invalid value for required argument 'InstanceType'")
	}
	if args.Size == nil {
		return nil, errors.New("invalid value for required argument 'Size'")
	}
	if args.Zone == nil {
		return nil, errors.New("invalid value for required argument 'Zone'")
	}
	var resource SKSNodePool
	err := ctx.RegisterResource("exoscale:index/sKSNodePool:SKSNodePool", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSKSNodePool gets an existing SKSNodePool resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSKSNodePool(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SKSNodePoolState, opts ...pulumi.ResourceOption) (*SKSNodePool, error) {
	var resource SKSNodePool
	err := ctx.ReadResource("exoscale:index/sKSNodePool:SKSNodePool", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SKSNodePool resources.
type sksnodePoolState struct {
	// The list of Anti-Affinity Groups (IDs) the Compute instances managed by the SKS Nodepool are member of.
	AntiAffinityGroupIds []string `pulumi:"antiAffinityGroupIds"`
	// The ID of the parent SKS cluster.
	ClusterId *string `pulumi:"clusterId"`
	// The creation date of the SKS Nodepool.
	CreatedAt *string `pulumi:"createdAt"`
	// A Deploy Target ID to deploy managed Compute instances to.
	DeployTargetId *string `pulumi:"deployTargetId"`
	// The description of the SKS Nodepool.
	Description *string `pulumi:"description"`
	// The disk size of the Compute instances managed by the SKS Nodepool (default: `50`).
	DiskSize *int `pulumi:"diskSize"`
	// The ID of the Instance Pool managed by the SKS Nodepool.
	InstancePoolId *string `pulumi:"instancePoolId"`
	// The string to add as prefix to managed Compute instances name (default `pool`).
	InstancePrefix *string `pulumi:"instancePrefix"`
	// The [type][type] of Compute instances managed by the SKS Nodepool (format: `FAMILY.SIZE`, e.g. `standard.medium`, `memory.huge`).
	InstanceType *string `pulumi:"instanceType"`
	// A map of key/value labels.
	Labels map[string]string `pulumi:"labels"`
	// The name of the SKS Nodepool.
	Name *string `pulumi:"name"`
	// The list of Private Networks (IDs) to be attached to the Compute instances managed by the SKS Nodepool.
	PrivateNetworkIds []string `pulumi:"privateNetworkIds"`
	// The list of Security Groups (IDs) the Compute instances managed by the SKS Nodepool are member of.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// The number of Compute instances the SKS Nodepool manages.
	Size *int `pulumi:"size"`
	// The current state of the SKS Nodepool.
	State *string `pulumi:"state"`
	// A map of key/value [Kubernetes taints][k8s-taints] (value format: `VALUE:EFFECT`).
	Taints map[string]string `pulumi:"taints"`
	// The ID of the Compute instance template used by the SKS Nodepool members.
	TemplateId *string `pulumi:"templateId"`
	// The Kubernetes version of the SKS Nodepool members.
	Version *string `pulumi:"version"`
	// The name of the [zone][zone] to deploy the SKS Nodepool into.
	Zone *string `pulumi:"zone"`
}

type SKSNodePoolState struct {
	// The list of Anti-Affinity Groups (IDs) the Compute instances managed by the SKS Nodepool are member of.
	AntiAffinityGroupIds pulumi.StringArrayInput
	// The ID of the parent SKS cluster.
	ClusterId pulumi.StringPtrInput
	// The creation date of the SKS Nodepool.
	CreatedAt pulumi.StringPtrInput
	// A Deploy Target ID to deploy managed Compute instances to.
	DeployTargetId pulumi.StringPtrInput
	// The description of the SKS Nodepool.
	Description pulumi.StringPtrInput
	// The disk size of the Compute instances managed by the SKS Nodepool (default: `50`).
	DiskSize pulumi.IntPtrInput
	// The ID of the Instance Pool managed by the SKS Nodepool.
	InstancePoolId pulumi.StringPtrInput
	// The string to add as prefix to managed Compute instances name (default `pool`).
	InstancePrefix pulumi.StringPtrInput
	// The [type][type] of Compute instances managed by the SKS Nodepool (format: `FAMILY.SIZE`, e.g. `standard.medium`, `memory.huge`).
	InstanceType pulumi.StringPtrInput
	// A map of key/value labels.
	Labels pulumi.StringMapInput
	// The name of the SKS Nodepool.
	Name pulumi.StringPtrInput
	// The list of Private Networks (IDs) to be attached to the Compute instances managed by the SKS Nodepool.
	PrivateNetworkIds pulumi.StringArrayInput
	// The list of Security Groups (IDs) the Compute instances managed by the SKS Nodepool are member of.
	SecurityGroupIds pulumi.StringArrayInput
	// The number of Compute instances the SKS Nodepool manages.
	Size pulumi.IntPtrInput
	// The current state of the SKS Nodepool.
	State pulumi.StringPtrInput
	// A map of key/value [Kubernetes taints][k8s-taints] (value format: `VALUE:EFFECT`).
	Taints pulumi.StringMapInput
	// The ID of the Compute instance template used by the SKS Nodepool members.
	TemplateId pulumi.StringPtrInput
	// The Kubernetes version of the SKS Nodepool members.
	Version pulumi.StringPtrInput
	// The name of the [zone][zone] to deploy the SKS Nodepool into.
	Zone pulumi.StringPtrInput
}

func (SKSNodePoolState) ElementType() reflect.Type {
	return reflect.TypeOf((*sksnodePoolState)(nil)).Elem()
}

type sksnodePoolArgs struct {
	// The list of Anti-Affinity Groups (IDs) the Compute instances managed by the SKS Nodepool are member of.
	AntiAffinityGroupIds []string `pulumi:"antiAffinityGroupIds"`
	// The ID of the parent SKS cluster.
	ClusterId string `pulumi:"clusterId"`
	// A Deploy Target ID to deploy managed Compute instances to.
	DeployTargetId *string `pulumi:"deployTargetId"`
	// The description of the SKS Nodepool.
	Description *string `pulumi:"description"`
	// The disk size of the Compute instances managed by the SKS Nodepool (default: `50`).
	DiskSize *int `pulumi:"diskSize"`
	// The string to add as prefix to managed Compute instances name (default `pool`).
	InstancePrefix *string `pulumi:"instancePrefix"`
	// The [type][type] of Compute instances managed by the SKS Nodepool (format: `FAMILY.SIZE`, e.g. `standard.medium`, `memory.huge`).
	InstanceType string `pulumi:"instanceType"`
	// A map of key/value labels.
	Labels map[string]string `pulumi:"labels"`
	// The name of the SKS Nodepool.
	Name *string `pulumi:"name"`
	// The list of Private Networks (IDs) to be attached to the Compute instances managed by the SKS Nodepool.
	PrivateNetworkIds []string `pulumi:"privateNetworkIds"`
	// The list of Security Groups (IDs) the Compute instances managed by the SKS Nodepool are member of.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// The number of Compute instances the SKS Nodepool manages.
	Size int `pulumi:"size"`
	// A map of key/value [Kubernetes taints][k8s-taints] (value format: `VALUE:EFFECT`).
	Taints map[string]string `pulumi:"taints"`
	// The name of the [zone][zone] to deploy the SKS Nodepool into.
	Zone string `pulumi:"zone"`
}

// The set of arguments for constructing a SKSNodePool resource.
type SKSNodePoolArgs struct {
	// The list of Anti-Affinity Groups (IDs) the Compute instances managed by the SKS Nodepool are member of.
	AntiAffinityGroupIds pulumi.StringArrayInput
	// The ID of the parent SKS cluster.
	ClusterId pulumi.StringInput
	// A Deploy Target ID to deploy managed Compute instances to.
	DeployTargetId pulumi.StringPtrInput
	// The description of the SKS Nodepool.
	Description pulumi.StringPtrInput
	// The disk size of the Compute instances managed by the SKS Nodepool (default: `50`).
	DiskSize pulumi.IntPtrInput
	// The string to add as prefix to managed Compute instances name (default `pool`).
	InstancePrefix pulumi.StringPtrInput
	// The [type][type] of Compute instances managed by the SKS Nodepool (format: `FAMILY.SIZE`, e.g. `standard.medium`, `memory.huge`).
	InstanceType pulumi.StringInput
	// A map of key/value labels.
	Labels pulumi.StringMapInput
	// The name of the SKS Nodepool.
	Name pulumi.StringPtrInput
	// The list of Private Networks (IDs) to be attached to the Compute instances managed by the SKS Nodepool.
	PrivateNetworkIds pulumi.StringArrayInput
	// The list of Security Groups (IDs) the Compute instances managed by the SKS Nodepool are member of.
	SecurityGroupIds pulumi.StringArrayInput
	// The number of Compute instances the SKS Nodepool manages.
	Size pulumi.IntInput
	// A map of key/value [Kubernetes taints][k8s-taints] (value format: `VALUE:EFFECT`).
	Taints pulumi.StringMapInput
	// The name of the [zone][zone] to deploy the SKS Nodepool into.
	Zone pulumi.StringInput
}

func (SKSNodePoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sksnodePoolArgs)(nil)).Elem()
}

type SKSNodePoolInput interface {
	pulumi.Input

	ToSKSNodePoolOutput() SKSNodePoolOutput
	ToSKSNodePoolOutputWithContext(ctx context.Context) SKSNodePoolOutput
}

func (*SKSNodePool) ElementType() reflect.Type {
	return reflect.TypeOf((**SKSNodePool)(nil)).Elem()
}

func (i *SKSNodePool) ToSKSNodePoolOutput() SKSNodePoolOutput {
	return i.ToSKSNodePoolOutputWithContext(context.Background())
}

func (i *SKSNodePool) ToSKSNodePoolOutputWithContext(ctx context.Context) SKSNodePoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SKSNodePoolOutput)
}

// SKSNodePoolArrayInput is an input type that accepts SKSNodePoolArray and SKSNodePoolArrayOutput values.
// You can construct a concrete instance of `SKSNodePoolArrayInput` via:
//
//          SKSNodePoolArray{ SKSNodePoolArgs{...} }
type SKSNodePoolArrayInput interface {
	pulumi.Input

	ToSKSNodePoolArrayOutput() SKSNodePoolArrayOutput
	ToSKSNodePoolArrayOutputWithContext(context.Context) SKSNodePoolArrayOutput
}

type SKSNodePoolArray []SKSNodePoolInput

func (SKSNodePoolArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SKSNodePool)(nil)).Elem()
}

func (i SKSNodePoolArray) ToSKSNodePoolArrayOutput() SKSNodePoolArrayOutput {
	return i.ToSKSNodePoolArrayOutputWithContext(context.Background())
}

func (i SKSNodePoolArray) ToSKSNodePoolArrayOutputWithContext(ctx context.Context) SKSNodePoolArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SKSNodePoolArrayOutput)
}

// SKSNodePoolMapInput is an input type that accepts SKSNodePoolMap and SKSNodePoolMapOutput values.
// You can construct a concrete instance of `SKSNodePoolMapInput` via:
//
//          SKSNodePoolMap{ "key": SKSNodePoolArgs{...} }
type SKSNodePoolMapInput interface {
	pulumi.Input

	ToSKSNodePoolMapOutput() SKSNodePoolMapOutput
	ToSKSNodePoolMapOutputWithContext(context.Context) SKSNodePoolMapOutput
}

type SKSNodePoolMap map[string]SKSNodePoolInput

func (SKSNodePoolMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SKSNodePool)(nil)).Elem()
}

func (i SKSNodePoolMap) ToSKSNodePoolMapOutput() SKSNodePoolMapOutput {
	return i.ToSKSNodePoolMapOutputWithContext(context.Background())
}

func (i SKSNodePoolMap) ToSKSNodePoolMapOutputWithContext(ctx context.Context) SKSNodePoolMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SKSNodePoolMapOutput)
}

type SKSNodePoolOutput struct{ *pulumi.OutputState }

func (SKSNodePoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SKSNodePool)(nil)).Elem()
}

func (o SKSNodePoolOutput) ToSKSNodePoolOutput() SKSNodePoolOutput {
	return o
}

func (o SKSNodePoolOutput) ToSKSNodePoolOutputWithContext(ctx context.Context) SKSNodePoolOutput {
	return o
}

type SKSNodePoolArrayOutput struct{ *pulumi.OutputState }

func (SKSNodePoolArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SKSNodePool)(nil)).Elem()
}

func (o SKSNodePoolArrayOutput) ToSKSNodePoolArrayOutput() SKSNodePoolArrayOutput {
	return o
}

func (o SKSNodePoolArrayOutput) ToSKSNodePoolArrayOutputWithContext(ctx context.Context) SKSNodePoolArrayOutput {
	return o
}

func (o SKSNodePoolArrayOutput) Index(i pulumi.IntInput) SKSNodePoolOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SKSNodePool {
		return vs[0].([]*SKSNodePool)[vs[1].(int)]
	}).(SKSNodePoolOutput)
}

type SKSNodePoolMapOutput struct{ *pulumi.OutputState }

func (SKSNodePoolMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SKSNodePool)(nil)).Elem()
}

func (o SKSNodePoolMapOutput) ToSKSNodePoolMapOutput() SKSNodePoolMapOutput {
	return o
}

func (o SKSNodePoolMapOutput) ToSKSNodePoolMapOutputWithContext(ctx context.Context) SKSNodePoolMapOutput {
	return o
}

func (o SKSNodePoolMapOutput) MapIndex(k pulumi.StringInput) SKSNodePoolOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SKSNodePool {
		return vs[0].(map[string]*SKSNodePool)[vs[1].(string)]
	}).(SKSNodePoolOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SKSNodePoolInput)(nil)).Elem(), &SKSNodePool{})
	pulumi.RegisterInputType(reflect.TypeOf((*SKSNodePoolArrayInput)(nil)).Elem(), SKSNodePoolArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SKSNodePoolMapInput)(nil)).Elem(), SKSNodePoolMap{})
	pulumi.RegisterOutputType(SKSNodePoolOutput{})
	pulumi.RegisterOutputType(SKSNodePoolArrayOutput{})
	pulumi.RegisterOutputType(SKSNodePoolMapOutput{})
}
