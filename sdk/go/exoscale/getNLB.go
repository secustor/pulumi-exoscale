// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package exoscale

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides information on a [Network Load Balancer][nlb-doc] (NLB) instance for use in other resources such as a [`NLBService`][r-nlb_service] resource.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-exoscale/sdk/go/exoscale"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		opt0 := "prod"
// 		prod, err := exoscale.LookupNLB(ctx, &GetNLBArgs{
// 			Zone: "ch-gva-2",
// 			Name: &opt0,
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		ctx.Export("nlbProdIpAddress", prod.IpAddress)
// 		return nil
// 	})
// }
// ```
func LookupNLB(ctx *pulumi.Context, args *LookupNLBArgs, opts ...pulumi.InvokeOption) (*LookupNLBResult, error) {
	var rv LookupNLBResult
	err := ctx.Invoke("exoscale:index/getNLB:getNLB", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getNLB.
type LookupNLBArgs struct {
	// The ID of the NLB (conflicts with `name`).
	Id *string `pulumi:"id"`
	// The name of NLB (conflicts with `id`).
	Name *string `pulumi:"name"`
	// The [zone][zone] of the NLB.
	Zone string `pulumi:"zone"`
}

// A collection of values returned by getNLB.
type LookupNLBResult struct {
	// The creation date of the NLB.
	CreatedAt string `pulumi:"createdAt"`
	// The description of the NLB.
	Description string  `pulumi:"description"`
	Id          *string `pulumi:"id"`
	// The public IP address of the NLB.
	IpAddress string  `pulumi:"ipAddress"`
	Name      *string `pulumi:"name"`
	// The current state of the NLB.
	State string `pulumi:"state"`
	Zone  string `pulumi:"zone"`
}

func LookupNLBOutput(ctx *pulumi.Context, args LookupNLBOutputArgs, opts ...pulumi.InvokeOption) LookupNLBResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupNLBResult, error) {
			args := v.(LookupNLBArgs)
			r, err := LookupNLB(ctx, &args, opts...)
			return *r, err
		}).(LookupNLBResultOutput)
}

// A collection of arguments for invoking getNLB.
type LookupNLBOutputArgs struct {
	// The ID of the NLB (conflicts with `name`).
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The name of NLB (conflicts with `id`).
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The [zone][zone] of the NLB.
	Zone pulumi.StringInput `pulumi:"zone"`
}

func (LookupNLBOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNLBArgs)(nil)).Elem()
}

// A collection of values returned by getNLB.
type LookupNLBResultOutput struct{ *pulumi.OutputState }

func (LookupNLBResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNLBResult)(nil)).Elem()
}

func (o LookupNLBResultOutput) ToLookupNLBResultOutput() LookupNLBResultOutput {
	return o
}

func (o LookupNLBResultOutput) ToLookupNLBResultOutputWithContext(ctx context.Context) LookupNLBResultOutput {
	return o
}

// The creation date of the NLB.
func (o LookupNLBResultOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNLBResult) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The description of the NLB.
func (o LookupNLBResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNLBResult) string { return v.Description }).(pulumi.StringOutput)
}

func (o LookupNLBResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupNLBResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The public IP address of the NLB.
func (o LookupNLBResultOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNLBResult) string { return v.IpAddress }).(pulumi.StringOutput)
}

func (o LookupNLBResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupNLBResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The current state of the NLB.
func (o LookupNLBResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNLBResult) string { return v.State }).(pulumi.StringOutput)
}

func (o LookupNLBResultOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNLBResult) string { return v.Zone }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupNLBResultOutput{})
}
