// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package exoscale

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DatabaseKafka struct {
	// Enable certificate-based authentication method.
	EnableCertAuth *bool `pulumi:"enableCertAuth"`
	// Enable Kafka Connect.
	EnableKafkaConnect *bool `pulumi:"enableKafkaConnect"`
	// Enable Kafka REST.
	EnableKafkaRest *bool `pulumi:"enableKafkaRest"`
	// Enable SASL-based authentication method.
	EnableSaslAuth *bool `pulumi:"enableSaslAuth"`
	// Enable Schema Registry.
	EnableSchemaRegistry *bool `pulumi:"enableSchemaRegistry"`
	// A list of CIDR blocks to allow incoming connections from.
	IpFilters []string `pulumi:"ipFilters"`
	// Kafka Connect configuration settings in JSON format (`exo dbaas type show kafka --settings=kafka-connect` for reference).
	KafkaConnectSettings *string `pulumi:"kafkaConnectSettings"`
	// Kafka REST configuration settings in JSON format (`exo dbaas type show kafka --settings=kafka-rest` for reference).
	KafkaRestSettings *string `pulumi:"kafkaRestSettings"`
	// Kafka configuration settings in JSON format (`exo dbaas type show kafka --settings=kafka` for reference).
	KafkaSettings *string `pulumi:"kafkaSettings"`
	// Schema Registry configuration settings in JSON format (`exo dbaas type show kafka --settings=schema-registry` for reference)
	SchemaRegistrySettings *string `pulumi:"schemaRegistrySettings"`
	// PostgreSQL major version (`exo dbaas type show pg` for reference). Can only be set during creation.
	Version *string `pulumi:"version"`
}

// DatabaseKafkaInput is an input type that accepts DatabaseKafkaArgs and DatabaseKafkaOutput values.
// You can construct a concrete instance of `DatabaseKafkaInput` via:
//
//          DatabaseKafkaArgs{...}
type DatabaseKafkaInput interface {
	pulumi.Input

	ToDatabaseKafkaOutput() DatabaseKafkaOutput
	ToDatabaseKafkaOutputWithContext(context.Context) DatabaseKafkaOutput
}

type DatabaseKafkaArgs struct {
	// Enable certificate-based authentication method.
	EnableCertAuth pulumi.BoolPtrInput `pulumi:"enableCertAuth"`
	// Enable Kafka Connect.
	EnableKafkaConnect pulumi.BoolPtrInput `pulumi:"enableKafkaConnect"`
	// Enable Kafka REST.
	EnableKafkaRest pulumi.BoolPtrInput `pulumi:"enableKafkaRest"`
	// Enable SASL-based authentication method.
	EnableSaslAuth pulumi.BoolPtrInput `pulumi:"enableSaslAuth"`
	// Enable Schema Registry.
	EnableSchemaRegistry pulumi.BoolPtrInput `pulumi:"enableSchemaRegistry"`
	// A list of CIDR blocks to allow incoming connections from.
	IpFilters pulumi.StringArrayInput `pulumi:"ipFilters"`
	// Kafka Connect configuration settings in JSON format (`exo dbaas type show kafka --settings=kafka-connect` for reference).
	KafkaConnectSettings pulumi.StringPtrInput `pulumi:"kafkaConnectSettings"`
	// Kafka REST configuration settings in JSON format (`exo dbaas type show kafka --settings=kafka-rest` for reference).
	KafkaRestSettings pulumi.StringPtrInput `pulumi:"kafkaRestSettings"`
	// Kafka configuration settings in JSON format (`exo dbaas type show kafka --settings=kafka` for reference).
	KafkaSettings pulumi.StringPtrInput `pulumi:"kafkaSettings"`
	// Schema Registry configuration settings in JSON format (`exo dbaas type show kafka --settings=schema-registry` for reference)
	SchemaRegistrySettings pulumi.StringPtrInput `pulumi:"schemaRegistrySettings"`
	// PostgreSQL major version (`exo dbaas type show pg` for reference). Can only be set during creation.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (DatabaseKafkaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseKafka)(nil)).Elem()
}

func (i DatabaseKafkaArgs) ToDatabaseKafkaOutput() DatabaseKafkaOutput {
	return i.ToDatabaseKafkaOutputWithContext(context.Background())
}

func (i DatabaseKafkaArgs) ToDatabaseKafkaOutputWithContext(ctx context.Context) DatabaseKafkaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseKafkaOutput)
}

func (i DatabaseKafkaArgs) ToDatabaseKafkaPtrOutput() DatabaseKafkaPtrOutput {
	return i.ToDatabaseKafkaPtrOutputWithContext(context.Background())
}

func (i DatabaseKafkaArgs) ToDatabaseKafkaPtrOutputWithContext(ctx context.Context) DatabaseKafkaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseKafkaOutput).ToDatabaseKafkaPtrOutputWithContext(ctx)
}

// DatabaseKafkaPtrInput is an input type that accepts DatabaseKafkaArgs, DatabaseKafkaPtr and DatabaseKafkaPtrOutput values.
// You can construct a concrete instance of `DatabaseKafkaPtrInput` via:
//
//          DatabaseKafkaArgs{...}
//
//  or:
//
//          nil
type DatabaseKafkaPtrInput interface {
	pulumi.Input

	ToDatabaseKafkaPtrOutput() DatabaseKafkaPtrOutput
	ToDatabaseKafkaPtrOutputWithContext(context.Context) DatabaseKafkaPtrOutput
}

type databaseKafkaPtrType DatabaseKafkaArgs

func DatabaseKafkaPtr(v *DatabaseKafkaArgs) DatabaseKafkaPtrInput {
	return (*databaseKafkaPtrType)(v)
}

func (*databaseKafkaPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseKafka)(nil)).Elem()
}

func (i *databaseKafkaPtrType) ToDatabaseKafkaPtrOutput() DatabaseKafkaPtrOutput {
	return i.ToDatabaseKafkaPtrOutputWithContext(context.Background())
}

func (i *databaseKafkaPtrType) ToDatabaseKafkaPtrOutputWithContext(ctx context.Context) DatabaseKafkaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseKafkaPtrOutput)
}

type DatabaseKafkaOutput struct{ *pulumi.OutputState }

func (DatabaseKafkaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseKafka)(nil)).Elem()
}

func (o DatabaseKafkaOutput) ToDatabaseKafkaOutput() DatabaseKafkaOutput {
	return o
}

func (o DatabaseKafkaOutput) ToDatabaseKafkaOutputWithContext(ctx context.Context) DatabaseKafkaOutput {
	return o
}

func (o DatabaseKafkaOutput) ToDatabaseKafkaPtrOutput() DatabaseKafkaPtrOutput {
	return o.ToDatabaseKafkaPtrOutputWithContext(context.Background())
}

func (o DatabaseKafkaOutput) ToDatabaseKafkaPtrOutputWithContext(ctx context.Context) DatabaseKafkaPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatabaseKafka) *DatabaseKafka {
		return &v
	}).(DatabaseKafkaPtrOutput)
}

// Enable certificate-based authentication method.
func (o DatabaseKafkaOutput) EnableCertAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DatabaseKafka) *bool { return v.EnableCertAuth }).(pulumi.BoolPtrOutput)
}

// Enable Kafka Connect.
func (o DatabaseKafkaOutput) EnableKafkaConnect() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DatabaseKafka) *bool { return v.EnableKafkaConnect }).(pulumi.BoolPtrOutput)
}

// Enable Kafka REST.
func (o DatabaseKafkaOutput) EnableKafkaRest() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DatabaseKafka) *bool { return v.EnableKafkaRest }).(pulumi.BoolPtrOutput)
}

// Enable SASL-based authentication method.
func (o DatabaseKafkaOutput) EnableSaslAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DatabaseKafka) *bool { return v.EnableSaslAuth }).(pulumi.BoolPtrOutput)
}

// Enable Schema Registry.
func (o DatabaseKafkaOutput) EnableSchemaRegistry() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DatabaseKafka) *bool { return v.EnableSchemaRegistry }).(pulumi.BoolPtrOutput)
}

// A list of CIDR blocks to allow incoming connections from.
func (o DatabaseKafkaOutput) IpFilters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DatabaseKafka) []string { return v.IpFilters }).(pulumi.StringArrayOutput)
}

// Kafka Connect configuration settings in JSON format (`exo dbaas type show kafka --settings=kafka-connect` for reference).
func (o DatabaseKafkaOutput) KafkaConnectSettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseKafka) *string { return v.KafkaConnectSettings }).(pulumi.StringPtrOutput)
}

// Kafka REST configuration settings in JSON format (`exo dbaas type show kafka --settings=kafka-rest` for reference).
func (o DatabaseKafkaOutput) KafkaRestSettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseKafka) *string { return v.KafkaRestSettings }).(pulumi.StringPtrOutput)
}

// Kafka configuration settings in JSON format (`exo dbaas type show kafka --settings=kafka` for reference).
func (o DatabaseKafkaOutput) KafkaSettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseKafka) *string { return v.KafkaSettings }).(pulumi.StringPtrOutput)
}

// Schema Registry configuration settings in JSON format (`exo dbaas type show kafka --settings=schema-registry` for reference)
func (o DatabaseKafkaOutput) SchemaRegistrySettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseKafka) *string { return v.SchemaRegistrySettings }).(pulumi.StringPtrOutput)
}

// PostgreSQL major version (`exo dbaas type show pg` for reference). Can only be set during creation.
func (o DatabaseKafkaOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseKafka) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type DatabaseKafkaPtrOutput struct{ *pulumi.OutputState }

func (DatabaseKafkaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseKafka)(nil)).Elem()
}

func (o DatabaseKafkaPtrOutput) ToDatabaseKafkaPtrOutput() DatabaseKafkaPtrOutput {
	return o
}

func (o DatabaseKafkaPtrOutput) ToDatabaseKafkaPtrOutputWithContext(ctx context.Context) DatabaseKafkaPtrOutput {
	return o
}

func (o DatabaseKafkaPtrOutput) Elem() DatabaseKafkaOutput {
	return o.ApplyT(func(v *DatabaseKafka) DatabaseKafka {
		if v != nil {
			return *v
		}
		var ret DatabaseKafka
		return ret
	}).(DatabaseKafkaOutput)
}

// Enable certificate-based authentication method.
func (o DatabaseKafkaPtrOutput) EnableCertAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DatabaseKafka) *bool {
		if v == nil {
			return nil
		}
		return v.EnableCertAuth
	}).(pulumi.BoolPtrOutput)
}

// Enable Kafka Connect.
func (o DatabaseKafkaPtrOutput) EnableKafkaConnect() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DatabaseKafka) *bool {
		if v == nil {
			return nil
		}
		return v.EnableKafkaConnect
	}).(pulumi.BoolPtrOutput)
}

// Enable Kafka REST.
func (o DatabaseKafkaPtrOutput) EnableKafkaRest() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DatabaseKafka) *bool {
		if v == nil {
			return nil
		}
		return v.EnableKafkaRest
	}).(pulumi.BoolPtrOutput)
}

// Enable SASL-based authentication method.
func (o DatabaseKafkaPtrOutput) EnableSaslAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DatabaseKafka) *bool {
		if v == nil {
			return nil
		}
		return v.EnableSaslAuth
	}).(pulumi.BoolPtrOutput)
}

// Enable Schema Registry.
func (o DatabaseKafkaPtrOutput) EnableSchemaRegistry() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DatabaseKafka) *bool {
		if v == nil {
			return nil
		}
		return v.EnableSchemaRegistry
	}).(pulumi.BoolPtrOutput)
}

// A list of CIDR blocks to allow incoming connections from.
func (o DatabaseKafkaPtrOutput) IpFilters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DatabaseKafka) []string {
		if v == nil {
			return nil
		}
		return v.IpFilters
	}).(pulumi.StringArrayOutput)
}

// Kafka Connect configuration settings in JSON format (`exo dbaas type show kafka --settings=kafka-connect` for reference).
func (o DatabaseKafkaPtrOutput) KafkaConnectSettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseKafka) *string {
		if v == nil {
			return nil
		}
		return v.KafkaConnectSettings
	}).(pulumi.StringPtrOutput)
}

// Kafka REST configuration settings in JSON format (`exo dbaas type show kafka --settings=kafka-rest` for reference).
func (o DatabaseKafkaPtrOutput) KafkaRestSettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseKafka) *string {
		if v == nil {
			return nil
		}
		return v.KafkaRestSettings
	}).(pulumi.StringPtrOutput)
}

// Kafka configuration settings in JSON format (`exo dbaas type show kafka --settings=kafka` for reference).
func (o DatabaseKafkaPtrOutput) KafkaSettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseKafka) *string {
		if v == nil {
			return nil
		}
		return v.KafkaSettings
	}).(pulumi.StringPtrOutput)
}

// Schema Registry configuration settings in JSON format (`exo dbaas type show kafka --settings=schema-registry` for reference)
func (o DatabaseKafkaPtrOutput) SchemaRegistrySettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseKafka) *string {
		if v == nil {
			return nil
		}
		return v.SchemaRegistrySettings
	}).(pulumi.StringPtrOutput)
}

// PostgreSQL major version (`exo dbaas type show pg` for reference). Can only be set during creation.
func (o DatabaseKafkaPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseKafka) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

type DatabaseMysql struct {
	// A custom administrator account password. Can only be set during creation.
	AdminPassword *string `pulumi:"adminPassword"`
	// A custom administrator account username. Can only be set during creation.
	AdminUsername *string `pulumi:"adminUsername"`
	// The automated backup schedule (format: HH:MM).
	BackupSchedule *string `pulumi:"backupSchedule"`
	// A list of CIDR blocks to allow incoming connections from.
	IpFilters []string `pulumi:"ipFilters"`
	// MySQL configuration settings in JSON format (`exo dbaas type show mysql --settings=mysql` for reference).
	MysqlSettings *string `pulumi:"mysqlSettings"`
	// PostgreSQL major version (`exo dbaas type show pg` for reference). Can only be set during creation.
	Version *string `pulumi:"version"`
}

// DatabaseMysqlInput is an input type that accepts DatabaseMysqlArgs and DatabaseMysqlOutput values.
// You can construct a concrete instance of `DatabaseMysqlInput` via:
//
//          DatabaseMysqlArgs{...}
type DatabaseMysqlInput interface {
	pulumi.Input

	ToDatabaseMysqlOutput() DatabaseMysqlOutput
	ToDatabaseMysqlOutputWithContext(context.Context) DatabaseMysqlOutput
}

type DatabaseMysqlArgs struct {
	// A custom administrator account password. Can only be set during creation.
	AdminPassword pulumi.StringPtrInput `pulumi:"adminPassword"`
	// A custom administrator account username. Can only be set during creation.
	AdminUsername pulumi.StringPtrInput `pulumi:"adminUsername"`
	// The automated backup schedule (format: HH:MM).
	BackupSchedule pulumi.StringPtrInput `pulumi:"backupSchedule"`
	// A list of CIDR blocks to allow incoming connections from.
	IpFilters pulumi.StringArrayInput `pulumi:"ipFilters"`
	// MySQL configuration settings in JSON format (`exo dbaas type show mysql --settings=mysql` for reference).
	MysqlSettings pulumi.StringPtrInput `pulumi:"mysqlSettings"`
	// PostgreSQL major version (`exo dbaas type show pg` for reference). Can only be set during creation.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (DatabaseMysqlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseMysql)(nil)).Elem()
}

func (i DatabaseMysqlArgs) ToDatabaseMysqlOutput() DatabaseMysqlOutput {
	return i.ToDatabaseMysqlOutputWithContext(context.Background())
}

func (i DatabaseMysqlArgs) ToDatabaseMysqlOutputWithContext(ctx context.Context) DatabaseMysqlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseMysqlOutput)
}

func (i DatabaseMysqlArgs) ToDatabaseMysqlPtrOutput() DatabaseMysqlPtrOutput {
	return i.ToDatabaseMysqlPtrOutputWithContext(context.Background())
}

func (i DatabaseMysqlArgs) ToDatabaseMysqlPtrOutputWithContext(ctx context.Context) DatabaseMysqlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseMysqlOutput).ToDatabaseMysqlPtrOutputWithContext(ctx)
}

// DatabaseMysqlPtrInput is an input type that accepts DatabaseMysqlArgs, DatabaseMysqlPtr and DatabaseMysqlPtrOutput values.
// You can construct a concrete instance of `DatabaseMysqlPtrInput` via:
//
//          DatabaseMysqlArgs{...}
//
//  or:
//
//          nil
type DatabaseMysqlPtrInput interface {
	pulumi.Input

	ToDatabaseMysqlPtrOutput() DatabaseMysqlPtrOutput
	ToDatabaseMysqlPtrOutputWithContext(context.Context) DatabaseMysqlPtrOutput
}

type databaseMysqlPtrType DatabaseMysqlArgs

func DatabaseMysqlPtr(v *DatabaseMysqlArgs) DatabaseMysqlPtrInput {
	return (*databaseMysqlPtrType)(v)
}

func (*databaseMysqlPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseMysql)(nil)).Elem()
}

func (i *databaseMysqlPtrType) ToDatabaseMysqlPtrOutput() DatabaseMysqlPtrOutput {
	return i.ToDatabaseMysqlPtrOutputWithContext(context.Background())
}

func (i *databaseMysqlPtrType) ToDatabaseMysqlPtrOutputWithContext(ctx context.Context) DatabaseMysqlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseMysqlPtrOutput)
}

type DatabaseMysqlOutput struct{ *pulumi.OutputState }

func (DatabaseMysqlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseMysql)(nil)).Elem()
}

func (o DatabaseMysqlOutput) ToDatabaseMysqlOutput() DatabaseMysqlOutput {
	return o
}

func (o DatabaseMysqlOutput) ToDatabaseMysqlOutputWithContext(ctx context.Context) DatabaseMysqlOutput {
	return o
}

func (o DatabaseMysqlOutput) ToDatabaseMysqlPtrOutput() DatabaseMysqlPtrOutput {
	return o.ToDatabaseMysqlPtrOutputWithContext(context.Background())
}

func (o DatabaseMysqlOutput) ToDatabaseMysqlPtrOutputWithContext(ctx context.Context) DatabaseMysqlPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatabaseMysql) *DatabaseMysql {
		return &v
	}).(DatabaseMysqlPtrOutput)
}

// A custom administrator account password. Can only be set during creation.
func (o DatabaseMysqlOutput) AdminPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseMysql) *string { return v.AdminPassword }).(pulumi.StringPtrOutput)
}

// A custom administrator account username. Can only be set during creation.
func (o DatabaseMysqlOutput) AdminUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseMysql) *string { return v.AdminUsername }).(pulumi.StringPtrOutput)
}

// The automated backup schedule (format: HH:MM).
func (o DatabaseMysqlOutput) BackupSchedule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseMysql) *string { return v.BackupSchedule }).(pulumi.StringPtrOutput)
}

// A list of CIDR blocks to allow incoming connections from.
func (o DatabaseMysqlOutput) IpFilters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DatabaseMysql) []string { return v.IpFilters }).(pulumi.StringArrayOutput)
}

// MySQL configuration settings in JSON format (`exo dbaas type show mysql --settings=mysql` for reference).
func (o DatabaseMysqlOutput) MysqlSettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseMysql) *string { return v.MysqlSettings }).(pulumi.StringPtrOutput)
}

// PostgreSQL major version (`exo dbaas type show pg` for reference). Can only be set during creation.
func (o DatabaseMysqlOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseMysql) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type DatabaseMysqlPtrOutput struct{ *pulumi.OutputState }

func (DatabaseMysqlPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseMysql)(nil)).Elem()
}

func (o DatabaseMysqlPtrOutput) ToDatabaseMysqlPtrOutput() DatabaseMysqlPtrOutput {
	return o
}

func (o DatabaseMysqlPtrOutput) ToDatabaseMysqlPtrOutputWithContext(ctx context.Context) DatabaseMysqlPtrOutput {
	return o
}

func (o DatabaseMysqlPtrOutput) Elem() DatabaseMysqlOutput {
	return o.ApplyT(func(v *DatabaseMysql) DatabaseMysql {
		if v != nil {
			return *v
		}
		var ret DatabaseMysql
		return ret
	}).(DatabaseMysqlOutput)
}

// A custom administrator account password. Can only be set during creation.
func (o DatabaseMysqlPtrOutput) AdminPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseMysql) *string {
		if v == nil {
			return nil
		}
		return v.AdminPassword
	}).(pulumi.StringPtrOutput)
}

// A custom administrator account username. Can only be set during creation.
func (o DatabaseMysqlPtrOutput) AdminUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseMysql) *string {
		if v == nil {
			return nil
		}
		return v.AdminUsername
	}).(pulumi.StringPtrOutput)
}

// The automated backup schedule (format: HH:MM).
func (o DatabaseMysqlPtrOutput) BackupSchedule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseMysql) *string {
		if v == nil {
			return nil
		}
		return v.BackupSchedule
	}).(pulumi.StringPtrOutput)
}

// A list of CIDR blocks to allow incoming connections from.
func (o DatabaseMysqlPtrOutput) IpFilters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DatabaseMysql) []string {
		if v == nil {
			return nil
		}
		return v.IpFilters
	}).(pulumi.StringArrayOutput)
}

// MySQL configuration settings in JSON format (`exo dbaas type show mysql --settings=mysql` for reference).
func (o DatabaseMysqlPtrOutput) MysqlSettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseMysql) *string {
		if v == nil {
			return nil
		}
		return v.MysqlSettings
	}).(pulumi.StringPtrOutput)
}

// PostgreSQL major version (`exo dbaas type show pg` for reference). Can only be set during creation.
func (o DatabaseMysqlPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseMysql) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

type DatabasePg struct {
	// A custom administrator account password. Can only be set during creation.
	AdminPassword *string `pulumi:"adminPassword"`
	// A custom administrator account username. Can only be set during creation.
	AdminUsername *string `pulumi:"adminUsername"`
	// The automated backup schedule (format: HH:MM).
	BackupSchedule *string `pulumi:"backupSchedule"`
	// A list of CIDR blocks to allow incoming connections from.
	IpFilters []string `pulumi:"ipFilters"`
	// PostgreSQL configuration settings in JSON format (`exo dbaas type show pg --settings=pg` for reference).
	PgSettings        *string `pulumi:"pgSettings"`
	PgbouncerSettings *string `pulumi:"pgbouncerSettings"`
	PglookoutSettings *string `pulumi:"pglookoutSettings"`
	// PostgreSQL major version (`exo dbaas type show pg` for reference). Can only be set during creation.
	Version *string `pulumi:"version"`
}

// DatabasePgInput is an input type that accepts DatabasePgArgs and DatabasePgOutput values.
// You can construct a concrete instance of `DatabasePgInput` via:
//
//          DatabasePgArgs{...}
type DatabasePgInput interface {
	pulumi.Input

	ToDatabasePgOutput() DatabasePgOutput
	ToDatabasePgOutputWithContext(context.Context) DatabasePgOutput
}

type DatabasePgArgs struct {
	// A custom administrator account password. Can only be set during creation.
	AdminPassword pulumi.StringPtrInput `pulumi:"adminPassword"`
	// A custom administrator account username. Can only be set during creation.
	AdminUsername pulumi.StringPtrInput `pulumi:"adminUsername"`
	// The automated backup schedule (format: HH:MM).
	BackupSchedule pulumi.StringPtrInput `pulumi:"backupSchedule"`
	// A list of CIDR blocks to allow incoming connections from.
	IpFilters pulumi.StringArrayInput `pulumi:"ipFilters"`
	// PostgreSQL configuration settings in JSON format (`exo dbaas type show pg --settings=pg` for reference).
	PgSettings        pulumi.StringPtrInput `pulumi:"pgSettings"`
	PgbouncerSettings pulumi.StringPtrInput `pulumi:"pgbouncerSettings"`
	PglookoutSettings pulumi.StringPtrInput `pulumi:"pglookoutSettings"`
	// PostgreSQL major version (`exo dbaas type show pg` for reference). Can only be set during creation.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (DatabasePgArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabasePg)(nil)).Elem()
}

func (i DatabasePgArgs) ToDatabasePgOutput() DatabasePgOutput {
	return i.ToDatabasePgOutputWithContext(context.Background())
}

func (i DatabasePgArgs) ToDatabasePgOutputWithContext(ctx context.Context) DatabasePgOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabasePgOutput)
}

func (i DatabasePgArgs) ToDatabasePgPtrOutput() DatabasePgPtrOutput {
	return i.ToDatabasePgPtrOutputWithContext(context.Background())
}

func (i DatabasePgArgs) ToDatabasePgPtrOutputWithContext(ctx context.Context) DatabasePgPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabasePgOutput).ToDatabasePgPtrOutputWithContext(ctx)
}

// DatabasePgPtrInput is an input type that accepts DatabasePgArgs, DatabasePgPtr and DatabasePgPtrOutput values.
// You can construct a concrete instance of `DatabasePgPtrInput` via:
//
//          DatabasePgArgs{...}
//
//  or:
//
//          nil
type DatabasePgPtrInput interface {
	pulumi.Input

	ToDatabasePgPtrOutput() DatabasePgPtrOutput
	ToDatabasePgPtrOutputWithContext(context.Context) DatabasePgPtrOutput
}

type databasePgPtrType DatabasePgArgs

func DatabasePgPtr(v *DatabasePgArgs) DatabasePgPtrInput {
	return (*databasePgPtrType)(v)
}

func (*databasePgPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabasePg)(nil)).Elem()
}

func (i *databasePgPtrType) ToDatabasePgPtrOutput() DatabasePgPtrOutput {
	return i.ToDatabasePgPtrOutputWithContext(context.Background())
}

func (i *databasePgPtrType) ToDatabasePgPtrOutputWithContext(ctx context.Context) DatabasePgPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabasePgPtrOutput)
}

type DatabasePgOutput struct{ *pulumi.OutputState }

func (DatabasePgOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabasePg)(nil)).Elem()
}

func (o DatabasePgOutput) ToDatabasePgOutput() DatabasePgOutput {
	return o
}

func (o DatabasePgOutput) ToDatabasePgOutputWithContext(ctx context.Context) DatabasePgOutput {
	return o
}

func (o DatabasePgOutput) ToDatabasePgPtrOutput() DatabasePgPtrOutput {
	return o.ToDatabasePgPtrOutputWithContext(context.Background())
}

func (o DatabasePgOutput) ToDatabasePgPtrOutputWithContext(ctx context.Context) DatabasePgPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatabasePg) *DatabasePg {
		return &v
	}).(DatabasePgPtrOutput)
}

// A custom administrator account password. Can only be set during creation.
func (o DatabasePgOutput) AdminPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabasePg) *string { return v.AdminPassword }).(pulumi.StringPtrOutput)
}

// A custom administrator account username. Can only be set during creation.
func (o DatabasePgOutput) AdminUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabasePg) *string { return v.AdminUsername }).(pulumi.StringPtrOutput)
}

// The automated backup schedule (format: HH:MM).
func (o DatabasePgOutput) BackupSchedule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabasePg) *string { return v.BackupSchedule }).(pulumi.StringPtrOutput)
}

// A list of CIDR blocks to allow incoming connections from.
func (o DatabasePgOutput) IpFilters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DatabasePg) []string { return v.IpFilters }).(pulumi.StringArrayOutput)
}

// PostgreSQL configuration settings in JSON format (`exo dbaas type show pg --settings=pg` for reference).
func (o DatabasePgOutput) PgSettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabasePg) *string { return v.PgSettings }).(pulumi.StringPtrOutput)
}

func (o DatabasePgOutput) PgbouncerSettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabasePg) *string { return v.PgbouncerSettings }).(pulumi.StringPtrOutput)
}

func (o DatabasePgOutput) PglookoutSettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabasePg) *string { return v.PglookoutSettings }).(pulumi.StringPtrOutput)
}

// PostgreSQL major version (`exo dbaas type show pg` for reference). Can only be set during creation.
func (o DatabasePgOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabasePg) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type DatabasePgPtrOutput struct{ *pulumi.OutputState }

func (DatabasePgPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabasePg)(nil)).Elem()
}

func (o DatabasePgPtrOutput) ToDatabasePgPtrOutput() DatabasePgPtrOutput {
	return o
}

func (o DatabasePgPtrOutput) ToDatabasePgPtrOutputWithContext(ctx context.Context) DatabasePgPtrOutput {
	return o
}

func (o DatabasePgPtrOutput) Elem() DatabasePgOutput {
	return o.ApplyT(func(v *DatabasePg) DatabasePg {
		if v != nil {
			return *v
		}
		var ret DatabasePg
		return ret
	}).(DatabasePgOutput)
}

// A custom administrator account password. Can only be set during creation.
func (o DatabasePgPtrOutput) AdminPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabasePg) *string {
		if v == nil {
			return nil
		}
		return v.AdminPassword
	}).(pulumi.StringPtrOutput)
}

// A custom administrator account username. Can only be set during creation.
func (o DatabasePgPtrOutput) AdminUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabasePg) *string {
		if v == nil {
			return nil
		}
		return v.AdminUsername
	}).(pulumi.StringPtrOutput)
}

// The automated backup schedule (format: HH:MM).
func (o DatabasePgPtrOutput) BackupSchedule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabasePg) *string {
		if v == nil {
			return nil
		}
		return v.BackupSchedule
	}).(pulumi.StringPtrOutput)
}

// A list of CIDR blocks to allow incoming connections from.
func (o DatabasePgPtrOutput) IpFilters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DatabasePg) []string {
		if v == nil {
			return nil
		}
		return v.IpFilters
	}).(pulumi.StringArrayOutput)
}

// PostgreSQL configuration settings in JSON format (`exo dbaas type show pg --settings=pg` for reference).
func (o DatabasePgPtrOutput) PgSettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabasePg) *string {
		if v == nil {
			return nil
		}
		return v.PgSettings
	}).(pulumi.StringPtrOutput)
}

func (o DatabasePgPtrOutput) PgbouncerSettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabasePg) *string {
		if v == nil {
			return nil
		}
		return v.PgbouncerSettings
	}).(pulumi.StringPtrOutput)
}

func (o DatabasePgPtrOutput) PglookoutSettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabasePg) *string {
		if v == nil {
			return nil
		}
		return v.PglookoutSettings
	}).(pulumi.StringPtrOutput)
}

// PostgreSQL major version (`exo dbaas type show pg` for reference). Can only be set during creation.
func (o DatabasePgPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabasePg) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

type DatabaseRedis struct {
	// A list of CIDR blocks to allow incoming connections from.
	IpFilters []string `pulumi:"ipFilters"`
	// Redis configuration settings in JSON format (`exo dbaas type show redis --settings=redis` for reference).
	RedisSettings *string `pulumi:"redisSettings"`
}

// DatabaseRedisInput is an input type that accepts DatabaseRedisArgs and DatabaseRedisOutput values.
// You can construct a concrete instance of `DatabaseRedisInput` via:
//
//          DatabaseRedisArgs{...}
type DatabaseRedisInput interface {
	pulumi.Input

	ToDatabaseRedisOutput() DatabaseRedisOutput
	ToDatabaseRedisOutputWithContext(context.Context) DatabaseRedisOutput
}

type DatabaseRedisArgs struct {
	// A list of CIDR blocks to allow incoming connections from.
	IpFilters pulumi.StringArrayInput `pulumi:"ipFilters"`
	// Redis configuration settings in JSON format (`exo dbaas type show redis --settings=redis` for reference).
	RedisSettings pulumi.StringPtrInput `pulumi:"redisSettings"`
}

func (DatabaseRedisArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseRedis)(nil)).Elem()
}

func (i DatabaseRedisArgs) ToDatabaseRedisOutput() DatabaseRedisOutput {
	return i.ToDatabaseRedisOutputWithContext(context.Background())
}

func (i DatabaseRedisArgs) ToDatabaseRedisOutputWithContext(ctx context.Context) DatabaseRedisOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseRedisOutput)
}

func (i DatabaseRedisArgs) ToDatabaseRedisPtrOutput() DatabaseRedisPtrOutput {
	return i.ToDatabaseRedisPtrOutputWithContext(context.Background())
}

func (i DatabaseRedisArgs) ToDatabaseRedisPtrOutputWithContext(ctx context.Context) DatabaseRedisPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseRedisOutput).ToDatabaseRedisPtrOutputWithContext(ctx)
}

// DatabaseRedisPtrInput is an input type that accepts DatabaseRedisArgs, DatabaseRedisPtr and DatabaseRedisPtrOutput values.
// You can construct a concrete instance of `DatabaseRedisPtrInput` via:
//
//          DatabaseRedisArgs{...}
//
//  or:
//
//          nil
type DatabaseRedisPtrInput interface {
	pulumi.Input

	ToDatabaseRedisPtrOutput() DatabaseRedisPtrOutput
	ToDatabaseRedisPtrOutputWithContext(context.Context) DatabaseRedisPtrOutput
}

type databaseRedisPtrType DatabaseRedisArgs

func DatabaseRedisPtr(v *DatabaseRedisArgs) DatabaseRedisPtrInput {
	return (*databaseRedisPtrType)(v)
}

func (*databaseRedisPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseRedis)(nil)).Elem()
}

func (i *databaseRedisPtrType) ToDatabaseRedisPtrOutput() DatabaseRedisPtrOutput {
	return i.ToDatabaseRedisPtrOutputWithContext(context.Background())
}

func (i *databaseRedisPtrType) ToDatabaseRedisPtrOutputWithContext(ctx context.Context) DatabaseRedisPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseRedisPtrOutput)
}

type DatabaseRedisOutput struct{ *pulumi.OutputState }

func (DatabaseRedisOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseRedis)(nil)).Elem()
}

func (o DatabaseRedisOutput) ToDatabaseRedisOutput() DatabaseRedisOutput {
	return o
}

func (o DatabaseRedisOutput) ToDatabaseRedisOutputWithContext(ctx context.Context) DatabaseRedisOutput {
	return o
}

func (o DatabaseRedisOutput) ToDatabaseRedisPtrOutput() DatabaseRedisPtrOutput {
	return o.ToDatabaseRedisPtrOutputWithContext(context.Background())
}

func (o DatabaseRedisOutput) ToDatabaseRedisPtrOutputWithContext(ctx context.Context) DatabaseRedisPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatabaseRedis) *DatabaseRedis {
		return &v
	}).(DatabaseRedisPtrOutput)
}

// A list of CIDR blocks to allow incoming connections from.
func (o DatabaseRedisOutput) IpFilters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DatabaseRedis) []string { return v.IpFilters }).(pulumi.StringArrayOutput)
}

// Redis configuration settings in JSON format (`exo dbaas type show redis --settings=redis` for reference).
func (o DatabaseRedisOutput) RedisSettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseRedis) *string { return v.RedisSettings }).(pulumi.StringPtrOutput)
}

type DatabaseRedisPtrOutput struct{ *pulumi.OutputState }

func (DatabaseRedisPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseRedis)(nil)).Elem()
}

func (o DatabaseRedisPtrOutput) ToDatabaseRedisPtrOutput() DatabaseRedisPtrOutput {
	return o
}

func (o DatabaseRedisPtrOutput) ToDatabaseRedisPtrOutputWithContext(ctx context.Context) DatabaseRedisPtrOutput {
	return o
}

func (o DatabaseRedisPtrOutput) Elem() DatabaseRedisOutput {
	return o.ApplyT(func(v *DatabaseRedis) DatabaseRedis {
		if v != nil {
			return *v
		}
		var ret DatabaseRedis
		return ret
	}).(DatabaseRedisOutput)
}

// A list of CIDR blocks to allow incoming connections from.
func (o DatabaseRedisPtrOutput) IpFilters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DatabaseRedis) []string {
		if v == nil {
			return nil
		}
		return v.IpFilters
	}).(pulumi.StringArrayOutput)
}

// Redis configuration settings in JSON format (`exo dbaas type show redis --settings=redis` for reference).
func (o DatabaseRedisPtrOutput) RedisSettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseRedis) *string {
		if v == nil {
			return nil
		}
		return v.RedisSettings
	}).(pulumi.StringPtrOutput)
}

type ElasticIPHealthcheck struct {
	// The health checking interval in seconds (must be between `5` and `300`; default: `10`).
	Interval *int `pulumi:"interval"`
	// The health checking mode (` supported values:  `tcp` ,  `http` ,  `https`).
	Mode string `pulumi:"mode"`
	// The health checking port (must be between `1` and `65535`).
	Port int `pulumi:"port"`
	// The number of failed attempts before considering a managed Elastic IP target unhealthy (must be between `1` and `20`).
	StrikesFail *int `pulumi:"strikesFail"`
	// The number of successful attempts before considering a managed Elastic IP target healthy (must be between `1` and `20`).
	StrikesOk *int `pulumi:"strikesOk"`
	// The time in seconds before considering a healthcheck probing failed (must be between `2` and `60`; default: `3`).
	Timeout *int `pulumi:"timeout"`
	// Disable TLS certificate verification for health checking in `https` mode.
	TlsSkipVerify *bool `pulumi:"tlsSkipVerify"`
	// The health checking server name to present with SNI in `https` mode.
	TlsSni *string `pulumi:"tlsSni"`
	// The health checking URI (required in `http(s)` modes).
	Uri *string `pulumi:"uri"`
}

// ElasticIPHealthcheckInput is an input type that accepts ElasticIPHealthcheckArgs and ElasticIPHealthcheckOutput values.
// You can construct a concrete instance of `ElasticIPHealthcheckInput` via:
//
//          ElasticIPHealthcheckArgs{...}
type ElasticIPHealthcheckInput interface {
	pulumi.Input

	ToElasticIPHealthcheckOutput() ElasticIPHealthcheckOutput
	ToElasticIPHealthcheckOutputWithContext(context.Context) ElasticIPHealthcheckOutput
}

type ElasticIPHealthcheckArgs struct {
	// The health checking interval in seconds (must be between `5` and `300`; default: `10`).
	Interval pulumi.IntPtrInput `pulumi:"interval"`
	// The health checking mode (` supported values:  `tcp` ,  `http` ,  `https`).
	Mode pulumi.StringInput `pulumi:"mode"`
	// The health checking port (must be between `1` and `65535`).
	Port pulumi.IntInput `pulumi:"port"`
	// The number of failed attempts before considering a managed Elastic IP target unhealthy (must be between `1` and `20`).
	StrikesFail pulumi.IntPtrInput `pulumi:"strikesFail"`
	// The number of successful attempts before considering a managed Elastic IP target healthy (must be between `1` and `20`).
	StrikesOk pulumi.IntPtrInput `pulumi:"strikesOk"`
	// The time in seconds before considering a healthcheck probing failed (must be between `2` and `60`; default: `3`).
	Timeout pulumi.IntPtrInput `pulumi:"timeout"`
	// Disable TLS certificate verification for health checking in `https` mode.
	TlsSkipVerify pulumi.BoolPtrInput `pulumi:"tlsSkipVerify"`
	// The health checking server name to present with SNI in `https` mode.
	TlsSni pulumi.StringPtrInput `pulumi:"tlsSni"`
	// The health checking URI (required in `http(s)` modes).
	Uri pulumi.StringPtrInput `pulumi:"uri"`
}

func (ElasticIPHealthcheckArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticIPHealthcheck)(nil)).Elem()
}

func (i ElasticIPHealthcheckArgs) ToElasticIPHealthcheckOutput() ElasticIPHealthcheckOutput {
	return i.ToElasticIPHealthcheckOutputWithContext(context.Background())
}

func (i ElasticIPHealthcheckArgs) ToElasticIPHealthcheckOutputWithContext(ctx context.Context) ElasticIPHealthcheckOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticIPHealthcheckOutput)
}

func (i ElasticIPHealthcheckArgs) ToElasticIPHealthcheckPtrOutput() ElasticIPHealthcheckPtrOutput {
	return i.ToElasticIPHealthcheckPtrOutputWithContext(context.Background())
}

func (i ElasticIPHealthcheckArgs) ToElasticIPHealthcheckPtrOutputWithContext(ctx context.Context) ElasticIPHealthcheckPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticIPHealthcheckOutput).ToElasticIPHealthcheckPtrOutputWithContext(ctx)
}

// ElasticIPHealthcheckPtrInput is an input type that accepts ElasticIPHealthcheckArgs, ElasticIPHealthcheckPtr and ElasticIPHealthcheckPtrOutput values.
// You can construct a concrete instance of `ElasticIPHealthcheckPtrInput` via:
//
//          ElasticIPHealthcheckArgs{...}
//
//  or:
//
//          nil
type ElasticIPHealthcheckPtrInput interface {
	pulumi.Input

	ToElasticIPHealthcheckPtrOutput() ElasticIPHealthcheckPtrOutput
	ToElasticIPHealthcheckPtrOutputWithContext(context.Context) ElasticIPHealthcheckPtrOutput
}

type elasticIPHealthcheckPtrType ElasticIPHealthcheckArgs

func ElasticIPHealthcheckPtr(v *ElasticIPHealthcheckArgs) ElasticIPHealthcheckPtrInput {
	return (*elasticIPHealthcheckPtrType)(v)
}

func (*elasticIPHealthcheckPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticIPHealthcheck)(nil)).Elem()
}

func (i *elasticIPHealthcheckPtrType) ToElasticIPHealthcheckPtrOutput() ElasticIPHealthcheckPtrOutput {
	return i.ToElasticIPHealthcheckPtrOutputWithContext(context.Background())
}

func (i *elasticIPHealthcheckPtrType) ToElasticIPHealthcheckPtrOutputWithContext(ctx context.Context) ElasticIPHealthcheckPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticIPHealthcheckPtrOutput)
}

type ElasticIPHealthcheckOutput struct{ *pulumi.OutputState }

func (ElasticIPHealthcheckOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticIPHealthcheck)(nil)).Elem()
}

func (o ElasticIPHealthcheckOutput) ToElasticIPHealthcheckOutput() ElasticIPHealthcheckOutput {
	return o
}

func (o ElasticIPHealthcheckOutput) ToElasticIPHealthcheckOutputWithContext(ctx context.Context) ElasticIPHealthcheckOutput {
	return o
}

func (o ElasticIPHealthcheckOutput) ToElasticIPHealthcheckPtrOutput() ElasticIPHealthcheckPtrOutput {
	return o.ToElasticIPHealthcheckPtrOutputWithContext(context.Background())
}

func (o ElasticIPHealthcheckOutput) ToElasticIPHealthcheckPtrOutputWithContext(ctx context.Context) ElasticIPHealthcheckPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticIPHealthcheck) *ElasticIPHealthcheck {
		return &v
	}).(ElasticIPHealthcheckPtrOutput)
}

// The health checking interval in seconds (must be between `5` and `300`; default: `10`).
func (o ElasticIPHealthcheckOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ElasticIPHealthcheck) *int { return v.Interval }).(pulumi.IntPtrOutput)
}

// The health checking mode (` supported values:  `tcp` ,  `http` ,  `https`).
func (o ElasticIPHealthcheckOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v ElasticIPHealthcheck) string { return v.Mode }).(pulumi.StringOutput)
}

// The health checking port (must be between `1` and `65535`).
func (o ElasticIPHealthcheckOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v ElasticIPHealthcheck) int { return v.Port }).(pulumi.IntOutput)
}

// The number of failed attempts before considering a managed Elastic IP target unhealthy (must be between `1` and `20`).
func (o ElasticIPHealthcheckOutput) StrikesFail() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ElasticIPHealthcheck) *int { return v.StrikesFail }).(pulumi.IntPtrOutput)
}

// The number of successful attempts before considering a managed Elastic IP target healthy (must be between `1` and `20`).
func (o ElasticIPHealthcheckOutput) StrikesOk() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ElasticIPHealthcheck) *int { return v.StrikesOk }).(pulumi.IntPtrOutput)
}

// The time in seconds before considering a healthcheck probing failed (must be between `2` and `60`; default: `3`).
func (o ElasticIPHealthcheckOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ElasticIPHealthcheck) *int { return v.Timeout }).(pulumi.IntPtrOutput)
}

// Disable TLS certificate verification for health checking in `https` mode.
func (o ElasticIPHealthcheckOutput) TlsSkipVerify() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ElasticIPHealthcheck) *bool { return v.TlsSkipVerify }).(pulumi.BoolPtrOutput)
}

// The health checking server name to present with SNI in `https` mode.
func (o ElasticIPHealthcheckOutput) TlsSni() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticIPHealthcheck) *string { return v.TlsSni }).(pulumi.StringPtrOutput)
}

// The health checking URI (required in `http(s)` modes).
func (o ElasticIPHealthcheckOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticIPHealthcheck) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

type ElasticIPHealthcheckPtrOutput struct{ *pulumi.OutputState }

func (ElasticIPHealthcheckPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticIPHealthcheck)(nil)).Elem()
}

func (o ElasticIPHealthcheckPtrOutput) ToElasticIPHealthcheckPtrOutput() ElasticIPHealthcheckPtrOutput {
	return o
}

func (o ElasticIPHealthcheckPtrOutput) ToElasticIPHealthcheckPtrOutputWithContext(ctx context.Context) ElasticIPHealthcheckPtrOutput {
	return o
}

func (o ElasticIPHealthcheckPtrOutput) Elem() ElasticIPHealthcheckOutput {
	return o.ApplyT(func(v *ElasticIPHealthcheck) ElasticIPHealthcheck {
		if v != nil {
			return *v
		}
		var ret ElasticIPHealthcheck
		return ret
	}).(ElasticIPHealthcheckOutput)
}

// The health checking interval in seconds (must be between `5` and `300`; default: `10`).
func (o ElasticIPHealthcheckPtrOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ElasticIPHealthcheck) *int {
		if v == nil {
			return nil
		}
		return v.Interval
	}).(pulumi.IntPtrOutput)
}

// The health checking mode (` supported values:  `tcp` ,  `http` ,  `https`).
func (o ElasticIPHealthcheckPtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticIPHealthcheck) *string {
		if v == nil {
			return nil
		}
		return &v.Mode
	}).(pulumi.StringPtrOutput)
}

// The health checking port (must be between `1` and `65535`).
func (o ElasticIPHealthcheckPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ElasticIPHealthcheck) *int {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.IntPtrOutput)
}

// The number of failed attempts before considering a managed Elastic IP target unhealthy (must be between `1` and `20`).
func (o ElasticIPHealthcheckPtrOutput) StrikesFail() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ElasticIPHealthcheck) *int {
		if v == nil {
			return nil
		}
		return v.StrikesFail
	}).(pulumi.IntPtrOutput)
}

// The number of successful attempts before considering a managed Elastic IP target healthy (must be between `1` and `20`).
func (o ElasticIPHealthcheckPtrOutput) StrikesOk() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ElasticIPHealthcheck) *int {
		if v == nil {
			return nil
		}
		return v.StrikesOk
	}).(pulumi.IntPtrOutput)
}

// The time in seconds before considering a healthcheck probing failed (must be between `2` and `60`; default: `3`).
func (o ElasticIPHealthcheckPtrOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ElasticIPHealthcheck) *int {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.IntPtrOutput)
}

// Disable TLS certificate verification for health checking in `https` mode.
func (o ElasticIPHealthcheckPtrOutput) TlsSkipVerify() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ElasticIPHealthcheck) *bool {
		if v == nil {
			return nil
		}
		return v.TlsSkipVerify
	}).(pulumi.BoolPtrOutput)
}

// The health checking server name to present with SNI in `https` mode.
func (o ElasticIPHealthcheckPtrOutput) TlsSni() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticIPHealthcheck) *string {
		if v == nil {
			return nil
		}
		return v.TlsSni
	}).(pulumi.StringPtrOutput)
}

// The health checking URI (required in `http(s)` modes).
func (o ElasticIPHealthcheckPtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticIPHealthcheck) *string {
		if v == nil {
			return nil
		}
		return v.Uri
	}).(pulumi.StringPtrOutput)
}

type NLBServiceHealthcheck struct {
	// The healthcheck interval in seconds.
	Interval *int `pulumi:"interval"`
	// The healthcheck mode (`tcp`|`http`|`https`).
	Mode *string `pulumi:"mode"`
	// The healthcheck port.
	Port int `pulumi:"port"`
	// The healthcheck retries.
	Retries *int `pulumi:"retries"`
	// The healthcheck timeout in seconds.
	Timeout *int `pulumi:"timeout"`
	// The healthcheck TLS SNI server name, only if `mode` is `https`.
	TlsSni *string `pulumi:"tlsSni"`
	// The healthcheck URI, must be set only if `mode` is `http(s)`.
	Uri *string `pulumi:"uri"`
}

// NLBServiceHealthcheckInput is an input type that accepts NLBServiceHealthcheckArgs and NLBServiceHealthcheckOutput values.
// You can construct a concrete instance of `NLBServiceHealthcheckInput` via:
//
//          NLBServiceHealthcheckArgs{...}
type NLBServiceHealthcheckInput interface {
	pulumi.Input

	ToNLBServiceHealthcheckOutput() NLBServiceHealthcheckOutput
	ToNLBServiceHealthcheckOutputWithContext(context.Context) NLBServiceHealthcheckOutput
}

type NLBServiceHealthcheckArgs struct {
	// The healthcheck interval in seconds.
	Interval pulumi.IntPtrInput `pulumi:"interval"`
	// The healthcheck mode (`tcp`|`http`|`https`).
	Mode pulumi.StringPtrInput `pulumi:"mode"`
	// The healthcheck port.
	Port pulumi.IntInput `pulumi:"port"`
	// The healthcheck retries.
	Retries pulumi.IntPtrInput `pulumi:"retries"`
	// The healthcheck timeout in seconds.
	Timeout pulumi.IntPtrInput `pulumi:"timeout"`
	// The healthcheck TLS SNI server name, only if `mode` is `https`.
	TlsSni pulumi.StringPtrInput `pulumi:"tlsSni"`
	// The healthcheck URI, must be set only if `mode` is `http(s)`.
	Uri pulumi.StringPtrInput `pulumi:"uri"`
}

func (NLBServiceHealthcheckArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NLBServiceHealthcheck)(nil)).Elem()
}

func (i NLBServiceHealthcheckArgs) ToNLBServiceHealthcheckOutput() NLBServiceHealthcheckOutput {
	return i.ToNLBServiceHealthcheckOutputWithContext(context.Background())
}

func (i NLBServiceHealthcheckArgs) ToNLBServiceHealthcheckOutputWithContext(ctx context.Context) NLBServiceHealthcheckOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NLBServiceHealthcheckOutput)
}

// NLBServiceHealthcheckArrayInput is an input type that accepts NLBServiceHealthcheckArray and NLBServiceHealthcheckArrayOutput values.
// You can construct a concrete instance of `NLBServiceHealthcheckArrayInput` via:
//
//          NLBServiceHealthcheckArray{ NLBServiceHealthcheckArgs{...} }
type NLBServiceHealthcheckArrayInput interface {
	pulumi.Input

	ToNLBServiceHealthcheckArrayOutput() NLBServiceHealthcheckArrayOutput
	ToNLBServiceHealthcheckArrayOutputWithContext(context.Context) NLBServiceHealthcheckArrayOutput
}

type NLBServiceHealthcheckArray []NLBServiceHealthcheckInput

func (NLBServiceHealthcheckArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NLBServiceHealthcheck)(nil)).Elem()
}

func (i NLBServiceHealthcheckArray) ToNLBServiceHealthcheckArrayOutput() NLBServiceHealthcheckArrayOutput {
	return i.ToNLBServiceHealthcheckArrayOutputWithContext(context.Background())
}

func (i NLBServiceHealthcheckArray) ToNLBServiceHealthcheckArrayOutputWithContext(ctx context.Context) NLBServiceHealthcheckArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NLBServiceHealthcheckArrayOutput)
}

type NLBServiceHealthcheckOutput struct{ *pulumi.OutputState }

func (NLBServiceHealthcheckOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NLBServiceHealthcheck)(nil)).Elem()
}

func (o NLBServiceHealthcheckOutput) ToNLBServiceHealthcheckOutput() NLBServiceHealthcheckOutput {
	return o
}

func (o NLBServiceHealthcheckOutput) ToNLBServiceHealthcheckOutputWithContext(ctx context.Context) NLBServiceHealthcheckOutput {
	return o
}

// The healthcheck interval in seconds.
func (o NLBServiceHealthcheckOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NLBServiceHealthcheck) *int { return v.Interval }).(pulumi.IntPtrOutput)
}

// The healthcheck mode (`tcp`|`http`|`https`).
func (o NLBServiceHealthcheckOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NLBServiceHealthcheck) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// The healthcheck port.
func (o NLBServiceHealthcheckOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v NLBServiceHealthcheck) int { return v.Port }).(pulumi.IntOutput)
}

// The healthcheck retries.
func (o NLBServiceHealthcheckOutput) Retries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NLBServiceHealthcheck) *int { return v.Retries }).(pulumi.IntPtrOutput)
}

// The healthcheck timeout in seconds.
func (o NLBServiceHealthcheckOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NLBServiceHealthcheck) *int { return v.Timeout }).(pulumi.IntPtrOutput)
}

// The healthcheck TLS SNI server name, only if `mode` is `https`.
func (o NLBServiceHealthcheckOutput) TlsSni() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NLBServiceHealthcheck) *string { return v.TlsSni }).(pulumi.StringPtrOutput)
}

// The healthcheck URI, must be set only if `mode` is `http(s)`.
func (o NLBServiceHealthcheckOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NLBServiceHealthcheck) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

type NLBServiceHealthcheckArrayOutput struct{ *pulumi.OutputState }

func (NLBServiceHealthcheckArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NLBServiceHealthcheck)(nil)).Elem()
}

func (o NLBServiceHealthcheckArrayOutput) ToNLBServiceHealthcheckArrayOutput() NLBServiceHealthcheckArrayOutput {
	return o
}

func (o NLBServiceHealthcheckArrayOutput) ToNLBServiceHealthcheckArrayOutputWithContext(ctx context.Context) NLBServiceHealthcheckArrayOutput {
	return o
}

func (o NLBServiceHealthcheckArrayOutput) Index(i pulumi.IntInput) NLBServiceHealthcheckOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NLBServiceHealthcheck {
		return vs[0].([]NLBServiceHealthcheck)[vs[1].(int)]
	}).(NLBServiceHealthcheckOutput)
}

type SKSClusterOidc struct {
	// The OpenID client ID.
	ClientId string `pulumi:"clientId"`
	// An OpenID JWT claim to use as the user's group.
	GroupsClaim *string `pulumi:"groupsClaim"`
	// An OpenID prefix prepended to group claims.
	GroupsPrefix *string `pulumi:"groupsPrefix"`
	// The OpenID provider URL.
	IssuerUrl string `pulumi:"issuerUrl"`
	// A map of key/value pairs that describes a required claim in the OpenID Token.
	RequiredClaim map[string]string `pulumi:"requiredClaim"`
	// An OpenID JWT claim to use as the user name.
	UsernameClaim *string `pulumi:"usernameClaim"`
	// An OpenID prefix prepended to username claims.
	UsernamePrefix *string `pulumi:"usernamePrefix"`
}

// SKSClusterOidcInput is an input type that accepts SKSClusterOidcArgs and SKSClusterOidcOutput values.
// You can construct a concrete instance of `SKSClusterOidcInput` via:
//
//          SKSClusterOidcArgs{...}
type SKSClusterOidcInput interface {
	pulumi.Input

	ToSKSClusterOidcOutput() SKSClusterOidcOutput
	ToSKSClusterOidcOutputWithContext(context.Context) SKSClusterOidcOutput
}

type SKSClusterOidcArgs struct {
	// The OpenID client ID.
	ClientId pulumi.StringInput `pulumi:"clientId"`
	// An OpenID JWT claim to use as the user's group.
	GroupsClaim pulumi.StringPtrInput `pulumi:"groupsClaim"`
	// An OpenID prefix prepended to group claims.
	GroupsPrefix pulumi.StringPtrInput `pulumi:"groupsPrefix"`
	// The OpenID provider URL.
	IssuerUrl pulumi.StringInput `pulumi:"issuerUrl"`
	// A map of key/value pairs that describes a required claim in the OpenID Token.
	RequiredClaim pulumi.StringMapInput `pulumi:"requiredClaim"`
	// An OpenID JWT claim to use as the user name.
	UsernameClaim pulumi.StringPtrInput `pulumi:"usernameClaim"`
	// An OpenID prefix prepended to username claims.
	UsernamePrefix pulumi.StringPtrInput `pulumi:"usernamePrefix"`
}

func (SKSClusterOidcArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SKSClusterOidc)(nil)).Elem()
}

func (i SKSClusterOidcArgs) ToSKSClusterOidcOutput() SKSClusterOidcOutput {
	return i.ToSKSClusterOidcOutputWithContext(context.Background())
}

func (i SKSClusterOidcArgs) ToSKSClusterOidcOutputWithContext(ctx context.Context) SKSClusterOidcOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SKSClusterOidcOutput)
}

func (i SKSClusterOidcArgs) ToSKSClusterOidcPtrOutput() SKSClusterOidcPtrOutput {
	return i.ToSKSClusterOidcPtrOutputWithContext(context.Background())
}

func (i SKSClusterOidcArgs) ToSKSClusterOidcPtrOutputWithContext(ctx context.Context) SKSClusterOidcPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SKSClusterOidcOutput).ToSKSClusterOidcPtrOutputWithContext(ctx)
}

// SKSClusterOidcPtrInput is an input type that accepts SKSClusterOidcArgs, SKSClusterOidcPtr and SKSClusterOidcPtrOutput values.
// You can construct a concrete instance of `SKSClusterOidcPtrInput` via:
//
//          SKSClusterOidcArgs{...}
//
//  or:
//
//          nil
type SKSClusterOidcPtrInput interface {
	pulumi.Input

	ToSKSClusterOidcPtrOutput() SKSClusterOidcPtrOutput
	ToSKSClusterOidcPtrOutputWithContext(context.Context) SKSClusterOidcPtrOutput
}

type sksclusterOidcPtrType SKSClusterOidcArgs

func SKSClusterOidcPtr(v *SKSClusterOidcArgs) SKSClusterOidcPtrInput {
	return (*sksclusterOidcPtrType)(v)
}

func (*sksclusterOidcPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SKSClusterOidc)(nil)).Elem()
}

func (i *sksclusterOidcPtrType) ToSKSClusterOidcPtrOutput() SKSClusterOidcPtrOutput {
	return i.ToSKSClusterOidcPtrOutputWithContext(context.Background())
}

func (i *sksclusterOidcPtrType) ToSKSClusterOidcPtrOutputWithContext(ctx context.Context) SKSClusterOidcPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SKSClusterOidcPtrOutput)
}

type SKSClusterOidcOutput struct{ *pulumi.OutputState }

func (SKSClusterOidcOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SKSClusterOidc)(nil)).Elem()
}

func (o SKSClusterOidcOutput) ToSKSClusterOidcOutput() SKSClusterOidcOutput {
	return o
}

func (o SKSClusterOidcOutput) ToSKSClusterOidcOutputWithContext(ctx context.Context) SKSClusterOidcOutput {
	return o
}

func (o SKSClusterOidcOutput) ToSKSClusterOidcPtrOutput() SKSClusterOidcPtrOutput {
	return o.ToSKSClusterOidcPtrOutputWithContext(context.Background())
}

func (o SKSClusterOidcOutput) ToSKSClusterOidcPtrOutputWithContext(ctx context.Context) SKSClusterOidcPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SKSClusterOidc) *SKSClusterOidc {
		return &v
	}).(SKSClusterOidcPtrOutput)
}

// The OpenID client ID.
func (o SKSClusterOidcOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v SKSClusterOidc) string { return v.ClientId }).(pulumi.StringOutput)
}

// An OpenID JWT claim to use as the user's group.
func (o SKSClusterOidcOutput) GroupsClaim() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SKSClusterOidc) *string { return v.GroupsClaim }).(pulumi.StringPtrOutput)
}

// An OpenID prefix prepended to group claims.
func (o SKSClusterOidcOutput) GroupsPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SKSClusterOidc) *string { return v.GroupsPrefix }).(pulumi.StringPtrOutput)
}

// The OpenID provider URL.
func (o SKSClusterOidcOutput) IssuerUrl() pulumi.StringOutput {
	return o.ApplyT(func(v SKSClusterOidc) string { return v.IssuerUrl }).(pulumi.StringOutput)
}

// A map of key/value pairs that describes a required claim in the OpenID Token.
func (o SKSClusterOidcOutput) RequiredClaim() pulumi.StringMapOutput {
	return o.ApplyT(func(v SKSClusterOidc) map[string]string { return v.RequiredClaim }).(pulumi.StringMapOutput)
}

// An OpenID JWT claim to use as the user name.
func (o SKSClusterOidcOutput) UsernameClaim() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SKSClusterOidc) *string { return v.UsernameClaim }).(pulumi.StringPtrOutput)
}

// An OpenID prefix prepended to username claims.
func (o SKSClusterOidcOutput) UsernamePrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SKSClusterOidc) *string { return v.UsernamePrefix }).(pulumi.StringPtrOutput)
}

type SKSClusterOidcPtrOutput struct{ *pulumi.OutputState }

func (SKSClusterOidcPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SKSClusterOidc)(nil)).Elem()
}

func (o SKSClusterOidcPtrOutput) ToSKSClusterOidcPtrOutput() SKSClusterOidcPtrOutput {
	return o
}

func (o SKSClusterOidcPtrOutput) ToSKSClusterOidcPtrOutputWithContext(ctx context.Context) SKSClusterOidcPtrOutput {
	return o
}

func (o SKSClusterOidcPtrOutput) Elem() SKSClusterOidcOutput {
	return o.ApplyT(func(v *SKSClusterOidc) SKSClusterOidc {
		if v != nil {
			return *v
		}
		var ret SKSClusterOidc
		return ret
	}).(SKSClusterOidcOutput)
}

// The OpenID client ID.
func (o SKSClusterOidcPtrOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SKSClusterOidc) *string {
		if v == nil {
			return nil
		}
		return &v.ClientId
	}).(pulumi.StringPtrOutput)
}

// An OpenID JWT claim to use as the user's group.
func (o SKSClusterOidcPtrOutput) GroupsClaim() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SKSClusterOidc) *string {
		if v == nil {
			return nil
		}
		return v.GroupsClaim
	}).(pulumi.StringPtrOutput)
}

// An OpenID prefix prepended to group claims.
func (o SKSClusterOidcPtrOutput) GroupsPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SKSClusterOidc) *string {
		if v == nil {
			return nil
		}
		return v.GroupsPrefix
	}).(pulumi.StringPtrOutput)
}

// The OpenID provider URL.
func (o SKSClusterOidcPtrOutput) IssuerUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SKSClusterOidc) *string {
		if v == nil {
			return nil
		}
		return &v.IssuerUrl
	}).(pulumi.StringPtrOutput)
}

// A map of key/value pairs that describes a required claim in the OpenID Token.
func (o SKSClusterOidcPtrOutput) RequiredClaim() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SKSClusterOidc) map[string]string {
		if v == nil {
			return nil
		}
		return v.RequiredClaim
	}).(pulumi.StringMapOutput)
}

// An OpenID JWT claim to use as the user name.
func (o SKSClusterOidcPtrOutput) UsernameClaim() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SKSClusterOidc) *string {
		if v == nil {
			return nil
		}
		return v.UsernameClaim
	}).(pulumi.StringPtrOutput)
}

// An OpenID prefix prepended to username claims.
func (o SKSClusterOidcPtrOutput) UsernamePrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SKSClusterOidc) *string {
		if v == nil {
			return nil
		}
		return v.UsernamePrefix
	}).(pulumi.StringPtrOutput)
}

type SecurityGroupRulesEgress struct {
	// A list of source (for ingress)/destination (for egress) IP subnet (in [CIDR notation][cidr]) to match.
	CidrLists []string `pulumi:"cidrLists"`
	// A free-form text describing the Security Group rule purpose.
	Description *string  `pulumi:"description"`
	IcmpCode    *int     `pulumi:"icmpCode"`
	IcmpType    *int     `pulumi:"icmpType"`
	Ids         []string `pulumi:"ids"`
	// A list of ports or port ranges (`start_port-end_port`).
	// * `icmpType`/`icmpCode` - An ICMP/ICMPv6 [type/code][icmp] to match.
	Ports []string `pulumi:"ports"`
	// The network protocol to match. Supported values are: `TCP`, `UDP`, `ICMP`, `ICMPv6`, `AH`, `ESP`, `GRE`, `IPIP` and `ALL`.
	Protocol *string `pulumi:"protocol"`
	// A source (for ingress)/destination (for egress) of the traffic identified by a Security Group.
	UserSecurityGroupLists []string `pulumi:"userSecurityGroupLists"`
}

// SecurityGroupRulesEgressInput is an input type that accepts SecurityGroupRulesEgressArgs and SecurityGroupRulesEgressOutput values.
// You can construct a concrete instance of `SecurityGroupRulesEgressInput` via:
//
//          SecurityGroupRulesEgressArgs{...}
type SecurityGroupRulesEgressInput interface {
	pulumi.Input

	ToSecurityGroupRulesEgressOutput() SecurityGroupRulesEgressOutput
	ToSecurityGroupRulesEgressOutputWithContext(context.Context) SecurityGroupRulesEgressOutput
}

type SecurityGroupRulesEgressArgs struct {
	// A list of source (for ingress)/destination (for egress) IP subnet (in [CIDR notation][cidr]) to match.
	CidrLists pulumi.StringArrayInput `pulumi:"cidrLists"`
	// A free-form text describing the Security Group rule purpose.
	Description pulumi.StringPtrInput   `pulumi:"description"`
	IcmpCode    pulumi.IntPtrInput      `pulumi:"icmpCode"`
	IcmpType    pulumi.IntPtrInput      `pulumi:"icmpType"`
	Ids         pulumi.StringArrayInput `pulumi:"ids"`
	// A list of ports or port ranges (`start_port-end_port`).
	// * `icmpType`/`icmpCode` - An ICMP/ICMPv6 [type/code][icmp] to match.
	Ports pulumi.StringArrayInput `pulumi:"ports"`
	// The network protocol to match. Supported values are: `TCP`, `UDP`, `ICMP`, `ICMPv6`, `AH`, `ESP`, `GRE`, `IPIP` and `ALL`.
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
	// A source (for ingress)/destination (for egress) of the traffic identified by a Security Group.
	UserSecurityGroupLists pulumi.StringArrayInput `pulumi:"userSecurityGroupLists"`
}

func (SecurityGroupRulesEgressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityGroupRulesEgress)(nil)).Elem()
}

func (i SecurityGroupRulesEgressArgs) ToSecurityGroupRulesEgressOutput() SecurityGroupRulesEgressOutput {
	return i.ToSecurityGroupRulesEgressOutputWithContext(context.Background())
}

func (i SecurityGroupRulesEgressArgs) ToSecurityGroupRulesEgressOutputWithContext(ctx context.Context) SecurityGroupRulesEgressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityGroupRulesEgressOutput)
}

// SecurityGroupRulesEgressArrayInput is an input type that accepts SecurityGroupRulesEgressArray and SecurityGroupRulesEgressArrayOutput values.
// You can construct a concrete instance of `SecurityGroupRulesEgressArrayInput` via:
//
//          SecurityGroupRulesEgressArray{ SecurityGroupRulesEgressArgs{...} }
type SecurityGroupRulesEgressArrayInput interface {
	pulumi.Input

	ToSecurityGroupRulesEgressArrayOutput() SecurityGroupRulesEgressArrayOutput
	ToSecurityGroupRulesEgressArrayOutputWithContext(context.Context) SecurityGroupRulesEgressArrayOutput
}

type SecurityGroupRulesEgressArray []SecurityGroupRulesEgressInput

func (SecurityGroupRulesEgressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecurityGroupRulesEgress)(nil)).Elem()
}

func (i SecurityGroupRulesEgressArray) ToSecurityGroupRulesEgressArrayOutput() SecurityGroupRulesEgressArrayOutput {
	return i.ToSecurityGroupRulesEgressArrayOutputWithContext(context.Background())
}

func (i SecurityGroupRulesEgressArray) ToSecurityGroupRulesEgressArrayOutputWithContext(ctx context.Context) SecurityGroupRulesEgressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityGroupRulesEgressArrayOutput)
}

type SecurityGroupRulesEgressOutput struct{ *pulumi.OutputState }

func (SecurityGroupRulesEgressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityGroupRulesEgress)(nil)).Elem()
}

func (o SecurityGroupRulesEgressOutput) ToSecurityGroupRulesEgressOutput() SecurityGroupRulesEgressOutput {
	return o
}

func (o SecurityGroupRulesEgressOutput) ToSecurityGroupRulesEgressOutputWithContext(ctx context.Context) SecurityGroupRulesEgressOutput {
	return o
}

// A list of source (for ingress)/destination (for egress) IP subnet (in [CIDR notation][cidr]) to match.
func (o SecurityGroupRulesEgressOutput) CidrLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SecurityGroupRulesEgress) []string { return v.CidrLists }).(pulumi.StringArrayOutput)
}

// A free-form text describing the Security Group rule purpose.
func (o SecurityGroupRulesEgressOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurityGroupRulesEgress) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o SecurityGroupRulesEgressOutput) IcmpCode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecurityGroupRulesEgress) *int { return v.IcmpCode }).(pulumi.IntPtrOutput)
}

func (o SecurityGroupRulesEgressOutput) IcmpType() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecurityGroupRulesEgress) *int { return v.IcmpType }).(pulumi.IntPtrOutput)
}

func (o SecurityGroupRulesEgressOutput) Ids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SecurityGroupRulesEgress) []string { return v.Ids }).(pulumi.StringArrayOutput)
}

// A list of ports or port ranges (`start_port-end_port`).
// * `icmpType`/`icmpCode` - An ICMP/ICMPv6 [type/code][icmp] to match.
func (o SecurityGroupRulesEgressOutput) Ports() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SecurityGroupRulesEgress) []string { return v.Ports }).(pulumi.StringArrayOutput)
}

// The network protocol to match. Supported values are: `TCP`, `UDP`, `ICMP`, `ICMPv6`, `AH`, `ESP`, `GRE`, `IPIP` and `ALL`.
func (o SecurityGroupRulesEgressOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurityGroupRulesEgress) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

// A source (for ingress)/destination (for egress) of the traffic identified by a Security Group.
func (o SecurityGroupRulesEgressOutput) UserSecurityGroupLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SecurityGroupRulesEgress) []string { return v.UserSecurityGroupLists }).(pulumi.StringArrayOutput)
}

type SecurityGroupRulesEgressArrayOutput struct{ *pulumi.OutputState }

func (SecurityGroupRulesEgressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecurityGroupRulesEgress)(nil)).Elem()
}

func (o SecurityGroupRulesEgressArrayOutput) ToSecurityGroupRulesEgressArrayOutput() SecurityGroupRulesEgressArrayOutput {
	return o
}

func (o SecurityGroupRulesEgressArrayOutput) ToSecurityGroupRulesEgressArrayOutputWithContext(ctx context.Context) SecurityGroupRulesEgressArrayOutput {
	return o
}

func (o SecurityGroupRulesEgressArrayOutput) Index(i pulumi.IntInput) SecurityGroupRulesEgressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SecurityGroupRulesEgress {
		return vs[0].([]SecurityGroupRulesEgress)[vs[1].(int)]
	}).(SecurityGroupRulesEgressOutput)
}

type SecurityGroupRulesIngress struct {
	// A list of source (for ingress)/destination (for egress) IP subnet (in [CIDR notation][cidr]) to match.
	CidrLists []string `pulumi:"cidrLists"`
	// A free-form text describing the Security Group rule purpose.
	Description *string  `pulumi:"description"`
	IcmpCode    *int     `pulumi:"icmpCode"`
	IcmpType    *int     `pulumi:"icmpType"`
	Ids         []string `pulumi:"ids"`
	// A list of ports or port ranges (`start_port-end_port`).
	// * `icmpType`/`icmpCode` - An ICMP/ICMPv6 [type/code][icmp] to match.
	Ports []string `pulumi:"ports"`
	// The network protocol to match. Supported values are: `TCP`, `UDP`, `ICMP`, `ICMPv6`, `AH`, `ESP`, `GRE`, `IPIP` and `ALL`.
	Protocol *string `pulumi:"protocol"`
	// A source (for ingress)/destination (for egress) of the traffic identified by a Security Group.
	UserSecurityGroupLists []string `pulumi:"userSecurityGroupLists"`
}

// SecurityGroupRulesIngressInput is an input type that accepts SecurityGroupRulesIngressArgs and SecurityGroupRulesIngressOutput values.
// You can construct a concrete instance of `SecurityGroupRulesIngressInput` via:
//
//          SecurityGroupRulesIngressArgs{...}
type SecurityGroupRulesIngressInput interface {
	pulumi.Input

	ToSecurityGroupRulesIngressOutput() SecurityGroupRulesIngressOutput
	ToSecurityGroupRulesIngressOutputWithContext(context.Context) SecurityGroupRulesIngressOutput
}

type SecurityGroupRulesIngressArgs struct {
	// A list of source (for ingress)/destination (for egress) IP subnet (in [CIDR notation][cidr]) to match.
	CidrLists pulumi.StringArrayInput `pulumi:"cidrLists"`
	// A free-form text describing the Security Group rule purpose.
	Description pulumi.StringPtrInput   `pulumi:"description"`
	IcmpCode    pulumi.IntPtrInput      `pulumi:"icmpCode"`
	IcmpType    pulumi.IntPtrInput      `pulumi:"icmpType"`
	Ids         pulumi.StringArrayInput `pulumi:"ids"`
	// A list of ports or port ranges (`start_port-end_port`).
	// * `icmpType`/`icmpCode` - An ICMP/ICMPv6 [type/code][icmp] to match.
	Ports pulumi.StringArrayInput `pulumi:"ports"`
	// The network protocol to match. Supported values are: `TCP`, `UDP`, `ICMP`, `ICMPv6`, `AH`, `ESP`, `GRE`, `IPIP` and `ALL`.
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
	// A source (for ingress)/destination (for egress) of the traffic identified by a Security Group.
	UserSecurityGroupLists pulumi.StringArrayInput `pulumi:"userSecurityGroupLists"`
}

func (SecurityGroupRulesIngressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityGroupRulesIngress)(nil)).Elem()
}

func (i SecurityGroupRulesIngressArgs) ToSecurityGroupRulesIngressOutput() SecurityGroupRulesIngressOutput {
	return i.ToSecurityGroupRulesIngressOutputWithContext(context.Background())
}

func (i SecurityGroupRulesIngressArgs) ToSecurityGroupRulesIngressOutputWithContext(ctx context.Context) SecurityGroupRulesIngressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityGroupRulesIngressOutput)
}

// SecurityGroupRulesIngressArrayInput is an input type that accepts SecurityGroupRulesIngressArray and SecurityGroupRulesIngressArrayOutput values.
// You can construct a concrete instance of `SecurityGroupRulesIngressArrayInput` via:
//
//          SecurityGroupRulesIngressArray{ SecurityGroupRulesIngressArgs{...} }
type SecurityGroupRulesIngressArrayInput interface {
	pulumi.Input

	ToSecurityGroupRulesIngressArrayOutput() SecurityGroupRulesIngressArrayOutput
	ToSecurityGroupRulesIngressArrayOutputWithContext(context.Context) SecurityGroupRulesIngressArrayOutput
}

type SecurityGroupRulesIngressArray []SecurityGroupRulesIngressInput

func (SecurityGroupRulesIngressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecurityGroupRulesIngress)(nil)).Elem()
}

func (i SecurityGroupRulesIngressArray) ToSecurityGroupRulesIngressArrayOutput() SecurityGroupRulesIngressArrayOutput {
	return i.ToSecurityGroupRulesIngressArrayOutputWithContext(context.Background())
}

func (i SecurityGroupRulesIngressArray) ToSecurityGroupRulesIngressArrayOutputWithContext(ctx context.Context) SecurityGroupRulesIngressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityGroupRulesIngressArrayOutput)
}

type SecurityGroupRulesIngressOutput struct{ *pulumi.OutputState }

func (SecurityGroupRulesIngressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityGroupRulesIngress)(nil)).Elem()
}

func (o SecurityGroupRulesIngressOutput) ToSecurityGroupRulesIngressOutput() SecurityGroupRulesIngressOutput {
	return o
}

func (o SecurityGroupRulesIngressOutput) ToSecurityGroupRulesIngressOutputWithContext(ctx context.Context) SecurityGroupRulesIngressOutput {
	return o
}

// A list of source (for ingress)/destination (for egress) IP subnet (in [CIDR notation][cidr]) to match.
func (o SecurityGroupRulesIngressOutput) CidrLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SecurityGroupRulesIngress) []string { return v.CidrLists }).(pulumi.StringArrayOutput)
}

// A free-form text describing the Security Group rule purpose.
func (o SecurityGroupRulesIngressOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurityGroupRulesIngress) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o SecurityGroupRulesIngressOutput) IcmpCode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecurityGroupRulesIngress) *int { return v.IcmpCode }).(pulumi.IntPtrOutput)
}

func (o SecurityGroupRulesIngressOutput) IcmpType() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecurityGroupRulesIngress) *int { return v.IcmpType }).(pulumi.IntPtrOutput)
}

func (o SecurityGroupRulesIngressOutput) Ids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SecurityGroupRulesIngress) []string { return v.Ids }).(pulumi.StringArrayOutput)
}

// A list of ports or port ranges (`start_port-end_port`).
// * `icmpType`/`icmpCode` - An ICMP/ICMPv6 [type/code][icmp] to match.
func (o SecurityGroupRulesIngressOutput) Ports() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SecurityGroupRulesIngress) []string { return v.Ports }).(pulumi.StringArrayOutput)
}

// The network protocol to match. Supported values are: `TCP`, `UDP`, `ICMP`, `ICMPv6`, `AH`, `ESP`, `GRE`, `IPIP` and `ALL`.
func (o SecurityGroupRulesIngressOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurityGroupRulesIngress) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

// A source (for ingress)/destination (for egress) of the traffic identified by a Security Group.
func (o SecurityGroupRulesIngressOutput) UserSecurityGroupLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SecurityGroupRulesIngress) []string { return v.UserSecurityGroupLists }).(pulumi.StringArrayOutput)
}

type SecurityGroupRulesIngressArrayOutput struct{ *pulumi.OutputState }

func (SecurityGroupRulesIngressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecurityGroupRulesIngress)(nil)).Elem()
}

func (o SecurityGroupRulesIngressArrayOutput) ToSecurityGroupRulesIngressArrayOutput() SecurityGroupRulesIngressArrayOutput {
	return o
}

func (o SecurityGroupRulesIngressArrayOutput) ToSecurityGroupRulesIngressArrayOutputWithContext(ctx context.Context) SecurityGroupRulesIngressArrayOutput {
	return o
}

func (o SecurityGroupRulesIngressArrayOutput) Index(i pulumi.IntInput) SecurityGroupRulesIngressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SecurityGroupRulesIngress {
		return vs[0].([]SecurityGroupRulesIngress)[vs[1].(int)]
	}).(SecurityGroupRulesIngressOutput)
}

type GetDomainRecordFilter struct {
	// A regular expression matching the domain record content to lookup.
	ContentRegex *string `pulumi:"contentRegex"`
	// The ID matching the domain record ID to lookup.
	Id *int `pulumi:"id"`
	// The name matching the domain record name to lookup.
	Name *string `pulumi:"name"`
	// The record type matching the domain record type to lookup.
	RecordType *string `pulumi:"recordType"`
}

// GetDomainRecordFilterInput is an input type that accepts GetDomainRecordFilterArgs and GetDomainRecordFilterOutput values.
// You can construct a concrete instance of `GetDomainRecordFilterInput` via:
//
//          GetDomainRecordFilterArgs{...}
type GetDomainRecordFilterInput interface {
	pulumi.Input

	ToGetDomainRecordFilterOutput() GetDomainRecordFilterOutput
	ToGetDomainRecordFilterOutputWithContext(context.Context) GetDomainRecordFilterOutput
}

type GetDomainRecordFilterArgs struct {
	// A regular expression matching the domain record content to lookup.
	ContentRegex pulumi.StringPtrInput `pulumi:"contentRegex"`
	// The ID matching the domain record ID to lookup.
	Id pulumi.IntPtrInput `pulumi:"id"`
	// The name matching the domain record name to lookup.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The record type matching the domain record type to lookup.
	RecordType pulumi.StringPtrInput `pulumi:"recordType"`
}

func (GetDomainRecordFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainRecordFilter)(nil)).Elem()
}

func (i GetDomainRecordFilterArgs) ToGetDomainRecordFilterOutput() GetDomainRecordFilterOutput {
	return i.ToGetDomainRecordFilterOutputWithContext(context.Background())
}

func (i GetDomainRecordFilterArgs) ToGetDomainRecordFilterOutputWithContext(ctx context.Context) GetDomainRecordFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDomainRecordFilterOutput)
}

type GetDomainRecordFilterOutput struct{ *pulumi.OutputState }

func (GetDomainRecordFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainRecordFilter)(nil)).Elem()
}

func (o GetDomainRecordFilterOutput) ToGetDomainRecordFilterOutput() GetDomainRecordFilterOutput {
	return o
}

func (o GetDomainRecordFilterOutput) ToGetDomainRecordFilterOutputWithContext(ctx context.Context) GetDomainRecordFilterOutput {
	return o
}

// A regular expression matching the domain record content to lookup.
func (o GetDomainRecordFilterOutput) ContentRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetDomainRecordFilter) *string { return v.ContentRegex }).(pulumi.StringPtrOutput)
}

// The ID matching the domain record ID to lookup.
func (o GetDomainRecordFilterOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetDomainRecordFilter) *int { return v.Id }).(pulumi.IntPtrOutput)
}

// The name matching the domain record name to lookup.
func (o GetDomainRecordFilterOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetDomainRecordFilter) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The record type matching the domain record type to lookup.
func (o GetDomainRecordFilterOutput) RecordType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetDomainRecordFilter) *string { return v.RecordType }).(pulumi.StringPtrOutput)
}

type GetDomainRecordRecord struct {
	// The content of the domain record.
	Content *string `pulumi:"content"`
	// The name of the [domain][r-domain] where to look for domain records.
	Domain *string `pulumi:"domain"`
	// The ID matching the domain record ID to lookup.
	Id *int `pulumi:"id"`
	// The name matching the domain record name to lookup.
	Name *string `pulumi:"name"`
	// The priority of the domain record.
	Prio *int `pulumi:"prio"`
	// The record type matching the domain record type to lookup.
	RecordType *string `pulumi:"recordType"`
}

// GetDomainRecordRecordInput is an input type that accepts GetDomainRecordRecordArgs and GetDomainRecordRecordOutput values.
// You can construct a concrete instance of `GetDomainRecordRecordInput` via:
//
//          GetDomainRecordRecordArgs{...}
type GetDomainRecordRecordInput interface {
	pulumi.Input

	ToGetDomainRecordRecordOutput() GetDomainRecordRecordOutput
	ToGetDomainRecordRecordOutputWithContext(context.Context) GetDomainRecordRecordOutput
}

type GetDomainRecordRecordArgs struct {
	// The content of the domain record.
	Content pulumi.StringPtrInput `pulumi:"content"`
	// The name of the [domain][r-domain] where to look for domain records.
	Domain pulumi.StringPtrInput `pulumi:"domain"`
	// The ID matching the domain record ID to lookup.
	Id pulumi.IntPtrInput `pulumi:"id"`
	// The name matching the domain record name to lookup.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The priority of the domain record.
	Prio pulumi.IntPtrInput `pulumi:"prio"`
	// The record type matching the domain record type to lookup.
	RecordType pulumi.StringPtrInput `pulumi:"recordType"`
}

func (GetDomainRecordRecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainRecordRecord)(nil)).Elem()
}

func (i GetDomainRecordRecordArgs) ToGetDomainRecordRecordOutput() GetDomainRecordRecordOutput {
	return i.ToGetDomainRecordRecordOutputWithContext(context.Background())
}

func (i GetDomainRecordRecordArgs) ToGetDomainRecordRecordOutputWithContext(ctx context.Context) GetDomainRecordRecordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDomainRecordRecordOutput)
}

// GetDomainRecordRecordArrayInput is an input type that accepts GetDomainRecordRecordArray and GetDomainRecordRecordArrayOutput values.
// You can construct a concrete instance of `GetDomainRecordRecordArrayInput` via:
//
//          GetDomainRecordRecordArray{ GetDomainRecordRecordArgs{...} }
type GetDomainRecordRecordArrayInput interface {
	pulumi.Input

	ToGetDomainRecordRecordArrayOutput() GetDomainRecordRecordArrayOutput
	ToGetDomainRecordRecordArrayOutputWithContext(context.Context) GetDomainRecordRecordArrayOutput
}

type GetDomainRecordRecordArray []GetDomainRecordRecordInput

func (GetDomainRecordRecordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDomainRecordRecord)(nil)).Elem()
}

func (i GetDomainRecordRecordArray) ToGetDomainRecordRecordArrayOutput() GetDomainRecordRecordArrayOutput {
	return i.ToGetDomainRecordRecordArrayOutputWithContext(context.Background())
}

func (i GetDomainRecordRecordArray) ToGetDomainRecordRecordArrayOutputWithContext(ctx context.Context) GetDomainRecordRecordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDomainRecordRecordArrayOutput)
}

type GetDomainRecordRecordOutput struct{ *pulumi.OutputState }

func (GetDomainRecordRecordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainRecordRecord)(nil)).Elem()
}

func (o GetDomainRecordRecordOutput) ToGetDomainRecordRecordOutput() GetDomainRecordRecordOutput {
	return o
}

func (o GetDomainRecordRecordOutput) ToGetDomainRecordRecordOutputWithContext(ctx context.Context) GetDomainRecordRecordOutput {
	return o
}

// The content of the domain record.
func (o GetDomainRecordRecordOutput) Content() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetDomainRecordRecord) *string { return v.Content }).(pulumi.StringPtrOutput)
}

// The name of the [domain][r-domain] where to look for domain records.
func (o GetDomainRecordRecordOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetDomainRecordRecord) *string { return v.Domain }).(pulumi.StringPtrOutput)
}

// The ID matching the domain record ID to lookup.
func (o GetDomainRecordRecordOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetDomainRecordRecord) *int { return v.Id }).(pulumi.IntPtrOutput)
}

// The name matching the domain record name to lookup.
func (o GetDomainRecordRecordOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetDomainRecordRecord) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The priority of the domain record.
func (o GetDomainRecordRecordOutput) Prio() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetDomainRecordRecord) *int { return v.Prio }).(pulumi.IntPtrOutput)
}

// The record type matching the domain record type to lookup.
func (o GetDomainRecordRecordOutput) RecordType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetDomainRecordRecord) *string { return v.RecordType }).(pulumi.StringPtrOutput)
}

type GetDomainRecordRecordArrayOutput struct{ *pulumi.OutputState }

func (GetDomainRecordRecordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDomainRecordRecord)(nil)).Elem()
}

func (o GetDomainRecordRecordArrayOutput) ToGetDomainRecordRecordArrayOutput() GetDomainRecordRecordArrayOutput {
	return o
}

func (o GetDomainRecordRecordArrayOutput) ToGetDomainRecordRecordArrayOutputWithContext(ctx context.Context) GetDomainRecordRecordArrayOutput {
	return o
}

func (o GetDomainRecordRecordArrayOutput) Index(i pulumi.IntInput) GetDomainRecordRecordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDomainRecordRecord {
		return vs[0].([]GetDomainRecordRecord)[vs[1].(int)]
	}).(GetDomainRecordRecordOutput)
}

type GetElasticIPHealthcheck struct {
	// The health checking interval in seconds.
	Interval int `pulumi:"interval"`
	// (Required) The health checking mode.
	Mode string `pulumi:"mode"`
	// (Required) The health checking port.
	Port int `pulumi:"port"`
	// The number of failed attempts before considering a managed Elastic IP target unhealthy.
	StrikesFail int `pulumi:"strikesFail"`
	// The number of successful attempts before considering a managed Elastic IP target healthy.
	StrikesOk int `pulumi:"strikesOk"`
	// The time in seconds before considering a healthcheck probing failed.
	Timeout int `pulumi:"timeout"`
	// Disable TLS certificate verification for health checking in `https` mode.
	TlsSkipVerify bool `pulumi:"tlsSkipVerify"`
	// The health checking server name to present with SNI in `https` mode.
	TlsSni string `pulumi:"tlsSni"`
	// The health checking URI.
	Uri string `pulumi:"uri"`
}

// GetElasticIPHealthcheckInput is an input type that accepts GetElasticIPHealthcheckArgs and GetElasticIPHealthcheckOutput values.
// You can construct a concrete instance of `GetElasticIPHealthcheckInput` via:
//
//          GetElasticIPHealthcheckArgs{...}
type GetElasticIPHealthcheckInput interface {
	pulumi.Input

	ToGetElasticIPHealthcheckOutput() GetElasticIPHealthcheckOutput
	ToGetElasticIPHealthcheckOutputWithContext(context.Context) GetElasticIPHealthcheckOutput
}

type GetElasticIPHealthcheckArgs struct {
	// The health checking interval in seconds.
	Interval pulumi.IntInput `pulumi:"interval"`
	// (Required) The health checking mode.
	Mode pulumi.StringInput `pulumi:"mode"`
	// (Required) The health checking port.
	Port pulumi.IntInput `pulumi:"port"`
	// The number of failed attempts before considering a managed Elastic IP target unhealthy.
	StrikesFail pulumi.IntInput `pulumi:"strikesFail"`
	// The number of successful attempts before considering a managed Elastic IP target healthy.
	StrikesOk pulumi.IntInput `pulumi:"strikesOk"`
	// The time in seconds before considering a healthcheck probing failed.
	Timeout pulumi.IntInput `pulumi:"timeout"`
	// Disable TLS certificate verification for health checking in `https` mode.
	TlsSkipVerify pulumi.BoolInput `pulumi:"tlsSkipVerify"`
	// The health checking server name to present with SNI in `https` mode.
	TlsSni pulumi.StringInput `pulumi:"tlsSni"`
	// The health checking URI.
	Uri pulumi.StringInput `pulumi:"uri"`
}

func (GetElasticIPHealthcheckArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetElasticIPHealthcheck)(nil)).Elem()
}

func (i GetElasticIPHealthcheckArgs) ToGetElasticIPHealthcheckOutput() GetElasticIPHealthcheckOutput {
	return i.ToGetElasticIPHealthcheckOutputWithContext(context.Background())
}

func (i GetElasticIPHealthcheckArgs) ToGetElasticIPHealthcheckOutputWithContext(ctx context.Context) GetElasticIPHealthcheckOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetElasticIPHealthcheckOutput)
}

// GetElasticIPHealthcheckArrayInput is an input type that accepts GetElasticIPHealthcheckArray and GetElasticIPHealthcheckArrayOutput values.
// You can construct a concrete instance of `GetElasticIPHealthcheckArrayInput` via:
//
//          GetElasticIPHealthcheckArray{ GetElasticIPHealthcheckArgs{...} }
type GetElasticIPHealthcheckArrayInput interface {
	pulumi.Input

	ToGetElasticIPHealthcheckArrayOutput() GetElasticIPHealthcheckArrayOutput
	ToGetElasticIPHealthcheckArrayOutputWithContext(context.Context) GetElasticIPHealthcheckArrayOutput
}

type GetElasticIPHealthcheckArray []GetElasticIPHealthcheckInput

func (GetElasticIPHealthcheckArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetElasticIPHealthcheck)(nil)).Elem()
}

func (i GetElasticIPHealthcheckArray) ToGetElasticIPHealthcheckArrayOutput() GetElasticIPHealthcheckArrayOutput {
	return i.ToGetElasticIPHealthcheckArrayOutputWithContext(context.Background())
}

func (i GetElasticIPHealthcheckArray) ToGetElasticIPHealthcheckArrayOutputWithContext(ctx context.Context) GetElasticIPHealthcheckArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetElasticIPHealthcheckArrayOutput)
}

type GetElasticIPHealthcheckOutput struct{ *pulumi.OutputState }

func (GetElasticIPHealthcheckOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetElasticIPHealthcheck)(nil)).Elem()
}

func (o GetElasticIPHealthcheckOutput) ToGetElasticIPHealthcheckOutput() GetElasticIPHealthcheckOutput {
	return o
}

func (o GetElasticIPHealthcheckOutput) ToGetElasticIPHealthcheckOutputWithContext(ctx context.Context) GetElasticIPHealthcheckOutput {
	return o
}

// The health checking interval in seconds.
func (o GetElasticIPHealthcheckOutput) Interval() pulumi.IntOutput {
	return o.ApplyT(func(v GetElasticIPHealthcheck) int { return v.Interval }).(pulumi.IntOutput)
}

// (Required) The health checking mode.
func (o GetElasticIPHealthcheckOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v GetElasticIPHealthcheck) string { return v.Mode }).(pulumi.StringOutput)
}

// (Required) The health checking port.
func (o GetElasticIPHealthcheckOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v GetElasticIPHealthcheck) int { return v.Port }).(pulumi.IntOutput)
}

// The number of failed attempts before considering a managed Elastic IP target unhealthy.
func (o GetElasticIPHealthcheckOutput) StrikesFail() pulumi.IntOutput {
	return o.ApplyT(func(v GetElasticIPHealthcheck) int { return v.StrikesFail }).(pulumi.IntOutput)
}

// The number of successful attempts before considering a managed Elastic IP target healthy.
func (o GetElasticIPHealthcheckOutput) StrikesOk() pulumi.IntOutput {
	return o.ApplyT(func(v GetElasticIPHealthcheck) int { return v.StrikesOk }).(pulumi.IntOutput)
}

// The time in seconds before considering a healthcheck probing failed.
func (o GetElasticIPHealthcheckOutput) Timeout() pulumi.IntOutput {
	return o.ApplyT(func(v GetElasticIPHealthcheck) int { return v.Timeout }).(pulumi.IntOutput)
}

// Disable TLS certificate verification for health checking in `https` mode.
func (o GetElasticIPHealthcheckOutput) TlsSkipVerify() pulumi.BoolOutput {
	return o.ApplyT(func(v GetElasticIPHealthcheck) bool { return v.TlsSkipVerify }).(pulumi.BoolOutput)
}

// The health checking server name to present with SNI in `https` mode.
func (o GetElasticIPHealthcheckOutput) TlsSni() pulumi.StringOutput {
	return o.ApplyT(func(v GetElasticIPHealthcheck) string { return v.TlsSni }).(pulumi.StringOutput)
}

// The health checking URI.
func (o GetElasticIPHealthcheckOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v GetElasticIPHealthcheck) string { return v.Uri }).(pulumi.StringOutput)
}

type GetElasticIPHealthcheckArrayOutput struct{ *pulumi.OutputState }

func (GetElasticIPHealthcheckArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetElasticIPHealthcheck)(nil)).Elem()
}

func (o GetElasticIPHealthcheckArrayOutput) ToGetElasticIPHealthcheckArrayOutput() GetElasticIPHealthcheckArrayOutput {
	return o
}

func (o GetElasticIPHealthcheckArrayOutput) ToGetElasticIPHealthcheckArrayOutputWithContext(ctx context.Context) GetElasticIPHealthcheckArrayOutput {
	return o
}

func (o GetElasticIPHealthcheckArrayOutput) Index(i pulumi.IntInput) GetElasticIPHealthcheckOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetElasticIPHealthcheck {
		return vs[0].([]GetElasticIPHealthcheck)[vs[1].(int)]
	}).(GetElasticIPHealthcheckOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseKafkaInput)(nil)).Elem(), DatabaseKafkaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseKafkaPtrInput)(nil)).Elem(), DatabaseKafkaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseMysqlInput)(nil)).Elem(), DatabaseMysqlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseMysqlPtrInput)(nil)).Elem(), DatabaseMysqlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabasePgInput)(nil)).Elem(), DatabasePgArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabasePgPtrInput)(nil)).Elem(), DatabasePgArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseRedisInput)(nil)).Elem(), DatabaseRedisArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseRedisPtrInput)(nil)).Elem(), DatabaseRedisArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticIPHealthcheckInput)(nil)).Elem(), ElasticIPHealthcheckArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticIPHealthcheckPtrInput)(nil)).Elem(), ElasticIPHealthcheckArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NLBServiceHealthcheckInput)(nil)).Elem(), NLBServiceHealthcheckArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NLBServiceHealthcheckArrayInput)(nil)).Elem(), NLBServiceHealthcheckArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SKSClusterOidcInput)(nil)).Elem(), SKSClusterOidcArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SKSClusterOidcPtrInput)(nil)).Elem(), SKSClusterOidcArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityGroupRulesEgressInput)(nil)).Elem(), SecurityGroupRulesEgressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityGroupRulesEgressArrayInput)(nil)).Elem(), SecurityGroupRulesEgressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityGroupRulesIngressInput)(nil)).Elem(), SecurityGroupRulesIngressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityGroupRulesIngressArrayInput)(nil)).Elem(), SecurityGroupRulesIngressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDomainRecordFilterInput)(nil)).Elem(), GetDomainRecordFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDomainRecordRecordInput)(nil)).Elem(), GetDomainRecordRecordArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDomainRecordRecordArrayInput)(nil)).Elem(), GetDomainRecordRecordArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetElasticIPHealthcheckInput)(nil)).Elem(), GetElasticIPHealthcheckArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetElasticIPHealthcheckArrayInput)(nil)).Elem(), GetElasticIPHealthcheckArray{})
	pulumi.RegisterOutputType(DatabaseKafkaOutput{})
	pulumi.RegisterOutputType(DatabaseKafkaPtrOutput{})
	pulumi.RegisterOutputType(DatabaseMysqlOutput{})
	pulumi.RegisterOutputType(DatabaseMysqlPtrOutput{})
	pulumi.RegisterOutputType(DatabasePgOutput{})
	pulumi.RegisterOutputType(DatabasePgPtrOutput{})
	pulumi.RegisterOutputType(DatabaseRedisOutput{})
	pulumi.RegisterOutputType(DatabaseRedisPtrOutput{})
	pulumi.RegisterOutputType(ElasticIPHealthcheckOutput{})
	pulumi.RegisterOutputType(ElasticIPHealthcheckPtrOutput{})
	pulumi.RegisterOutputType(NLBServiceHealthcheckOutput{})
	pulumi.RegisterOutputType(NLBServiceHealthcheckArrayOutput{})
	pulumi.RegisterOutputType(SKSClusterOidcOutput{})
	pulumi.RegisterOutputType(SKSClusterOidcPtrOutput{})
	pulumi.RegisterOutputType(SecurityGroupRulesEgressOutput{})
	pulumi.RegisterOutputType(SecurityGroupRulesEgressArrayOutput{})
	pulumi.RegisterOutputType(SecurityGroupRulesIngressOutput{})
	pulumi.RegisterOutputType(SecurityGroupRulesIngressArrayOutput{})
	pulumi.RegisterOutputType(GetDomainRecordFilterOutput{})
	pulumi.RegisterOutputType(GetDomainRecordRecordOutput{})
	pulumi.RegisterOutputType(GetDomainRecordRecordArrayOutput{})
	pulumi.RegisterOutputType(GetElasticIPHealthcheckOutput{})
	pulumi.RegisterOutputType(GetElasticIPHealthcheckArrayOutput{})
}
