// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package exoscale

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides an Exoscale [DNS][dns-doc] domain record resource. This can be used to create, modify, and delete DNS domain records.
//
// ## Usage example
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-exoscale/sdk/go/exoscale"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		example, err := exoscale.NewDomain(ctx, "example", nil)
// 		if err != nil {
// 			return err
// 		}
// 		myserver, err := exoscale.NewDomainRecord(ctx, "myserver", &exoscale.DomainRecordArgs{
// 			Domain:     example.ID(),
// 			RecordType: pulumi.String("A"),
// 			Content:    pulumi.String("1.2.3.4"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = exoscale.NewDomainRecord(ctx, "myserverAlias", &exoscale.DomainRecordArgs{
// 			Domain:     example.ID(),
// 			RecordType: pulumi.String("CNAME"),
// 			Content:    myserver.Hostname,
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// An existing DNS domain record can be imported as a resource by IDconsole
//
// ```sh
//  $ pulumi import exoscale:index/domainRecord:DomainRecord www 12480484
// ```
//
//  [dns-doc]https://community.exoscale.com/documentation/dns/ [r-domain]domain.html [ttl]https://en.wikipedia.org/wiki/Time_to_live
type DomainRecord struct {
	pulumi.CustomResourceState

	// The value of the domain record.
	Content pulumi.StringOutput `pulumi:"content"`
	// The name of the [`Domain`][r-domain] to create the record into.
	Domain pulumi.StringOutput `pulumi:"domain"`
	// The DNS domain record's *Fully Qualified Domain Name* (FQDN), useful for linking `A` records into `CNAME`.
	Hostname pulumi.StringOutput `pulumi:"hostname"`
	// The name of the domain record; leave blank (`""`) to create a root record (similar to using `@` in a DNS zone file).
	Name pulumi.StringOutput `pulumi:"name"`
	// The priority of the DNS domain record (for types that support it).
	Prio pulumi.IntOutput `pulumi:"prio"`
	// The type of the domain record. Supported values are: `A`, `AAAA`, `ALIAS`, `CAA`, `CNAME`, `HINFO`, `MX`, `NAPTR`, `NS`, `POOL`, `SPF`, `SRV`, `SSHFP`, `TXT`, `URL`.
	RecordType pulumi.StringOutput `pulumi:"recordType"`
	// The [Time To Live][ttl] of the domain record.
	Ttl pulumi.IntOutput `pulumi:"ttl"`
}

// NewDomainRecord registers a new resource with the given unique name, arguments, and options.
func NewDomainRecord(ctx *pulumi.Context,
	name string, args *DomainRecordArgs, opts ...pulumi.ResourceOption) (*DomainRecord, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Content == nil {
		return nil, errors.New("invalid value for required argument 'Content'")
	}
	if args.Domain == nil {
		return nil, errors.New("invalid value for required argument 'Domain'")
	}
	if args.RecordType == nil {
		return nil, errors.New("invalid value for required argument 'RecordType'")
	}
	var resource DomainRecord
	err := ctx.RegisterResource("exoscale:index/domainRecord:DomainRecord", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDomainRecord gets an existing DomainRecord resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDomainRecord(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DomainRecordState, opts ...pulumi.ResourceOption) (*DomainRecord, error) {
	var resource DomainRecord
	err := ctx.ReadResource("exoscale:index/domainRecord:DomainRecord", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DomainRecord resources.
type domainRecordState struct {
	// The value of the domain record.
	Content *string `pulumi:"content"`
	// The name of the [`Domain`][r-domain] to create the record into.
	Domain *string `pulumi:"domain"`
	// The DNS domain record's *Fully Qualified Domain Name* (FQDN), useful for linking `A` records into `CNAME`.
	Hostname *string `pulumi:"hostname"`
	// The name of the domain record; leave blank (`""`) to create a root record (similar to using `@` in a DNS zone file).
	Name *string `pulumi:"name"`
	// The priority of the DNS domain record (for types that support it).
	Prio *int `pulumi:"prio"`
	// The type of the domain record. Supported values are: `A`, `AAAA`, `ALIAS`, `CAA`, `CNAME`, `HINFO`, `MX`, `NAPTR`, `NS`, `POOL`, `SPF`, `SRV`, `SSHFP`, `TXT`, `URL`.
	RecordType *string `pulumi:"recordType"`
	// The [Time To Live][ttl] of the domain record.
	Ttl *int `pulumi:"ttl"`
}

type DomainRecordState struct {
	// The value of the domain record.
	Content pulumi.StringPtrInput
	// The name of the [`Domain`][r-domain] to create the record into.
	Domain pulumi.StringPtrInput
	// The DNS domain record's *Fully Qualified Domain Name* (FQDN), useful for linking `A` records into `CNAME`.
	Hostname pulumi.StringPtrInput
	// The name of the domain record; leave blank (`""`) to create a root record (similar to using `@` in a DNS zone file).
	Name pulumi.StringPtrInput
	// The priority of the DNS domain record (for types that support it).
	Prio pulumi.IntPtrInput
	// The type of the domain record. Supported values are: `A`, `AAAA`, `ALIAS`, `CAA`, `CNAME`, `HINFO`, `MX`, `NAPTR`, `NS`, `POOL`, `SPF`, `SRV`, `SSHFP`, `TXT`, `URL`.
	RecordType pulumi.StringPtrInput
	// The [Time To Live][ttl] of the domain record.
	Ttl pulumi.IntPtrInput
}

func (DomainRecordState) ElementType() reflect.Type {
	return reflect.TypeOf((*domainRecordState)(nil)).Elem()
}

type domainRecordArgs struct {
	// The value of the domain record.
	Content string `pulumi:"content"`
	// The name of the [`Domain`][r-domain] to create the record into.
	Domain string `pulumi:"domain"`
	// The name of the domain record; leave blank (`""`) to create a root record (similar to using `@` in a DNS zone file).
	Name *string `pulumi:"name"`
	// The priority of the DNS domain record (for types that support it).
	Prio *int `pulumi:"prio"`
	// The type of the domain record. Supported values are: `A`, `AAAA`, `ALIAS`, `CAA`, `CNAME`, `HINFO`, `MX`, `NAPTR`, `NS`, `POOL`, `SPF`, `SRV`, `SSHFP`, `TXT`, `URL`.
	RecordType string `pulumi:"recordType"`
	// The [Time To Live][ttl] of the domain record.
	Ttl *int `pulumi:"ttl"`
}

// The set of arguments for constructing a DomainRecord resource.
type DomainRecordArgs struct {
	// The value of the domain record.
	Content pulumi.StringInput
	// The name of the [`Domain`][r-domain] to create the record into.
	Domain pulumi.StringInput
	// The name of the domain record; leave blank (`""`) to create a root record (similar to using `@` in a DNS zone file).
	Name pulumi.StringPtrInput
	// The priority of the DNS domain record (for types that support it).
	Prio pulumi.IntPtrInput
	// The type of the domain record. Supported values are: `A`, `AAAA`, `ALIAS`, `CAA`, `CNAME`, `HINFO`, `MX`, `NAPTR`, `NS`, `POOL`, `SPF`, `SRV`, `SSHFP`, `TXT`, `URL`.
	RecordType pulumi.StringInput
	// The [Time To Live][ttl] of the domain record.
	Ttl pulumi.IntPtrInput
}

func (DomainRecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*domainRecordArgs)(nil)).Elem()
}

type DomainRecordInput interface {
	pulumi.Input

	ToDomainRecordOutput() DomainRecordOutput
	ToDomainRecordOutputWithContext(ctx context.Context) DomainRecordOutput
}

func (*DomainRecord) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainRecord)(nil)).Elem()
}

func (i *DomainRecord) ToDomainRecordOutput() DomainRecordOutput {
	return i.ToDomainRecordOutputWithContext(context.Background())
}

func (i *DomainRecord) ToDomainRecordOutputWithContext(ctx context.Context) DomainRecordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainRecordOutput)
}

// DomainRecordArrayInput is an input type that accepts DomainRecordArray and DomainRecordArrayOutput values.
// You can construct a concrete instance of `DomainRecordArrayInput` via:
//
//          DomainRecordArray{ DomainRecordArgs{...} }
type DomainRecordArrayInput interface {
	pulumi.Input

	ToDomainRecordArrayOutput() DomainRecordArrayOutput
	ToDomainRecordArrayOutputWithContext(context.Context) DomainRecordArrayOutput
}

type DomainRecordArray []DomainRecordInput

func (DomainRecordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DomainRecord)(nil)).Elem()
}

func (i DomainRecordArray) ToDomainRecordArrayOutput() DomainRecordArrayOutput {
	return i.ToDomainRecordArrayOutputWithContext(context.Background())
}

func (i DomainRecordArray) ToDomainRecordArrayOutputWithContext(ctx context.Context) DomainRecordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainRecordArrayOutput)
}

// DomainRecordMapInput is an input type that accepts DomainRecordMap and DomainRecordMapOutput values.
// You can construct a concrete instance of `DomainRecordMapInput` via:
//
//          DomainRecordMap{ "key": DomainRecordArgs{...} }
type DomainRecordMapInput interface {
	pulumi.Input

	ToDomainRecordMapOutput() DomainRecordMapOutput
	ToDomainRecordMapOutputWithContext(context.Context) DomainRecordMapOutput
}

type DomainRecordMap map[string]DomainRecordInput

func (DomainRecordMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DomainRecord)(nil)).Elem()
}

func (i DomainRecordMap) ToDomainRecordMapOutput() DomainRecordMapOutput {
	return i.ToDomainRecordMapOutputWithContext(context.Background())
}

func (i DomainRecordMap) ToDomainRecordMapOutputWithContext(ctx context.Context) DomainRecordMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainRecordMapOutput)
}

type DomainRecordOutput struct{ *pulumi.OutputState }

func (DomainRecordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainRecord)(nil)).Elem()
}

func (o DomainRecordOutput) ToDomainRecordOutput() DomainRecordOutput {
	return o
}

func (o DomainRecordOutput) ToDomainRecordOutputWithContext(ctx context.Context) DomainRecordOutput {
	return o
}

type DomainRecordArrayOutput struct{ *pulumi.OutputState }

func (DomainRecordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DomainRecord)(nil)).Elem()
}

func (o DomainRecordArrayOutput) ToDomainRecordArrayOutput() DomainRecordArrayOutput {
	return o
}

func (o DomainRecordArrayOutput) ToDomainRecordArrayOutputWithContext(ctx context.Context) DomainRecordArrayOutput {
	return o
}

func (o DomainRecordArrayOutput) Index(i pulumi.IntInput) DomainRecordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DomainRecord {
		return vs[0].([]*DomainRecord)[vs[1].(int)]
	}).(DomainRecordOutput)
}

type DomainRecordMapOutput struct{ *pulumi.OutputState }

func (DomainRecordMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DomainRecord)(nil)).Elem()
}

func (o DomainRecordMapOutput) ToDomainRecordMapOutput() DomainRecordMapOutput {
	return o
}

func (o DomainRecordMapOutput) ToDomainRecordMapOutputWithContext(ctx context.Context) DomainRecordMapOutput {
	return o
}

func (o DomainRecordMapOutput) MapIndex(k pulumi.StringInput) DomainRecordOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DomainRecord {
		return vs[0].(map[string]*DomainRecord)[vs[1].(string)]
	}).(DomainRecordOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DomainRecordInput)(nil)).Elem(), &DomainRecord{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainRecordArrayInput)(nil)).Elem(), DomainRecordArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainRecordMapInput)(nil)).Elem(), DomainRecordMap{})
	pulumi.RegisterOutputType(DomainRecordOutput{})
	pulumi.RegisterOutputType(DomainRecordArrayOutput{})
	pulumi.RegisterOutputType(DomainRecordMapOutput{})
}
