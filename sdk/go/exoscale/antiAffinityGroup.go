// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package exoscale

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides an Exoscale [Anti-Affinity Group][aag-doc] resource. This can be used to create and delete Anti-Affinity Groups.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-exoscale/sdk/go/exoscale"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := exoscale.NewAntiAffinityGroup(ctx, "example", &exoscale.AntiAffinityGroupArgs{
// 			Description: pulumi.String("HA Cluster"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// An existing Anti-Affinity Group can be imported as a resource its IDconsole
//
// ```sh
//  $ pulumi import exoscale:index/antiAffinityGroup:AntiAffinityGroup my-group eb556678-ec59-4be6-8c54-0406ae0f6da6
// ```
//
//  [aag-doc]https://community.exoscale.com/documentation/compute/anti-affinity-groups/
type AntiAffinityGroup struct {
	pulumi.CustomResourceState

	// An Anti-Affinity Group description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The name of the Anti-Affinity Group.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewAntiAffinityGroup registers a new resource with the given unique name, arguments, and options.
func NewAntiAffinityGroup(ctx *pulumi.Context,
	name string, args *AntiAffinityGroupArgs, opts ...pulumi.ResourceOption) (*AntiAffinityGroup, error) {
	if args == nil {
		args = &AntiAffinityGroupArgs{}
	}

	var resource AntiAffinityGroup
	err := ctx.RegisterResource("exoscale:index/antiAffinityGroup:AntiAffinityGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAntiAffinityGroup gets an existing AntiAffinityGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAntiAffinityGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AntiAffinityGroupState, opts ...pulumi.ResourceOption) (*AntiAffinityGroup, error) {
	var resource AntiAffinityGroup
	err := ctx.ReadResource("exoscale:index/antiAffinityGroup:AntiAffinityGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AntiAffinityGroup resources.
type antiAffinityGroupState struct {
	// An Anti-Affinity Group description.
	Description *string `pulumi:"description"`
	// The name of the Anti-Affinity Group.
	Name *string `pulumi:"name"`
}

type AntiAffinityGroupState struct {
	// An Anti-Affinity Group description.
	Description pulumi.StringPtrInput
	// The name of the Anti-Affinity Group.
	Name pulumi.StringPtrInput
}

func (AntiAffinityGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*antiAffinityGroupState)(nil)).Elem()
}

type antiAffinityGroupArgs struct {
	// An Anti-Affinity Group description.
	Description *string `pulumi:"description"`
	// The name of the Anti-Affinity Group.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a AntiAffinityGroup resource.
type AntiAffinityGroupArgs struct {
	// An Anti-Affinity Group description.
	Description pulumi.StringPtrInput
	// The name of the Anti-Affinity Group.
	Name pulumi.StringPtrInput
}

func (AntiAffinityGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*antiAffinityGroupArgs)(nil)).Elem()
}

type AntiAffinityGroupInput interface {
	pulumi.Input

	ToAntiAffinityGroupOutput() AntiAffinityGroupOutput
	ToAntiAffinityGroupOutputWithContext(ctx context.Context) AntiAffinityGroupOutput
}

func (*AntiAffinityGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**AntiAffinityGroup)(nil)).Elem()
}

func (i *AntiAffinityGroup) ToAntiAffinityGroupOutput() AntiAffinityGroupOutput {
	return i.ToAntiAffinityGroupOutputWithContext(context.Background())
}

func (i *AntiAffinityGroup) ToAntiAffinityGroupOutputWithContext(ctx context.Context) AntiAffinityGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AntiAffinityGroupOutput)
}

// AntiAffinityGroupArrayInput is an input type that accepts AntiAffinityGroupArray and AntiAffinityGroupArrayOutput values.
// You can construct a concrete instance of `AntiAffinityGroupArrayInput` via:
//
//          AntiAffinityGroupArray{ AntiAffinityGroupArgs{...} }
type AntiAffinityGroupArrayInput interface {
	pulumi.Input

	ToAntiAffinityGroupArrayOutput() AntiAffinityGroupArrayOutput
	ToAntiAffinityGroupArrayOutputWithContext(context.Context) AntiAffinityGroupArrayOutput
}

type AntiAffinityGroupArray []AntiAffinityGroupInput

func (AntiAffinityGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AntiAffinityGroup)(nil)).Elem()
}

func (i AntiAffinityGroupArray) ToAntiAffinityGroupArrayOutput() AntiAffinityGroupArrayOutput {
	return i.ToAntiAffinityGroupArrayOutputWithContext(context.Background())
}

func (i AntiAffinityGroupArray) ToAntiAffinityGroupArrayOutputWithContext(ctx context.Context) AntiAffinityGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AntiAffinityGroupArrayOutput)
}

// AntiAffinityGroupMapInput is an input type that accepts AntiAffinityGroupMap and AntiAffinityGroupMapOutput values.
// You can construct a concrete instance of `AntiAffinityGroupMapInput` via:
//
//          AntiAffinityGroupMap{ "key": AntiAffinityGroupArgs{...} }
type AntiAffinityGroupMapInput interface {
	pulumi.Input

	ToAntiAffinityGroupMapOutput() AntiAffinityGroupMapOutput
	ToAntiAffinityGroupMapOutputWithContext(context.Context) AntiAffinityGroupMapOutput
}

type AntiAffinityGroupMap map[string]AntiAffinityGroupInput

func (AntiAffinityGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AntiAffinityGroup)(nil)).Elem()
}

func (i AntiAffinityGroupMap) ToAntiAffinityGroupMapOutput() AntiAffinityGroupMapOutput {
	return i.ToAntiAffinityGroupMapOutputWithContext(context.Background())
}

func (i AntiAffinityGroupMap) ToAntiAffinityGroupMapOutputWithContext(ctx context.Context) AntiAffinityGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AntiAffinityGroupMapOutput)
}

type AntiAffinityGroupOutput struct{ *pulumi.OutputState }

func (AntiAffinityGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AntiAffinityGroup)(nil)).Elem()
}

func (o AntiAffinityGroupOutput) ToAntiAffinityGroupOutput() AntiAffinityGroupOutput {
	return o
}

func (o AntiAffinityGroupOutput) ToAntiAffinityGroupOutputWithContext(ctx context.Context) AntiAffinityGroupOutput {
	return o
}

type AntiAffinityGroupArrayOutput struct{ *pulumi.OutputState }

func (AntiAffinityGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AntiAffinityGroup)(nil)).Elem()
}

func (o AntiAffinityGroupArrayOutput) ToAntiAffinityGroupArrayOutput() AntiAffinityGroupArrayOutput {
	return o
}

func (o AntiAffinityGroupArrayOutput) ToAntiAffinityGroupArrayOutputWithContext(ctx context.Context) AntiAffinityGroupArrayOutput {
	return o
}

func (o AntiAffinityGroupArrayOutput) Index(i pulumi.IntInput) AntiAffinityGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AntiAffinityGroup {
		return vs[0].([]*AntiAffinityGroup)[vs[1].(int)]
	}).(AntiAffinityGroupOutput)
}

type AntiAffinityGroupMapOutput struct{ *pulumi.OutputState }

func (AntiAffinityGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AntiAffinityGroup)(nil)).Elem()
}

func (o AntiAffinityGroupMapOutput) ToAntiAffinityGroupMapOutput() AntiAffinityGroupMapOutput {
	return o
}

func (o AntiAffinityGroupMapOutput) ToAntiAffinityGroupMapOutputWithContext(ctx context.Context) AntiAffinityGroupMapOutput {
	return o
}

func (o AntiAffinityGroupMapOutput) MapIndex(k pulumi.StringInput) AntiAffinityGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AntiAffinityGroup {
		return vs[0].(map[string]*AntiAffinityGroup)[vs[1].(string)]
	}).(AntiAffinityGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AntiAffinityGroupInput)(nil)).Elem(), &AntiAffinityGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*AntiAffinityGroupArrayInput)(nil)).Elem(), AntiAffinityGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AntiAffinityGroupMapInput)(nil)).Elem(), AntiAffinityGroupMap{})
	pulumi.RegisterOutputType(AntiAffinityGroupOutput{})
	pulumi.RegisterOutputType(AntiAffinityGroupArrayOutput{})
	pulumi.RegisterOutputType(AntiAffinityGroupMapOutput{})
}
