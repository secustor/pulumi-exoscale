// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package exoscale

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides an Exoscale [Security Group][r-security_group] rule resource. This can be used to create and delete Security Group rules.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-exoscale/sdk/go/exoscale"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		webservers, err := exoscale.NewSecurityGroup(ctx, "webservers", nil)
// 		if err != nil {
// 			return err
// 		}
// 		_, err = exoscale.NewSecurityGroupRule(ctx, "http", &exoscale.SecurityGroupRuleArgs{
// 			SecurityGroupId: webservers.ID(),
// 			Type:            pulumi.String("INGRESS"),
// 			Protocol:        pulumi.String("TCP"),
// 			Cidr:            pulumi.String("0.0.0.0/0"),
// 			StartPort:       pulumi.Int(80),
// 			EndPort:         pulumi.Int(80),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// An existing Security Group rule can be imported as a resource by `<SECURITY-GROUP-ID>/<SECURITY-GROUP-RULE-ID>`console
//
// ```sh
//  $ pulumi import exoscale:index/securityGroupRule:SecurityGroupRule http eb556678-ec59-4be6-8c54-0406ae0f6da6/846831cb-a0fc-454b-9abd-cb526559fcf9
// ```
//
//  [cidr]https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing#CIDR_notation [icmp]https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol#Control_messages [r-security_group]security_group.html
type SecurityGroupRule struct {
	pulumi.CustomResourceState

	// A source (for ingress)/destination (for egress) IP subnet (in [CIDR notation][cidr]) to match (conflicts with `userSecurityGroup`/`securityGroupId`).
	Cidr pulumi.StringPtrOutput `pulumi:"cidr"`
	// A free-form text describing the Security Group rule purpose.
	// * `startPort`/`endPort` - A `TCP`/`UDP` port range to match.
	// * `icmpType`/`icmpCode` - An ICMP/ICMPv6 [type/code][icmp] to match.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	EndPort     pulumi.IntPtrOutput    `pulumi:"endPort"`
	IcmpCode    pulumi.IntPtrOutput    `pulumi:"icmpCode"`
	IcmpType    pulumi.IntPtrOutput    `pulumi:"icmpType"`
	// The network protocol to match. Supported values are: `TCP`, `UDP`, `ICMP`, `ICMPv6`, `AH`, `ESP`, `GRE`, `IPIP` and `ALL`.
	Protocol pulumi.StringPtrOutput `pulumi:"protocol"`
	// The Security Group name the rule applies to.
	SecurityGroup pulumi.StringOutput `pulumi:"securityGroup"`
	// The Security Group ID the rule applies to.
	SecurityGroupId pulumi.StringOutput `pulumi:"securityGroupId"`
	StartPort       pulumi.IntPtrOutput `pulumi:"startPort"`
	// The traffic direction to match (`INGRESS` or `EGRESS`).
	Type pulumi.StringOutput `pulumi:"type"`
	// A source (for ingress)/destination (for egress) Security Group name to match (conflicts with `cidr`/`securityGroupId`).
	UserSecurityGroup pulumi.StringOutput `pulumi:"userSecurityGroup"`
	// A source (for ingress)/destination (for egress) Security Group ID to match (conflicts with `cidr`/`security_group)`).
	UserSecurityGroupId pulumi.StringPtrOutput `pulumi:"userSecurityGroupId"`
}

// NewSecurityGroupRule registers a new resource with the given unique name, arguments, and options.
func NewSecurityGroupRule(ctx *pulumi.Context,
	name string, args *SecurityGroupRuleArgs, opts ...pulumi.ResourceOption) (*SecurityGroupRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	var resource SecurityGroupRule
	err := ctx.RegisterResource("exoscale:index/securityGroupRule:SecurityGroupRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecurityGroupRule gets an existing SecurityGroupRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecurityGroupRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecurityGroupRuleState, opts ...pulumi.ResourceOption) (*SecurityGroupRule, error) {
	var resource SecurityGroupRule
	err := ctx.ReadResource("exoscale:index/securityGroupRule:SecurityGroupRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SecurityGroupRule resources.
type securityGroupRuleState struct {
	// A source (for ingress)/destination (for egress) IP subnet (in [CIDR notation][cidr]) to match (conflicts with `userSecurityGroup`/`securityGroupId`).
	Cidr *string `pulumi:"cidr"`
	// A free-form text describing the Security Group rule purpose.
	// * `startPort`/`endPort` - A `TCP`/`UDP` port range to match.
	// * `icmpType`/`icmpCode` - An ICMP/ICMPv6 [type/code][icmp] to match.
	Description *string `pulumi:"description"`
	EndPort     *int    `pulumi:"endPort"`
	IcmpCode    *int    `pulumi:"icmpCode"`
	IcmpType    *int    `pulumi:"icmpType"`
	// The network protocol to match. Supported values are: `TCP`, `UDP`, `ICMP`, `ICMPv6`, `AH`, `ESP`, `GRE`, `IPIP` and `ALL`.
	Protocol *string `pulumi:"protocol"`
	// The Security Group name the rule applies to.
	SecurityGroup *string `pulumi:"securityGroup"`
	// The Security Group ID the rule applies to.
	SecurityGroupId *string `pulumi:"securityGroupId"`
	StartPort       *int    `pulumi:"startPort"`
	// The traffic direction to match (`INGRESS` or `EGRESS`).
	Type *string `pulumi:"type"`
	// A source (for ingress)/destination (for egress) Security Group name to match (conflicts with `cidr`/`securityGroupId`).
	UserSecurityGroup *string `pulumi:"userSecurityGroup"`
	// A source (for ingress)/destination (for egress) Security Group ID to match (conflicts with `cidr`/`security_group)`).
	UserSecurityGroupId *string `pulumi:"userSecurityGroupId"`
}

type SecurityGroupRuleState struct {
	// A source (for ingress)/destination (for egress) IP subnet (in [CIDR notation][cidr]) to match (conflicts with `userSecurityGroup`/`securityGroupId`).
	Cidr pulumi.StringPtrInput
	// A free-form text describing the Security Group rule purpose.
	// * `startPort`/`endPort` - A `TCP`/`UDP` port range to match.
	// * `icmpType`/`icmpCode` - An ICMP/ICMPv6 [type/code][icmp] to match.
	Description pulumi.StringPtrInput
	EndPort     pulumi.IntPtrInput
	IcmpCode    pulumi.IntPtrInput
	IcmpType    pulumi.IntPtrInput
	// The network protocol to match. Supported values are: `TCP`, `UDP`, `ICMP`, `ICMPv6`, `AH`, `ESP`, `GRE`, `IPIP` and `ALL`.
	Protocol pulumi.StringPtrInput
	// The Security Group name the rule applies to.
	SecurityGroup pulumi.StringPtrInput
	// The Security Group ID the rule applies to.
	SecurityGroupId pulumi.StringPtrInput
	StartPort       pulumi.IntPtrInput
	// The traffic direction to match (`INGRESS` or `EGRESS`).
	Type pulumi.StringPtrInput
	// A source (for ingress)/destination (for egress) Security Group name to match (conflicts with `cidr`/`securityGroupId`).
	UserSecurityGroup pulumi.StringPtrInput
	// A source (for ingress)/destination (for egress) Security Group ID to match (conflicts with `cidr`/`security_group)`).
	UserSecurityGroupId pulumi.StringPtrInput
}

func (SecurityGroupRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*securityGroupRuleState)(nil)).Elem()
}

type securityGroupRuleArgs struct {
	// A source (for ingress)/destination (for egress) IP subnet (in [CIDR notation][cidr]) to match (conflicts with `userSecurityGroup`/`securityGroupId`).
	Cidr *string `pulumi:"cidr"`
	// A free-form text describing the Security Group rule purpose.
	// * `startPort`/`endPort` - A `TCP`/`UDP` port range to match.
	// * `icmpType`/`icmpCode` - An ICMP/ICMPv6 [type/code][icmp] to match.
	Description *string `pulumi:"description"`
	EndPort     *int    `pulumi:"endPort"`
	IcmpCode    *int    `pulumi:"icmpCode"`
	IcmpType    *int    `pulumi:"icmpType"`
	// The network protocol to match. Supported values are: `TCP`, `UDP`, `ICMP`, `ICMPv6`, `AH`, `ESP`, `GRE`, `IPIP` and `ALL`.
	Protocol *string `pulumi:"protocol"`
	// The Security Group name the rule applies to.
	SecurityGroup *string `pulumi:"securityGroup"`
	// The Security Group ID the rule applies to.
	SecurityGroupId *string `pulumi:"securityGroupId"`
	StartPort       *int    `pulumi:"startPort"`
	// The traffic direction to match (`INGRESS` or `EGRESS`).
	Type string `pulumi:"type"`
	// A source (for ingress)/destination (for egress) Security Group name to match (conflicts with `cidr`/`securityGroupId`).
	UserSecurityGroup *string `pulumi:"userSecurityGroup"`
	// A source (for ingress)/destination (for egress) Security Group ID to match (conflicts with `cidr`/`security_group)`).
	UserSecurityGroupId *string `pulumi:"userSecurityGroupId"`
}

// The set of arguments for constructing a SecurityGroupRule resource.
type SecurityGroupRuleArgs struct {
	// A source (for ingress)/destination (for egress) IP subnet (in [CIDR notation][cidr]) to match (conflicts with `userSecurityGroup`/`securityGroupId`).
	Cidr pulumi.StringPtrInput
	// A free-form text describing the Security Group rule purpose.
	// * `startPort`/`endPort` - A `TCP`/`UDP` port range to match.
	// * `icmpType`/`icmpCode` - An ICMP/ICMPv6 [type/code][icmp] to match.
	Description pulumi.StringPtrInput
	EndPort     pulumi.IntPtrInput
	IcmpCode    pulumi.IntPtrInput
	IcmpType    pulumi.IntPtrInput
	// The network protocol to match. Supported values are: `TCP`, `UDP`, `ICMP`, `ICMPv6`, `AH`, `ESP`, `GRE`, `IPIP` and `ALL`.
	Protocol pulumi.StringPtrInput
	// The Security Group name the rule applies to.
	SecurityGroup pulumi.StringPtrInput
	// The Security Group ID the rule applies to.
	SecurityGroupId pulumi.StringPtrInput
	StartPort       pulumi.IntPtrInput
	// The traffic direction to match (`INGRESS` or `EGRESS`).
	Type pulumi.StringInput
	// A source (for ingress)/destination (for egress) Security Group name to match (conflicts with `cidr`/`securityGroupId`).
	UserSecurityGroup pulumi.StringPtrInput
	// A source (for ingress)/destination (for egress) Security Group ID to match (conflicts with `cidr`/`security_group)`).
	UserSecurityGroupId pulumi.StringPtrInput
}

func (SecurityGroupRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*securityGroupRuleArgs)(nil)).Elem()
}

type SecurityGroupRuleInput interface {
	pulumi.Input

	ToSecurityGroupRuleOutput() SecurityGroupRuleOutput
	ToSecurityGroupRuleOutputWithContext(ctx context.Context) SecurityGroupRuleOutput
}

func (*SecurityGroupRule) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityGroupRule)(nil)).Elem()
}

func (i *SecurityGroupRule) ToSecurityGroupRuleOutput() SecurityGroupRuleOutput {
	return i.ToSecurityGroupRuleOutputWithContext(context.Background())
}

func (i *SecurityGroupRule) ToSecurityGroupRuleOutputWithContext(ctx context.Context) SecurityGroupRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityGroupRuleOutput)
}

// SecurityGroupRuleArrayInput is an input type that accepts SecurityGroupRuleArray and SecurityGroupRuleArrayOutput values.
// You can construct a concrete instance of `SecurityGroupRuleArrayInput` via:
//
//          SecurityGroupRuleArray{ SecurityGroupRuleArgs{...} }
type SecurityGroupRuleArrayInput interface {
	pulumi.Input

	ToSecurityGroupRuleArrayOutput() SecurityGroupRuleArrayOutput
	ToSecurityGroupRuleArrayOutputWithContext(context.Context) SecurityGroupRuleArrayOutput
}

type SecurityGroupRuleArray []SecurityGroupRuleInput

func (SecurityGroupRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecurityGroupRule)(nil)).Elem()
}

func (i SecurityGroupRuleArray) ToSecurityGroupRuleArrayOutput() SecurityGroupRuleArrayOutput {
	return i.ToSecurityGroupRuleArrayOutputWithContext(context.Background())
}

func (i SecurityGroupRuleArray) ToSecurityGroupRuleArrayOutputWithContext(ctx context.Context) SecurityGroupRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityGroupRuleArrayOutput)
}

// SecurityGroupRuleMapInput is an input type that accepts SecurityGroupRuleMap and SecurityGroupRuleMapOutput values.
// You can construct a concrete instance of `SecurityGroupRuleMapInput` via:
//
//          SecurityGroupRuleMap{ "key": SecurityGroupRuleArgs{...} }
type SecurityGroupRuleMapInput interface {
	pulumi.Input

	ToSecurityGroupRuleMapOutput() SecurityGroupRuleMapOutput
	ToSecurityGroupRuleMapOutputWithContext(context.Context) SecurityGroupRuleMapOutput
}

type SecurityGroupRuleMap map[string]SecurityGroupRuleInput

func (SecurityGroupRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecurityGroupRule)(nil)).Elem()
}

func (i SecurityGroupRuleMap) ToSecurityGroupRuleMapOutput() SecurityGroupRuleMapOutput {
	return i.ToSecurityGroupRuleMapOutputWithContext(context.Background())
}

func (i SecurityGroupRuleMap) ToSecurityGroupRuleMapOutputWithContext(ctx context.Context) SecurityGroupRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityGroupRuleMapOutput)
}

type SecurityGroupRuleOutput struct{ *pulumi.OutputState }

func (SecurityGroupRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityGroupRule)(nil)).Elem()
}

func (o SecurityGroupRuleOutput) ToSecurityGroupRuleOutput() SecurityGroupRuleOutput {
	return o
}

func (o SecurityGroupRuleOutput) ToSecurityGroupRuleOutputWithContext(ctx context.Context) SecurityGroupRuleOutput {
	return o
}

type SecurityGroupRuleArrayOutput struct{ *pulumi.OutputState }

func (SecurityGroupRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecurityGroupRule)(nil)).Elem()
}

func (o SecurityGroupRuleArrayOutput) ToSecurityGroupRuleArrayOutput() SecurityGroupRuleArrayOutput {
	return o
}

func (o SecurityGroupRuleArrayOutput) ToSecurityGroupRuleArrayOutputWithContext(ctx context.Context) SecurityGroupRuleArrayOutput {
	return o
}

func (o SecurityGroupRuleArrayOutput) Index(i pulumi.IntInput) SecurityGroupRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SecurityGroupRule {
		return vs[0].([]*SecurityGroupRule)[vs[1].(int)]
	}).(SecurityGroupRuleOutput)
}

type SecurityGroupRuleMapOutput struct{ *pulumi.OutputState }

func (SecurityGroupRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecurityGroupRule)(nil)).Elem()
}

func (o SecurityGroupRuleMapOutput) ToSecurityGroupRuleMapOutput() SecurityGroupRuleMapOutput {
	return o
}

func (o SecurityGroupRuleMapOutput) ToSecurityGroupRuleMapOutputWithContext(ctx context.Context) SecurityGroupRuleMapOutput {
	return o
}

func (o SecurityGroupRuleMapOutput) MapIndex(k pulumi.StringInput) SecurityGroupRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SecurityGroupRule {
		return vs[0].(map[string]*SecurityGroupRule)[vs[1].(string)]
	}).(SecurityGroupRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityGroupRuleInput)(nil)).Elem(), &SecurityGroupRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityGroupRuleArrayInput)(nil)).Elem(), SecurityGroupRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityGroupRuleMapInput)(nil)).Elem(), SecurityGroupRuleMap{})
	pulumi.RegisterOutputType(SecurityGroupRuleOutput{})
	pulumi.RegisterOutputType(SecurityGroupRuleArrayOutput{})
	pulumi.RegisterOutputType(SecurityGroupRuleMapOutput{})
}
