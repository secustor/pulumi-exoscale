// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package exoscale

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides information on [domain records][r-domain_record] hosted on [Exoscale DNS][exo-dns].
//
// ## Example Usage
//
// The example below matches all domain records that match with name `mailserver` and Record type `MX`.
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-exoscale/sdk/go/exoscale"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		mycompany, err := exoscale.LookupDomain(ctx, &GetDomainArgs{
// 			Name: my_company.Com,
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		mycompanyMailservers, err := exoscale.LookupDomainRecord(ctx, &GetDomainRecordArgs{
// 			Domain: mycompany.Name,
// 			Filter: GetDomainRecordFilter{
// 				Name:        "mailserver",
// 				RecordeType: "MX",
// 			},
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		mycompanyNameservers, err := exoscale.LookupDomainRecord(ctx, &GetDomainRecordArgs{
// 			Domain: mycompany.Name,
// 			Filter: GetDomainRecordFilter{
// 				ContentRegex: "ns.*",
// 			},
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		ctx.Export("firstDomainRecordName", mycompanyMailservers.Records[0].Name)
// 		ctx.Export("firstDomainRecordContent", mycompanyNameservers.Records[0].Content)
// 		return nil
// 	})
// }
// ```
func LookupDomainRecord(ctx *pulumi.Context, args *LookupDomainRecordArgs, opts ...pulumi.InvokeOption) (*LookupDomainRecordResult, error) {
	var rv LookupDomainRecordResult
	err := ctx.Invoke("exoscale:index/getDomainRecord:getDomainRecord", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDomainRecord.
type LookupDomainRecordArgs struct {
	// The name of the [domain][r-domain] where to look for domain records.
	Domain string `pulumi:"domain"`
	// Filter to apply when looking up domain records.
	Filter GetDomainRecordFilter `pulumi:"filter"`
}

// A collection of values returned by getDomainRecord.
type LookupDomainRecordResult struct {
	Domain string                `pulumi:"domain"`
	Filter GetDomainRecordFilter `pulumi:"filter"`
	// The provider-assigned unique ID for this managed resource.
	Id      string                  `pulumi:"id"`
	Records []GetDomainRecordRecord `pulumi:"records"`
}

func LookupDomainRecordOutput(ctx *pulumi.Context, args LookupDomainRecordOutputArgs, opts ...pulumi.InvokeOption) LookupDomainRecordResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupDomainRecordResult, error) {
			args := v.(LookupDomainRecordArgs)
			r, err := LookupDomainRecord(ctx, &args, opts...)
			return *r, err
		}).(LookupDomainRecordResultOutput)
}

// A collection of arguments for invoking getDomainRecord.
type LookupDomainRecordOutputArgs struct {
	// The name of the [domain][r-domain] where to look for domain records.
	Domain pulumi.StringInput `pulumi:"domain"`
	// Filter to apply when looking up domain records.
	Filter GetDomainRecordFilterInput `pulumi:"filter"`
}

func (LookupDomainRecordOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDomainRecordArgs)(nil)).Elem()
}

// A collection of values returned by getDomainRecord.
type LookupDomainRecordResultOutput struct{ *pulumi.OutputState }

func (LookupDomainRecordResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDomainRecordResult)(nil)).Elem()
}

func (o LookupDomainRecordResultOutput) ToLookupDomainRecordResultOutput() LookupDomainRecordResultOutput {
	return o
}

func (o LookupDomainRecordResultOutput) ToLookupDomainRecordResultOutputWithContext(ctx context.Context) LookupDomainRecordResultOutput {
	return o
}

func (o LookupDomainRecordResultOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDomainRecordResult) string { return v.Domain }).(pulumi.StringOutput)
}

func (o LookupDomainRecordResultOutput) Filter() GetDomainRecordFilterOutput {
	return o.ApplyT(func(v LookupDomainRecordResult) GetDomainRecordFilter { return v.Filter }).(GetDomainRecordFilterOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupDomainRecordResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDomainRecordResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupDomainRecordResultOutput) Records() GetDomainRecordRecordArrayOutput {
	return o.ApplyT(func(v LookupDomainRecordResult) []GetDomainRecordRecord { return v.Records }).(GetDomainRecordRecordArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupDomainRecordResultOutput{})
}
