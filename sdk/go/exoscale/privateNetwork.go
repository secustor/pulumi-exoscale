// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package exoscale

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides an Exoscale [Private Network][privnet-doc] resource. This can be used to create, update and delete Private Networks.
//
// ## Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-exoscale/sdk/go/exoscale"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := exoscale.NewPrivateNetwork(ctx, "example", &exoscale.PrivateNetworkArgs{
// 			Description: pulumi.String("Out-of-band network"),
// 			Zone:        pulumi.String("ch-gva-2"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// *Managed* Private Network:
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-exoscale/sdk/go/exoscale"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := exoscale.NewPrivateNetwork(ctx, "example-managed", &exoscale.PrivateNetworkArgs{
// 			Description: pulumi.String("Out-of-band network with DHCP"),
// 			EndIp:       pulumi.String("10.0.0.253"),
// 			Netmask:     pulumi.String("255.255.255.0"),
// 			StartIp:     pulumi.String("10.0.0.20"),
// 			Zone:        pulumi.String("ch-gva-2"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// An existing Private Network can be imported as a resource by specifying `ID@ZONE`console
//
// ```sh
//  $ pulumi import exoscale:index/privateNetwork:PrivateNetwork net 04fb76a2-6d22-49be-8da7-f2a5a0b902e1@ch-gva-2
// ```
//
//  [privnet-doc]https://community.exoscale.com/documentation/compute/private-networks/ [zone]https://www.exoscale.com/datacenters/
type PrivateNetwork struct {
	pulumi.CustomResourceState

	// A description for the Private Network.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The last address of the IP range used by the DHCP service. Required for *managed* Private Networks.
	EndIp pulumi.StringPtrOutput `pulumi:"endIp"`
	// The name of the Private Network.
	Name pulumi.StringOutput `pulumi:"name"`
	// The netmask defining the IP network allowed for the static lease. Required for *managed* Private Networks.
	Netmask pulumi.StringPtrOutput `pulumi:"netmask"`
	// The first address of IP range used by the DHCP service to automatically assign. Required for *managed* Private Networks.
	StartIp pulumi.StringPtrOutput `pulumi:"startIp"`
	// The name of the [zone][zone] to create the Private Network into.
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewPrivateNetwork registers a new resource with the given unique name, arguments, and options.
func NewPrivateNetwork(ctx *pulumi.Context,
	name string, args *PrivateNetworkArgs, opts ...pulumi.ResourceOption) (*PrivateNetwork, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Zone == nil {
		return nil, errors.New("invalid value for required argument 'Zone'")
	}
	var resource PrivateNetwork
	err := ctx.RegisterResource("exoscale:index/privateNetwork:PrivateNetwork", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPrivateNetwork gets an existing PrivateNetwork resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPrivateNetwork(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PrivateNetworkState, opts ...pulumi.ResourceOption) (*PrivateNetwork, error) {
	var resource PrivateNetwork
	err := ctx.ReadResource("exoscale:index/privateNetwork:PrivateNetwork", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PrivateNetwork resources.
type privateNetworkState struct {
	// A description for the Private Network.
	Description *string `pulumi:"description"`
	// The last address of the IP range used by the DHCP service. Required for *managed* Private Networks.
	EndIp *string `pulumi:"endIp"`
	// The name of the Private Network.
	Name *string `pulumi:"name"`
	// The netmask defining the IP network allowed for the static lease. Required for *managed* Private Networks.
	Netmask *string `pulumi:"netmask"`
	// The first address of IP range used by the DHCP service to automatically assign. Required for *managed* Private Networks.
	StartIp *string `pulumi:"startIp"`
	// The name of the [zone][zone] to create the Private Network into.
	Zone *string `pulumi:"zone"`
}

type PrivateNetworkState struct {
	// A description for the Private Network.
	Description pulumi.StringPtrInput
	// The last address of the IP range used by the DHCP service. Required for *managed* Private Networks.
	EndIp pulumi.StringPtrInput
	// The name of the Private Network.
	Name pulumi.StringPtrInput
	// The netmask defining the IP network allowed for the static lease. Required for *managed* Private Networks.
	Netmask pulumi.StringPtrInput
	// The first address of IP range used by the DHCP service to automatically assign. Required for *managed* Private Networks.
	StartIp pulumi.StringPtrInput
	// The name of the [zone][zone] to create the Private Network into.
	Zone pulumi.StringPtrInput
}

func (PrivateNetworkState) ElementType() reflect.Type {
	return reflect.TypeOf((*privateNetworkState)(nil)).Elem()
}

type privateNetworkArgs struct {
	// A description for the Private Network.
	Description *string `pulumi:"description"`
	// The last address of the IP range used by the DHCP service. Required for *managed* Private Networks.
	EndIp *string `pulumi:"endIp"`
	// The name of the Private Network.
	Name *string `pulumi:"name"`
	// The netmask defining the IP network allowed for the static lease. Required for *managed* Private Networks.
	Netmask *string `pulumi:"netmask"`
	// The first address of IP range used by the DHCP service to automatically assign. Required for *managed* Private Networks.
	StartIp *string `pulumi:"startIp"`
	// The name of the [zone][zone] to create the Private Network into.
	Zone string `pulumi:"zone"`
}

// The set of arguments for constructing a PrivateNetwork resource.
type PrivateNetworkArgs struct {
	// A description for the Private Network.
	Description pulumi.StringPtrInput
	// The last address of the IP range used by the DHCP service. Required for *managed* Private Networks.
	EndIp pulumi.StringPtrInput
	// The name of the Private Network.
	Name pulumi.StringPtrInput
	// The netmask defining the IP network allowed for the static lease. Required for *managed* Private Networks.
	Netmask pulumi.StringPtrInput
	// The first address of IP range used by the DHCP service to automatically assign. Required for *managed* Private Networks.
	StartIp pulumi.StringPtrInput
	// The name of the [zone][zone] to create the Private Network into.
	Zone pulumi.StringInput
}

func (PrivateNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*privateNetworkArgs)(nil)).Elem()
}

type PrivateNetworkInput interface {
	pulumi.Input

	ToPrivateNetworkOutput() PrivateNetworkOutput
	ToPrivateNetworkOutputWithContext(ctx context.Context) PrivateNetworkOutput
}

func (*PrivateNetwork) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateNetwork)(nil)).Elem()
}

func (i *PrivateNetwork) ToPrivateNetworkOutput() PrivateNetworkOutput {
	return i.ToPrivateNetworkOutputWithContext(context.Background())
}

func (i *PrivateNetwork) ToPrivateNetworkOutputWithContext(ctx context.Context) PrivateNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateNetworkOutput)
}

// PrivateNetworkArrayInput is an input type that accepts PrivateNetworkArray and PrivateNetworkArrayOutput values.
// You can construct a concrete instance of `PrivateNetworkArrayInput` via:
//
//          PrivateNetworkArray{ PrivateNetworkArgs{...} }
type PrivateNetworkArrayInput interface {
	pulumi.Input

	ToPrivateNetworkArrayOutput() PrivateNetworkArrayOutput
	ToPrivateNetworkArrayOutputWithContext(context.Context) PrivateNetworkArrayOutput
}

type PrivateNetworkArray []PrivateNetworkInput

func (PrivateNetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PrivateNetwork)(nil)).Elem()
}

func (i PrivateNetworkArray) ToPrivateNetworkArrayOutput() PrivateNetworkArrayOutput {
	return i.ToPrivateNetworkArrayOutputWithContext(context.Background())
}

func (i PrivateNetworkArray) ToPrivateNetworkArrayOutputWithContext(ctx context.Context) PrivateNetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateNetworkArrayOutput)
}

// PrivateNetworkMapInput is an input type that accepts PrivateNetworkMap and PrivateNetworkMapOutput values.
// You can construct a concrete instance of `PrivateNetworkMapInput` via:
//
//          PrivateNetworkMap{ "key": PrivateNetworkArgs{...} }
type PrivateNetworkMapInput interface {
	pulumi.Input

	ToPrivateNetworkMapOutput() PrivateNetworkMapOutput
	ToPrivateNetworkMapOutputWithContext(context.Context) PrivateNetworkMapOutput
}

type PrivateNetworkMap map[string]PrivateNetworkInput

func (PrivateNetworkMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PrivateNetwork)(nil)).Elem()
}

func (i PrivateNetworkMap) ToPrivateNetworkMapOutput() PrivateNetworkMapOutput {
	return i.ToPrivateNetworkMapOutputWithContext(context.Background())
}

func (i PrivateNetworkMap) ToPrivateNetworkMapOutputWithContext(ctx context.Context) PrivateNetworkMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateNetworkMapOutput)
}

type PrivateNetworkOutput struct{ *pulumi.OutputState }

func (PrivateNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateNetwork)(nil)).Elem()
}

func (o PrivateNetworkOutput) ToPrivateNetworkOutput() PrivateNetworkOutput {
	return o
}

func (o PrivateNetworkOutput) ToPrivateNetworkOutputWithContext(ctx context.Context) PrivateNetworkOutput {
	return o
}

type PrivateNetworkArrayOutput struct{ *pulumi.OutputState }

func (PrivateNetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PrivateNetwork)(nil)).Elem()
}

func (o PrivateNetworkArrayOutput) ToPrivateNetworkArrayOutput() PrivateNetworkArrayOutput {
	return o
}

func (o PrivateNetworkArrayOutput) ToPrivateNetworkArrayOutputWithContext(ctx context.Context) PrivateNetworkArrayOutput {
	return o
}

func (o PrivateNetworkArrayOutput) Index(i pulumi.IntInput) PrivateNetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PrivateNetwork {
		return vs[0].([]*PrivateNetwork)[vs[1].(int)]
	}).(PrivateNetworkOutput)
}

type PrivateNetworkMapOutput struct{ *pulumi.OutputState }

func (PrivateNetworkMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PrivateNetwork)(nil)).Elem()
}

func (o PrivateNetworkMapOutput) ToPrivateNetworkMapOutput() PrivateNetworkMapOutput {
	return o
}

func (o PrivateNetworkMapOutput) ToPrivateNetworkMapOutputWithContext(ctx context.Context) PrivateNetworkMapOutput {
	return o
}

func (o PrivateNetworkMapOutput) MapIndex(k pulumi.StringInput) PrivateNetworkOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PrivateNetwork {
		return vs[0].(map[string]*PrivateNetwork)[vs[1].(string)]
	}).(PrivateNetworkOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateNetworkInput)(nil)).Elem(), &PrivateNetwork{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateNetworkArrayInput)(nil)).Elem(), PrivateNetworkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateNetworkMapInput)(nil)).Elem(), PrivateNetworkMap{})
	pulumi.RegisterOutputType(PrivateNetworkOutput{})
	pulumi.RegisterOutputType(PrivateNetworkArrayOutput{})
	pulumi.RegisterOutputType(PrivateNetworkMapOutput{})
}
