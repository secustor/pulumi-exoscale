// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package exoscale

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides an Exoscale [Elastic IP address][eip-doc] resource. This can be used to create, update and delete Elastic IPs.
//
// ## Import
//
// An existing Elastic IP can be imported as a resource by specifying `ID@ZONE`console
//
// ```sh
//  $ pulumi import exoscale:index/elasticIP:ElasticIP web eb556678-ec59-4be6-8c54-0406ae0f6da6@ch-dk-2
// ```
//
//  [eip-doc]https://community.exoscale.com/documentation/compute/eip/ [zone]https://www.exoscale.com/datacenters/
type ElasticIP struct {
	pulumi.CustomResourceState

	// The description of the Elastic IP.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// A health checking configuration for managed Elastic IPs. Structure is documented below.
	Healthcheck ElasticIPHealthcheckOutput `pulumi:"healthcheck"`
	// The Elastic IP address.
	IpAddress pulumi.StringOutput `pulumi:"ipAddress"`
	// The name of the [zone][zone] to create the Elastic IP into.
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewElasticIP registers a new resource with the given unique name, arguments, and options.
func NewElasticIP(ctx *pulumi.Context,
	name string, args *ElasticIPArgs, opts ...pulumi.ResourceOption) (*ElasticIP, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Zone == nil {
		return nil, errors.New("invalid value for required argument 'Zone'")
	}
	var resource ElasticIP
	err := ctx.RegisterResource("exoscale:index/elasticIP:ElasticIP", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetElasticIP gets an existing ElasticIP resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetElasticIP(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ElasticIPState, opts ...pulumi.ResourceOption) (*ElasticIP, error) {
	var resource ElasticIP
	err := ctx.ReadResource("exoscale:index/elasticIP:ElasticIP", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ElasticIP resources.
type elasticIPState struct {
	// The description of the Elastic IP.
	Description *string `pulumi:"description"`
	// A health checking configuration for managed Elastic IPs. Structure is documented below.
	Healthcheck *ElasticIPHealthcheck `pulumi:"healthcheck"`
	// The Elastic IP address.
	IpAddress *string `pulumi:"ipAddress"`
	// The name of the [zone][zone] to create the Elastic IP into.
	Zone *string `pulumi:"zone"`
}

type ElasticIPState struct {
	// The description of the Elastic IP.
	Description pulumi.StringPtrInput
	// A health checking configuration for managed Elastic IPs. Structure is documented below.
	Healthcheck ElasticIPHealthcheckPtrInput
	// The Elastic IP address.
	IpAddress pulumi.StringPtrInput
	// The name of the [zone][zone] to create the Elastic IP into.
	Zone pulumi.StringPtrInput
}

func (ElasticIPState) ElementType() reflect.Type {
	return reflect.TypeOf((*elasticIPState)(nil)).Elem()
}

type elasticIPArgs struct {
	// The description of the Elastic IP.
	Description *string `pulumi:"description"`
	// A health checking configuration for managed Elastic IPs. Structure is documented below.
	Healthcheck *ElasticIPHealthcheck `pulumi:"healthcheck"`
	// The name of the [zone][zone] to create the Elastic IP into.
	Zone string `pulumi:"zone"`
}

// The set of arguments for constructing a ElasticIP resource.
type ElasticIPArgs struct {
	// The description of the Elastic IP.
	Description pulumi.StringPtrInput
	// A health checking configuration for managed Elastic IPs. Structure is documented below.
	Healthcheck ElasticIPHealthcheckPtrInput
	// The name of the [zone][zone] to create the Elastic IP into.
	Zone pulumi.StringInput
}

func (ElasticIPArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*elasticIPArgs)(nil)).Elem()
}

type ElasticIPInput interface {
	pulumi.Input

	ToElasticIPOutput() ElasticIPOutput
	ToElasticIPOutputWithContext(ctx context.Context) ElasticIPOutput
}

func (*ElasticIP) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticIP)(nil)).Elem()
}

func (i *ElasticIP) ToElasticIPOutput() ElasticIPOutput {
	return i.ToElasticIPOutputWithContext(context.Background())
}

func (i *ElasticIP) ToElasticIPOutputWithContext(ctx context.Context) ElasticIPOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticIPOutput)
}

// ElasticIPArrayInput is an input type that accepts ElasticIPArray and ElasticIPArrayOutput values.
// You can construct a concrete instance of `ElasticIPArrayInput` via:
//
//          ElasticIPArray{ ElasticIPArgs{...} }
type ElasticIPArrayInput interface {
	pulumi.Input

	ToElasticIPArrayOutput() ElasticIPArrayOutput
	ToElasticIPArrayOutputWithContext(context.Context) ElasticIPArrayOutput
}

type ElasticIPArray []ElasticIPInput

func (ElasticIPArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ElasticIP)(nil)).Elem()
}

func (i ElasticIPArray) ToElasticIPArrayOutput() ElasticIPArrayOutput {
	return i.ToElasticIPArrayOutputWithContext(context.Background())
}

func (i ElasticIPArray) ToElasticIPArrayOutputWithContext(ctx context.Context) ElasticIPArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticIPArrayOutput)
}

// ElasticIPMapInput is an input type that accepts ElasticIPMap and ElasticIPMapOutput values.
// You can construct a concrete instance of `ElasticIPMapInput` via:
//
//          ElasticIPMap{ "key": ElasticIPArgs{...} }
type ElasticIPMapInput interface {
	pulumi.Input

	ToElasticIPMapOutput() ElasticIPMapOutput
	ToElasticIPMapOutputWithContext(context.Context) ElasticIPMapOutput
}

type ElasticIPMap map[string]ElasticIPInput

func (ElasticIPMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ElasticIP)(nil)).Elem()
}

func (i ElasticIPMap) ToElasticIPMapOutput() ElasticIPMapOutput {
	return i.ToElasticIPMapOutputWithContext(context.Background())
}

func (i ElasticIPMap) ToElasticIPMapOutputWithContext(ctx context.Context) ElasticIPMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticIPMapOutput)
}

type ElasticIPOutput struct{ *pulumi.OutputState }

func (ElasticIPOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticIP)(nil)).Elem()
}

func (o ElasticIPOutput) ToElasticIPOutput() ElasticIPOutput {
	return o
}

func (o ElasticIPOutput) ToElasticIPOutputWithContext(ctx context.Context) ElasticIPOutput {
	return o
}

type ElasticIPArrayOutput struct{ *pulumi.OutputState }

func (ElasticIPArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ElasticIP)(nil)).Elem()
}

func (o ElasticIPArrayOutput) ToElasticIPArrayOutput() ElasticIPArrayOutput {
	return o
}

func (o ElasticIPArrayOutput) ToElasticIPArrayOutputWithContext(ctx context.Context) ElasticIPArrayOutput {
	return o
}

func (o ElasticIPArrayOutput) Index(i pulumi.IntInput) ElasticIPOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ElasticIP {
		return vs[0].([]*ElasticIP)[vs[1].(int)]
	}).(ElasticIPOutput)
}

type ElasticIPMapOutput struct{ *pulumi.OutputState }

func (ElasticIPMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ElasticIP)(nil)).Elem()
}

func (o ElasticIPMapOutput) ToElasticIPMapOutput() ElasticIPMapOutput {
	return o
}

func (o ElasticIPMapOutput) ToElasticIPMapOutputWithContext(ctx context.Context) ElasticIPMapOutput {
	return o
}

func (o ElasticIPMapOutput) MapIndex(k pulumi.StringInput) ElasticIPOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ElasticIP {
		return vs[0].(map[string]*ElasticIP)[vs[1].(string)]
	}).(ElasticIPOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticIPInput)(nil)).Elem(), &ElasticIP{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticIPArrayInput)(nil)).Elem(), ElasticIPArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticIPMapInput)(nil)).Elem(), ElasticIPMap{})
	pulumi.RegisterOutputType(ElasticIPOutput{})
	pulumi.RegisterOutputType(ElasticIPArrayOutput{})
	pulumi.RegisterOutputType(ElasticIPMapOutput{})
}
