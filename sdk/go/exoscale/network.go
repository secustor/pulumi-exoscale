// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package exoscale

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides an Exoscale [Private Network][privnet-doc] resource. This can be used to create, update and delete Private Networks.
//
// See [`NIC`][r-nic] for usage with Compute instances.
//
// !> **WARNING:** This resource is deprecated and will be removed in the next major version.
//
// ## Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-exoscale/sdk/go/exoscale"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := exoscale.NewNetwork(ctx, "unmanaged", &exoscale.NetworkArgs{
// 			DisplayText: pulumi.String("Out-of-band network"),
// 			Tags:        nil,
// 			Zone:        pulumi.String("ch-gva-2"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// *Managed* Private Network:
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-exoscale/sdk/go/exoscale"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := exoscale.NewNetwork(ctx, "managed", &exoscale.NetworkArgs{
// 			DisplayText: pulumi.String("Out-of-band network with DHCP"),
// 			EndIp:       pulumi.String("10.0.0.253"),
// 			Netmask:     pulumi.String("255.255.255.0"),
// 			StartIp:     pulumi.String("10.0.0.20"),
// 			Zone:        pulumi.String("ch-gva-2"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// An existing Private Network can be imported as a resource by name or IDconsole # By name
//
// ```sh
//  $ pulumi import exoscale:index/network:Network net myprivnet
// ```
//
// # By ID
//
// ```sh
//  $ pulumi import exoscale:index/network:Network net 04fb76a2-6d22-49be-8da7-f2a5a0b902e1
// ```
//
//  [r-nic]nic.html [privnet-doc]https://community.exoscale.com/documentation/compute/private-networks/ [zone]https://www.exoscale.com/datacenters/
type Network struct {
	pulumi.CustomResourceState

	// A free-form text describing the Private Network purpose.
	DisplayText pulumi.StringOutput `pulumi:"displayText"`
	// The last address of the IP range used by the DHCP service. Required for *managed* Private Networks.
	EndIp pulumi.StringPtrOutput `pulumi:"endIp"`
	// The name of the Private Network.
	Name pulumi.StringOutput `pulumi:"name"`
	// The netmask defining the IP network allowed for the static lease (see `NIC` resource). Required for *managed* Private Networks.
	Netmask pulumi.StringPtrOutput `pulumi:"netmask"`
	// Deprecated: This attribute is deprecated, please remove it from your configuration.
	NetworkOffering pulumi.StringPtrOutput `pulumi:"networkOffering"`
	// The first address of IP range used by the DHCP service to automatically assign. Required for *managed* Private Networks.
	StartIp pulumi.StringPtrOutput `pulumi:"startIp"`
	// A dictionary of tags (key/value). To remove all tags, set `tags = {}`.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The name of the [zone][zone] to create the Private Network into.
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewNetwork registers a new resource with the given unique name, arguments, and options.
func NewNetwork(ctx *pulumi.Context,
	name string, args *NetworkArgs, opts ...pulumi.ResourceOption) (*Network, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Zone == nil {
		return nil, errors.New("invalid value for required argument 'Zone'")
	}
	var resource Network
	err := ctx.RegisterResource("exoscale:index/network:Network", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetwork gets an existing Network resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetwork(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkState, opts ...pulumi.ResourceOption) (*Network, error) {
	var resource Network
	err := ctx.ReadResource("exoscale:index/network:Network", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Network resources.
type networkState struct {
	// A free-form text describing the Private Network purpose.
	DisplayText *string `pulumi:"displayText"`
	// The last address of the IP range used by the DHCP service. Required for *managed* Private Networks.
	EndIp *string `pulumi:"endIp"`
	// The name of the Private Network.
	Name *string `pulumi:"name"`
	// The netmask defining the IP network allowed for the static lease (see `NIC` resource). Required for *managed* Private Networks.
	Netmask *string `pulumi:"netmask"`
	// Deprecated: This attribute is deprecated, please remove it from your configuration.
	NetworkOffering *string `pulumi:"networkOffering"`
	// The first address of IP range used by the DHCP service to automatically assign. Required for *managed* Private Networks.
	StartIp *string `pulumi:"startIp"`
	// A dictionary of tags (key/value). To remove all tags, set `tags = {}`.
	Tags map[string]string `pulumi:"tags"`
	// The name of the [zone][zone] to create the Private Network into.
	Zone *string `pulumi:"zone"`
}

type NetworkState struct {
	// A free-form text describing the Private Network purpose.
	DisplayText pulumi.StringPtrInput
	// The last address of the IP range used by the DHCP service. Required for *managed* Private Networks.
	EndIp pulumi.StringPtrInput
	// The name of the Private Network.
	Name pulumi.StringPtrInput
	// The netmask defining the IP network allowed for the static lease (see `NIC` resource). Required for *managed* Private Networks.
	Netmask pulumi.StringPtrInput
	// Deprecated: This attribute is deprecated, please remove it from your configuration.
	NetworkOffering pulumi.StringPtrInput
	// The first address of IP range used by the DHCP service to automatically assign. Required for *managed* Private Networks.
	StartIp pulumi.StringPtrInput
	// A dictionary of tags (key/value). To remove all tags, set `tags = {}`.
	Tags pulumi.StringMapInput
	// The name of the [zone][zone] to create the Private Network into.
	Zone pulumi.StringPtrInput
}

func (NetworkState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkState)(nil)).Elem()
}

type networkArgs struct {
	// A free-form text describing the Private Network purpose.
	DisplayText *string `pulumi:"displayText"`
	// The last address of the IP range used by the DHCP service. Required for *managed* Private Networks.
	EndIp *string `pulumi:"endIp"`
	// The name of the Private Network.
	Name *string `pulumi:"name"`
	// The netmask defining the IP network allowed for the static lease (see `NIC` resource). Required for *managed* Private Networks.
	Netmask *string `pulumi:"netmask"`
	// Deprecated: This attribute is deprecated, please remove it from your configuration.
	NetworkOffering *string `pulumi:"networkOffering"`
	// The first address of IP range used by the DHCP service to automatically assign. Required for *managed* Private Networks.
	StartIp *string `pulumi:"startIp"`
	// A dictionary of tags (key/value). To remove all tags, set `tags = {}`.
	Tags map[string]string `pulumi:"tags"`
	// The name of the [zone][zone] to create the Private Network into.
	Zone string `pulumi:"zone"`
}

// The set of arguments for constructing a Network resource.
type NetworkArgs struct {
	// A free-form text describing the Private Network purpose.
	DisplayText pulumi.StringPtrInput
	// The last address of the IP range used by the DHCP service. Required for *managed* Private Networks.
	EndIp pulumi.StringPtrInput
	// The name of the Private Network.
	Name pulumi.StringPtrInput
	// The netmask defining the IP network allowed for the static lease (see `NIC` resource). Required for *managed* Private Networks.
	Netmask pulumi.StringPtrInput
	// Deprecated: This attribute is deprecated, please remove it from your configuration.
	NetworkOffering pulumi.StringPtrInput
	// The first address of IP range used by the DHCP service to automatically assign. Required for *managed* Private Networks.
	StartIp pulumi.StringPtrInput
	// A dictionary of tags (key/value). To remove all tags, set `tags = {}`.
	Tags pulumi.StringMapInput
	// The name of the [zone][zone] to create the Private Network into.
	Zone pulumi.StringInput
}

func (NetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkArgs)(nil)).Elem()
}

type NetworkInput interface {
	pulumi.Input

	ToNetworkOutput() NetworkOutput
	ToNetworkOutputWithContext(ctx context.Context) NetworkOutput
}

func (*Network) ElementType() reflect.Type {
	return reflect.TypeOf((**Network)(nil)).Elem()
}

func (i *Network) ToNetworkOutput() NetworkOutput {
	return i.ToNetworkOutputWithContext(context.Background())
}

func (i *Network) ToNetworkOutputWithContext(ctx context.Context) NetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkOutput)
}

// NetworkArrayInput is an input type that accepts NetworkArray and NetworkArrayOutput values.
// You can construct a concrete instance of `NetworkArrayInput` via:
//
//          NetworkArray{ NetworkArgs{...} }
type NetworkArrayInput interface {
	pulumi.Input

	ToNetworkArrayOutput() NetworkArrayOutput
	ToNetworkArrayOutputWithContext(context.Context) NetworkArrayOutput
}

type NetworkArray []NetworkInput

func (NetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Network)(nil)).Elem()
}

func (i NetworkArray) ToNetworkArrayOutput() NetworkArrayOutput {
	return i.ToNetworkArrayOutputWithContext(context.Background())
}

func (i NetworkArray) ToNetworkArrayOutputWithContext(ctx context.Context) NetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkArrayOutput)
}

// NetworkMapInput is an input type that accepts NetworkMap and NetworkMapOutput values.
// You can construct a concrete instance of `NetworkMapInput` via:
//
//          NetworkMap{ "key": NetworkArgs{...} }
type NetworkMapInput interface {
	pulumi.Input

	ToNetworkMapOutput() NetworkMapOutput
	ToNetworkMapOutputWithContext(context.Context) NetworkMapOutput
}

type NetworkMap map[string]NetworkInput

func (NetworkMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Network)(nil)).Elem()
}

func (i NetworkMap) ToNetworkMapOutput() NetworkMapOutput {
	return i.ToNetworkMapOutputWithContext(context.Background())
}

func (i NetworkMap) ToNetworkMapOutputWithContext(ctx context.Context) NetworkMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkMapOutput)
}

type NetworkOutput struct{ *pulumi.OutputState }

func (NetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Network)(nil)).Elem()
}

func (o NetworkOutput) ToNetworkOutput() NetworkOutput {
	return o
}

func (o NetworkOutput) ToNetworkOutputWithContext(ctx context.Context) NetworkOutput {
	return o
}

type NetworkArrayOutput struct{ *pulumi.OutputState }

func (NetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Network)(nil)).Elem()
}

func (o NetworkArrayOutput) ToNetworkArrayOutput() NetworkArrayOutput {
	return o
}

func (o NetworkArrayOutput) ToNetworkArrayOutputWithContext(ctx context.Context) NetworkArrayOutput {
	return o
}

func (o NetworkArrayOutput) Index(i pulumi.IntInput) NetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Network {
		return vs[0].([]*Network)[vs[1].(int)]
	}).(NetworkOutput)
}

type NetworkMapOutput struct{ *pulumi.OutputState }

func (NetworkMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Network)(nil)).Elem()
}

func (o NetworkMapOutput) ToNetworkMapOutput() NetworkMapOutput {
	return o
}

func (o NetworkMapOutput) ToNetworkMapOutputWithContext(ctx context.Context) NetworkMapOutput {
	return o
}

func (o NetworkMapOutput) MapIndex(k pulumi.StringInput) NetworkOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Network {
		return vs[0].(map[string]*Network)[vs[1].(string)]
	}).(NetworkOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkInput)(nil)).Elem(), &Network{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkArrayInput)(nil)).Elem(), NetworkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkMapInput)(nil)).Elem(), NetworkMap{})
	pulumi.RegisterOutputType(NetworkOutput{})
	pulumi.RegisterOutputType(NetworkArrayOutput{})
	pulumi.RegisterOutputType(NetworkMapOutput{})
}
