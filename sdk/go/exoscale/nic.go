// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package exoscale

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides an Exoscale Compute instance [Private Network][privnet-doc] Interface (NIC) resource. This can be used to create, update and delete Compute instance NICs.
//
// !> **WARNING:** This resource is deprecated and will be removed in the next major version.
//
// ## Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-exoscale/sdk/go/exoscale"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		vm1, err := exoscale.NewCompute(ctx, "vm1", nil)
// 		if err != nil {
// 			return err
// 		}
// 		oobNetwork, err := exoscale.NewNetwork(ctx, "oobNetwork", nil)
// 		if err != nil {
// 			return err
// 		}
// 		_, err = exoscale.NewNIC(ctx, "oobNIC", &exoscale.NICArgs{
// 			ComputeId: vm1.ID(),
// 			NetworkId: oobNetwork.ID(),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// This resource is automatically imported when importing an `exoscale_compute` resource. [privnet-doc]https://community.exoscale.com/documentation/compute/private-networks/ [r-compute]compute.html [r-network]network.html
type NIC struct {
	pulumi.CustomResourceState

	// The [Compute instance][r-compute] ID.
	ComputeId pulumi.StringOutput `pulumi:"computeId"`
	Gateway   pulumi.StringOutput `pulumi:"gateway"`
	// The IP address to request as static DHCP lease if the NIC is attached to a *managed* Private Network (see the [`Network`][r-network] resource).
	IpAddress pulumi.StringOutput `pulumi:"ipAddress"`
	// The physical address (MAC) of the Compute instance NIC.
	MacAddress pulumi.StringOutput `pulumi:"macAddress"`
	Netmask    pulumi.StringOutput `pulumi:"netmask"`
	// The [Private Network][r-network] ID.
	NetworkId pulumi.StringOutput `pulumi:"networkId"`
}

// NewNIC registers a new resource with the given unique name, arguments, and options.
func NewNIC(ctx *pulumi.Context,
	name string, args *NICArgs, opts ...pulumi.ResourceOption) (*NIC, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ComputeId == nil {
		return nil, errors.New("invalid value for required argument 'ComputeId'")
	}
	if args.NetworkId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkId'")
	}
	var resource NIC
	err := ctx.RegisterResource("exoscale:index/nIC:NIC", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNIC gets an existing NIC resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNIC(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NICState, opts ...pulumi.ResourceOption) (*NIC, error) {
	var resource NIC
	err := ctx.ReadResource("exoscale:index/nIC:NIC", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NIC resources.
type nicState struct {
	// The [Compute instance][r-compute] ID.
	ComputeId *string `pulumi:"computeId"`
	Gateway   *string `pulumi:"gateway"`
	// The IP address to request as static DHCP lease if the NIC is attached to a *managed* Private Network (see the [`Network`][r-network] resource).
	IpAddress *string `pulumi:"ipAddress"`
	// The physical address (MAC) of the Compute instance NIC.
	MacAddress *string `pulumi:"macAddress"`
	Netmask    *string `pulumi:"netmask"`
	// The [Private Network][r-network] ID.
	NetworkId *string `pulumi:"networkId"`
}

type NICState struct {
	// The [Compute instance][r-compute] ID.
	ComputeId pulumi.StringPtrInput
	Gateway   pulumi.StringPtrInput
	// The IP address to request as static DHCP lease if the NIC is attached to a *managed* Private Network (see the [`Network`][r-network] resource).
	IpAddress pulumi.StringPtrInput
	// The physical address (MAC) of the Compute instance NIC.
	MacAddress pulumi.StringPtrInput
	Netmask    pulumi.StringPtrInput
	// The [Private Network][r-network] ID.
	NetworkId pulumi.StringPtrInput
}

func (NICState) ElementType() reflect.Type {
	return reflect.TypeOf((*nicState)(nil)).Elem()
}

type nicArgs struct {
	// The [Compute instance][r-compute] ID.
	ComputeId string `pulumi:"computeId"`
	// The IP address to request as static DHCP lease if the NIC is attached to a *managed* Private Network (see the [`Network`][r-network] resource).
	IpAddress *string `pulumi:"ipAddress"`
	// The [Private Network][r-network] ID.
	NetworkId string `pulumi:"networkId"`
}

// The set of arguments for constructing a NIC resource.
type NICArgs struct {
	// The [Compute instance][r-compute] ID.
	ComputeId pulumi.StringInput
	// The IP address to request as static DHCP lease if the NIC is attached to a *managed* Private Network (see the [`Network`][r-network] resource).
	IpAddress pulumi.StringPtrInput
	// The [Private Network][r-network] ID.
	NetworkId pulumi.StringInput
}

func (NICArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*nicArgs)(nil)).Elem()
}

type NICInput interface {
	pulumi.Input

	ToNICOutput() NICOutput
	ToNICOutputWithContext(ctx context.Context) NICOutput
}

func (*NIC) ElementType() reflect.Type {
	return reflect.TypeOf((**NIC)(nil)).Elem()
}

func (i *NIC) ToNICOutput() NICOutput {
	return i.ToNICOutputWithContext(context.Background())
}

func (i *NIC) ToNICOutputWithContext(ctx context.Context) NICOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NICOutput)
}

// NICArrayInput is an input type that accepts NICArray and NICArrayOutput values.
// You can construct a concrete instance of `NICArrayInput` via:
//
//          NICArray{ NICArgs{...} }
type NICArrayInput interface {
	pulumi.Input

	ToNICArrayOutput() NICArrayOutput
	ToNICArrayOutputWithContext(context.Context) NICArrayOutput
}

type NICArray []NICInput

func (NICArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NIC)(nil)).Elem()
}

func (i NICArray) ToNICArrayOutput() NICArrayOutput {
	return i.ToNICArrayOutputWithContext(context.Background())
}

func (i NICArray) ToNICArrayOutputWithContext(ctx context.Context) NICArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NICArrayOutput)
}

// NICMapInput is an input type that accepts NICMap and NICMapOutput values.
// You can construct a concrete instance of `NICMapInput` via:
//
//          NICMap{ "key": NICArgs{...} }
type NICMapInput interface {
	pulumi.Input

	ToNICMapOutput() NICMapOutput
	ToNICMapOutputWithContext(context.Context) NICMapOutput
}

type NICMap map[string]NICInput

func (NICMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NIC)(nil)).Elem()
}

func (i NICMap) ToNICMapOutput() NICMapOutput {
	return i.ToNICMapOutputWithContext(context.Background())
}

func (i NICMap) ToNICMapOutputWithContext(ctx context.Context) NICMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NICMapOutput)
}

type NICOutput struct{ *pulumi.OutputState }

func (NICOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NIC)(nil)).Elem()
}

func (o NICOutput) ToNICOutput() NICOutput {
	return o
}

func (o NICOutput) ToNICOutputWithContext(ctx context.Context) NICOutput {
	return o
}

type NICArrayOutput struct{ *pulumi.OutputState }

func (NICArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NIC)(nil)).Elem()
}

func (o NICArrayOutput) ToNICArrayOutput() NICArrayOutput {
	return o
}

func (o NICArrayOutput) ToNICArrayOutputWithContext(ctx context.Context) NICArrayOutput {
	return o
}

func (o NICArrayOutput) Index(i pulumi.IntInput) NICOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NIC {
		return vs[0].([]*NIC)[vs[1].(int)]
	}).(NICOutput)
}

type NICMapOutput struct{ *pulumi.OutputState }

func (NICMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NIC)(nil)).Elem()
}

func (o NICMapOutput) ToNICMapOutput() NICMapOutput {
	return o
}

func (o NICMapOutput) ToNICMapOutputWithContext(ctx context.Context) NICMapOutput {
	return o
}

func (o NICMapOutput) MapIndex(k pulumi.StringInput) NICOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NIC {
		return vs[0].(map[string]*NIC)[vs[1].(string)]
	}).(NICOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NICInput)(nil)).Elem(), &NIC{})
	pulumi.RegisterInputType(reflect.TypeOf((*NICArrayInput)(nil)).Elem(), NICArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NICMapInput)(nil)).Elem(), NICMap{})
	pulumi.RegisterOutputType(NICOutput{})
	pulumi.RegisterOutputType(NICArrayOutput{})
	pulumi.RegisterOutputType(NICMapOutput{})
}
