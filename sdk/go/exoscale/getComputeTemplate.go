// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package exoscale

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides information on a Compute [template][templates] for use in other resources such as a [`Compute`][r-compute] resource.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-exoscale/sdk/go/exoscale"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		zone := "ch-gva-2"
// 		opt0 := "Linux Ubuntu 20.04 LTS 64-bit"
// 		ubuntu, err := exoscale.GetComputeTemplate(ctx, &GetComputeTemplateArgs{
// 			Zone: zone,
// 			Name: &opt0,
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		_, err = exoscale.NewComputeInstance(ctx, "my-server", &exoscale.ComputeInstanceArgs{
// 			Zone:       pulumi.String(zone),
// 			Type:       pulumi.String("standard.medium"),
// 			TemplateId: pulumi.String(ubuntu.Id),
// 			DiskSize:   pulumi.Int(20),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
func GetComputeTemplate(ctx *pulumi.Context, args *GetComputeTemplateArgs, opts ...pulumi.InvokeOption) (*GetComputeTemplateResult, error) {
	var rv GetComputeTemplateResult
	err := ctx.Invoke("exoscale:index/getComputeTemplate:getComputeTemplate", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getComputeTemplate.
type GetComputeTemplateArgs struct {
	// A Compute template search filter, must be either `featured` (official Exoscale templates), `community` (community-contributed templates) or `mine` (custom templates private to my organization). Default is `featured`.
	Filter *string `pulumi:"filter"`
	// The ID of the Compute template (conflicts with `name`).
	Id *string `pulumi:"id"`
	// The name of the Compute template (conflicts with `id`).
	Name *string `pulumi:"name"`
	// The name of the [zone][zone] where to look for the Compute template.
	Zone string `pulumi:"zone"`
}

// A collection of values returned by getComputeTemplate.
type GetComputeTemplateResult struct {
	Filter *string `pulumi:"filter"`
	Id     *string `pulumi:"id"`
	Name   *string `pulumi:"name"`
	// Username to use to log into a Compute Instance based on this template
	Username string `pulumi:"username"`
	Zone     string `pulumi:"zone"`
}

func GetComputeTemplateOutput(ctx *pulumi.Context, args GetComputeTemplateOutputArgs, opts ...pulumi.InvokeOption) GetComputeTemplateResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetComputeTemplateResult, error) {
			args := v.(GetComputeTemplateArgs)
			r, err := GetComputeTemplate(ctx, &args, opts...)
			return *r, err
		}).(GetComputeTemplateResultOutput)
}

// A collection of arguments for invoking getComputeTemplate.
type GetComputeTemplateOutputArgs struct {
	// A Compute template search filter, must be either `featured` (official Exoscale templates), `community` (community-contributed templates) or `mine` (custom templates private to my organization). Default is `featured`.
	Filter pulumi.StringPtrInput `pulumi:"filter"`
	// The ID of the Compute template (conflicts with `name`).
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The name of the Compute template (conflicts with `id`).
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The name of the [zone][zone] where to look for the Compute template.
	Zone pulumi.StringInput `pulumi:"zone"`
}

func (GetComputeTemplateOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetComputeTemplateArgs)(nil)).Elem()
}

// A collection of values returned by getComputeTemplate.
type GetComputeTemplateResultOutput struct{ *pulumi.OutputState }

func (GetComputeTemplateResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetComputeTemplateResult)(nil)).Elem()
}

func (o GetComputeTemplateResultOutput) ToGetComputeTemplateResultOutput() GetComputeTemplateResultOutput {
	return o
}

func (o GetComputeTemplateResultOutput) ToGetComputeTemplateResultOutputWithContext(ctx context.Context) GetComputeTemplateResultOutput {
	return o
}

func (o GetComputeTemplateResultOutput) Filter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetComputeTemplateResult) *string { return v.Filter }).(pulumi.StringPtrOutput)
}

func (o GetComputeTemplateResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetComputeTemplateResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o GetComputeTemplateResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetComputeTemplateResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Username to use to log into a Compute Instance based on this template
func (o GetComputeTemplateResultOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v GetComputeTemplateResult) string { return v.Username }).(pulumi.StringOutput)
}

func (o GetComputeTemplateResultOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v GetComputeTemplateResult) string { return v.Zone }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetComputeTemplateResultOutput{})
}
