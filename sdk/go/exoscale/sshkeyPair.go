// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package exoscale

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides an Exoscale [SSH Keypair][ssh-keypairs-doc] resource. This can be used to create and delete SSH Keypairs.
//
// !> **WARNING:** This resource is deprecated and will be removed in the next major version.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-exoscale/sdk/go/exoscale"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := exoscale.NewSSHKeyPair(ctx, "admin", &exoscale.SSHKeyPairArgs{
// 			PublicKey: pulumi.String("ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDGRY..."),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// An existing SSH Keypair can be imported as a resource by nameconsole
//
// ```sh
//  $ pulumi import exoscale:index/sSHKeyPair:SSHKeyPair mykey my-key
// ```
//
//  [ssh-keypairs-doc]https://community.exoscale.com/documentation/compute/ssh-keypairs/
type SSHKeyPair struct {
	pulumi.CustomResourceState

	// The unique identifier of the SSH Keypair.
	Fingerprint pulumi.StringOutput `pulumi:"fingerprint"`
	// The name of the SSH Keypair.
	Name pulumi.StringOutput `pulumi:"name"`
	// The SSH private key generated if no public key was provided.
	PrivateKey pulumi.StringOutput `pulumi:"privateKey"`
	// A SSH public key that will be copied into the instances at **first** boot. If not provided, a SSH keypair is generated and the is saved locally (see the `privateKey` attribute).
	PublicKey pulumi.StringPtrOutput `pulumi:"publicKey"`
}

// NewSSHKeyPair registers a new resource with the given unique name, arguments, and options.
func NewSSHKeyPair(ctx *pulumi.Context,
	name string, args *SSHKeyPairArgs, opts ...pulumi.ResourceOption) (*SSHKeyPair, error) {
	if args == nil {
		args = &SSHKeyPairArgs{}
	}

	var resource SSHKeyPair
	err := ctx.RegisterResource("exoscale:index/sSHKeyPair:SSHKeyPair", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSSHKeyPair gets an existing SSHKeyPair resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSSHKeyPair(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SSHKeyPairState, opts ...pulumi.ResourceOption) (*SSHKeyPair, error) {
	var resource SSHKeyPair
	err := ctx.ReadResource("exoscale:index/sSHKeyPair:SSHKeyPair", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SSHKeyPair resources.
type sshkeyPairState struct {
	// The unique identifier of the SSH Keypair.
	Fingerprint *string `pulumi:"fingerprint"`
	// The name of the SSH Keypair.
	Name *string `pulumi:"name"`
	// The SSH private key generated if no public key was provided.
	PrivateKey *string `pulumi:"privateKey"`
	// A SSH public key that will be copied into the instances at **first** boot. If not provided, a SSH keypair is generated and the is saved locally (see the `privateKey` attribute).
	PublicKey *string `pulumi:"publicKey"`
}

type SSHKeyPairState struct {
	// The unique identifier of the SSH Keypair.
	Fingerprint pulumi.StringPtrInput
	// The name of the SSH Keypair.
	Name pulumi.StringPtrInput
	// The SSH private key generated if no public key was provided.
	PrivateKey pulumi.StringPtrInput
	// A SSH public key that will be copied into the instances at **first** boot. If not provided, a SSH keypair is generated and the is saved locally (see the `privateKey` attribute).
	PublicKey pulumi.StringPtrInput
}

func (SSHKeyPairState) ElementType() reflect.Type {
	return reflect.TypeOf((*sshkeyPairState)(nil)).Elem()
}

type sshkeyPairArgs struct {
	// The name of the SSH Keypair.
	Name *string `pulumi:"name"`
	// A SSH public key that will be copied into the instances at **first** boot. If not provided, a SSH keypair is generated and the is saved locally (see the `privateKey` attribute).
	PublicKey *string `pulumi:"publicKey"`
}

// The set of arguments for constructing a SSHKeyPair resource.
type SSHKeyPairArgs struct {
	// The name of the SSH Keypair.
	Name pulumi.StringPtrInput
	// A SSH public key that will be copied into the instances at **first** boot. If not provided, a SSH keypair is generated and the is saved locally (see the `privateKey` attribute).
	PublicKey pulumi.StringPtrInput
}

func (SSHKeyPairArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sshkeyPairArgs)(nil)).Elem()
}

type SSHKeyPairInput interface {
	pulumi.Input

	ToSSHKeyPairOutput() SSHKeyPairOutput
	ToSSHKeyPairOutputWithContext(ctx context.Context) SSHKeyPairOutput
}

func (*SSHKeyPair) ElementType() reflect.Type {
	return reflect.TypeOf((**SSHKeyPair)(nil)).Elem()
}

func (i *SSHKeyPair) ToSSHKeyPairOutput() SSHKeyPairOutput {
	return i.ToSSHKeyPairOutputWithContext(context.Background())
}

func (i *SSHKeyPair) ToSSHKeyPairOutputWithContext(ctx context.Context) SSHKeyPairOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SSHKeyPairOutput)
}

// SSHKeyPairArrayInput is an input type that accepts SSHKeyPairArray and SSHKeyPairArrayOutput values.
// You can construct a concrete instance of `SSHKeyPairArrayInput` via:
//
//          SSHKeyPairArray{ SSHKeyPairArgs{...} }
type SSHKeyPairArrayInput interface {
	pulumi.Input

	ToSSHKeyPairArrayOutput() SSHKeyPairArrayOutput
	ToSSHKeyPairArrayOutputWithContext(context.Context) SSHKeyPairArrayOutput
}

type SSHKeyPairArray []SSHKeyPairInput

func (SSHKeyPairArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SSHKeyPair)(nil)).Elem()
}

func (i SSHKeyPairArray) ToSSHKeyPairArrayOutput() SSHKeyPairArrayOutput {
	return i.ToSSHKeyPairArrayOutputWithContext(context.Background())
}

func (i SSHKeyPairArray) ToSSHKeyPairArrayOutputWithContext(ctx context.Context) SSHKeyPairArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SSHKeyPairArrayOutput)
}

// SSHKeyPairMapInput is an input type that accepts SSHKeyPairMap and SSHKeyPairMapOutput values.
// You can construct a concrete instance of `SSHKeyPairMapInput` via:
//
//          SSHKeyPairMap{ "key": SSHKeyPairArgs{...} }
type SSHKeyPairMapInput interface {
	pulumi.Input

	ToSSHKeyPairMapOutput() SSHKeyPairMapOutput
	ToSSHKeyPairMapOutputWithContext(context.Context) SSHKeyPairMapOutput
}

type SSHKeyPairMap map[string]SSHKeyPairInput

func (SSHKeyPairMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SSHKeyPair)(nil)).Elem()
}

func (i SSHKeyPairMap) ToSSHKeyPairMapOutput() SSHKeyPairMapOutput {
	return i.ToSSHKeyPairMapOutputWithContext(context.Background())
}

func (i SSHKeyPairMap) ToSSHKeyPairMapOutputWithContext(ctx context.Context) SSHKeyPairMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SSHKeyPairMapOutput)
}

type SSHKeyPairOutput struct{ *pulumi.OutputState }

func (SSHKeyPairOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SSHKeyPair)(nil)).Elem()
}

func (o SSHKeyPairOutput) ToSSHKeyPairOutput() SSHKeyPairOutput {
	return o
}

func (o SSHKeyPairOutput) ToSSHKeyPairOutputWithContext(ctx context.Context) SSHKeyPairOutput {
	return o
}

type SSHKeyPairArrayOutput struct{ *pulumi.OutputState }

func (SSHKeyPairArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SSHKeyPair)(nil)).Elem()
}

func (o SSHKeyPairArrayOutput) ToSSHKeyPairArrayOutput() SSHKeyPairArrayOutput {
	return o
}

func (o SSHKeyPairArrayOutput) ToSSHKeyPairArrayOutputWithContext(ctx context.Context) SSHKeyPairArrayOutput {
	return o
}

func (o SSHKeyPairArrayOutput) Index(i pulumi.IntInput) SSHKeyPairOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SSHKeyPair {
		return vs[0].([]*SSHKeyPair)[vs[1].(int)]
	}).(SSHKeyPairOutput)
}

type SSHKeyPairMapOutput struct{ *pulumi.OutputState }

func (SSHKeyPairMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SSHKeyPair)(nil)).Elem()
}

func (o SSHKeyPairMapOutput) ToSSHKeyPairMapOutput() SSHKeyPairMapOutput {
	return o
}

func (o SSHKeyPairMapOutput) ToSSHKeyPairMapOutputWithContext(ctx context.Context) SSHKeyPairMapOutput {
	return o
}

func (o SSHKeyPairMapOutput) MapIndex(k pulumi.StringInput) SSHKeyPairOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SSHKeyPair {
		return vs[0].(map[string]*SSHKeyPair)[vs[1].(string)]
	}).(SSHKeyPairOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SSHKeyPairInput)(nil)).Elem(), &SSHKeyPair{})
	pulumi.RegisterInputType(reflect.TypeOf((*SSHKeyPairArrayInput)(nil)).Elem(), SSHKeyPairArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SSHKeyPairMapInput)(nil)).Elem(), SSHKeyPairMap{})
	pulumi.RegisterOutputType(SSHKeyPairOutput{})
	pulumi.RegisterOutputType(SSHKeyPairArrayOutput{})
	pulumi.RegisterOutputType(SSHKeyPairMapOutput{})
}
