// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi.Utilities;

namespace Pulumi.Exoscale
{
    public static class GetNLB
    {
        /// <summary>
        /// Provides information on a [Network Load Balancer][nlb-doc] (NLB) instance for use in other resources such as a [`exoscale.NLBService`][r-nlb_service] resource.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Exoscale = Pulumi.Exoscale;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var prod = Output.Create(Exoscale.GetNLB.InvokeAsync(new Exoscale.GetNLBArgs
        ///         {
        ///             Zone = "ch-gva-2",
        ///             Name = "prod",
        ///         }));
        ///         this.NlbProdIpAddress = prod.Apply(prod =&gt; prod.IpAddress);
        ///     }
        /// 
        ///     [Output("nlbProdIpAddress")]
        ///     public Output&lt;string&gt; NlbProdIpAddress { get; set; }
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetNLBResult> InvokeAsync(GetNLBArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetNLBResult>("exoscale:index/getNLB:getNLB", args ?? new GetNLBArgs(), options.WithVersion());

        /// <summary>
        /// Provides information on a [Network Load Balancer][nlb-doc] (NLB) instance for use in other resources such as a [`exoscale.NLBService`][r-nlb_service] resource.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Exoscale = Pulumi.Exoscale;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var prod = Output.Create(Exoscale.GetNLB.InvokeAsync(new Exoscale.GetNLBArgs
        ///         {
        ///             Zone = "ch-gva-2",
        ///             Name = "prod",
        ///         }));
        ///         this.NlbProdIpAddress = prod.Apply(prod =&gt; prod.IpAddress);
        ///     }
        /// 
        ///     [Output("nlbProdIpAddress")]
        ///     public Output&lt;string&gt; NlbProdIpAddress { get; set; }
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetNLBResult> Invoke(GetNLBInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetNLBResult>("exoscale:index/getNLB:getNLB", args ?? new GetNLBInvokeArgs(), options.WithVersion());
    }


    public sealed class GetNLBArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the NLB (conflicts with `name`).
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// The name of NLB (conflicts with `id`).
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// The [zone][zone] of the NLB.
        /// </summary>
        [Input("zone", required: true)]
        public string Zone { get; set; } = null!;

        public GetNLBArgs()
        {
        }
    }

    public sealed class GetNLBInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the NLB (conflicts with `name`).
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// The name of NLB (conflicts with `id`).
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The [zone][zone] of the NLB.
        /// </summary>
        [Input("zone", required: true)]
        public Input<string> Zone { get; set; } = null!;

        public GetNLBInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetNLBResult
    {
        /// <summary>
        /// The creation date of the NLB.
        /// </summary>
        public readonly string CreatedAt;
        /// <summary>
        /// The description of the NLB.
        /// </summary>
        public readonly string Description;
        public readonly string? Id;
        /// <summary>
        /// The public IP address of the NLB.
        /// </summary>
        public readonly string IpAddress;
        public readonly string? Name;
        /// <summary>
        /// The current state of the NLB.
        /// </summary>
        public readonly string State;
        public readonly string Zone;

        [OutputConstructor]
        private GetNLBResult(
            string createdAt,

            string description,

            string? id,

            string ipAddress,

            string? name,

            string state,

            string zone)
        {
            CreatedAt = createdAt;
            Description = description;
            Id = id;
            IpAddress = ipAddress;
            Name = name;
            State = state;
            Zone = zone;
        }
    }
}
