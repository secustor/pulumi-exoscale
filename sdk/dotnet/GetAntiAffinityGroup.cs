// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Exoscale
{
    public static class GetAntiAffinityGroup
    {
        /// <summary>
        /// Provides information on an [Anti-Affinity Group][aag-doc] for use in other resources such as a [`exoscale.Compute`][r-compute] resource.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Exoscale = Pulumi.Exoscale;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var zone = "ch-gva-2";
        ///         var web = Output.Create(Exoscale.GetAntiAffinityGroup.InvokeAsync(new Exoscale.GetAntiAffinityGroupArgs
        ///         {
        ///             Name = "web",
        ///         }));
        ///         var ubuntu = Output.Create(Exoscale.GetComputeTemplate.InvokeAsync(new Exoscale.GetComputeTemplateArgs
        ///         {
        ///             Zone = zone,
        ///             Name = "Linux Ubuntu 20.04 LTS 64-bit",
        ///         }));
        ///         var my_server = new Exoscale.ComputeInstance("my-server", new Exoscale.ComputeInstanceArgs
        ///         {
        ///             Zone = zone,
        ///             Type = "standard.medium",
        ///             TemplateId = ubuntu.Apply(ubuntu =&gt; ubuntu.Id),
        ///             DiskSize = 20,
        ///             AntiAffinityGroupIds = 
        ///             {
        ///                 web.Apply(web =&gt; web.Id),
        ///             },
        ///         });
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetAntiAffinityGroupResult> InvokeAsync(GetAntiAffinityGroupArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetAntiAffinityGroupResult>("exoscale:index/getAntiAffinityGroup:getAntiAffinityGroup", args ?? new GetAntiAffinityGroupArgs(), options.WithDefaults());

        /// <summary>
        /// Provides information on an [Anti-Affinity Group][aag-doc] for use in other resources such as a [`exoscale.Compute`][r-compute] resource.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Exoscale = Pulumi.Exoscale;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var zone = "ch-gva-2";
        ///         var web = Output.Create(Exoscale.GetAntiAffinityGroup.InvokeAsync(new Exoscale.GetAntiAffinityGroupArgs
        ///         {
        ///             Name = "web",
        ///         }));
        ///         var ubuntu = Output.Create(Exoscale.GetComputeTemplate.InvokeAsync(new Exoscale.GetComputeTemplateArgs
        ///         {
        ///             Zone = zone,
        ///             Name = "Linux Ubuntu 20.04 LTS 64-bit",
        ///         }));
        ///         var my_server = new Exoscale.ComputeInstance("my-server", new Exoscale.ComputeInstanceArgs
        ///         {
        ///             Zone = zone,
        ///             Type = "standard.medium",
        ///             TemplateId = ubuntu.Apply(ubuntu =&gt; ubuntu.Id),
        ///             DiskSize = 20,
        ///             AntiAffinityGroupIds = 
        ///             {
        ///                 web.Apply(web =&gt; web.Id),
        ///             },
        ///         });
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetAntiAffinityGroupResult> Invoke(GetAntiAffinityGroupInvokeArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetAntiAffinityGroupResult>("exoscale:index/getAntiAffinityGroup:getAntiAffinityGroup", args ?? new GetAntiAffinityGroupInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAntiAffinityGroupArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the Anti-Affinity Group (conflicts with `name`).
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// The name of the Anti-Affinity Group (conflicts with `id`).
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        public GetAntiAffinityGroupArgs()
        {
        }
    }

    public sealed class GetAntiAffinityGroupInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the Anti-Affinity Group (conflicts with `name`).
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// The name of the Anti-Affinity Group (conflicts with `id`).
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public GetAntiAffinityGroupInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetAntiAffinityGroupResult
    {
        public readonly string? Id;
        /// <summary>
        /// A list of Compute instance IDs belonging to the Anti-Affinity Group.
        /// </summary>
        public readonly ImmutableArray<string> Instances;
        public readonly string? Name;

        [OutputConstructor]
        private GetAntiAffinityGroupResult(
            string? id,

            ImmutableArray<string> instances,

            string? name)
        {
            Id = id;
            Instances = instances;
            Name = name;
        }
    }
}
