// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Exoscale
{
    /// <summary>
    /// Provides a resource for assigning an existing Exoscale [Elastic IP][r-ipaddress] to a [Compute instance][r-compute].
    /// 
    /// &gt; **NOTE:** The network interfaces of the Compute instance itself still have to be configured accordingly (unless using a *managed* Elastic IP).
    /// 
    /// !&gt; **WARNING:** This resource is deprecated and will be removed in the next major version.
    /// 
    /// ## Import
    /// 
    /// This resource is automatically imported when importing an `exoscale_compute` resource. [r-compute]compute.html [r-ipaddress]ipaddress.html
    /// </summary>
    [ExoscaleResourceType("exoscale:index/secondaryIPAddress:SecondaryIPAddress")]
    public partial class SecondaryIPAddress : Pulumi.CustomResource
    {
        /// <summary>
        /// The ID of the [Compute instance][r-compute].
        /// </summary>
        [Output("computeId")]
        public Output<string> ComputeId { get; private set; } = null!;

        /// <summary>
        /// The [Elastic IP][r-ipaddress] address to assign.
        /// </summary>
        [Output("ipAddress")]
        public Output<string> IpAddress { get; private set; } = null!;

        /// <summary>
        /// The ID of the Network the Compute instance NIC is attached to.
        /// </summary>
        [Output("networkId")]
        public Output<string> NetworkId { get; private set; } = null!;

        /// <summary>
        /// The ID of the NIC.
        /// </summary>
        [Output("nicId")]
        public Output<string> NicId { get; private set; } = null!;


        /// <summary>
        /// Create a SecondaryIPAddress resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SecondaryIPAddress(string name, SecondaryIPAddressArgs args, CustomResourceOptions? options = null)
            : base("exoscale:index/secondaryIPAddress:SecondaryIPAddress", name, args ?? new SecondaryIPAddressArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SecondaryIPAddress(string name, Input<string> id, SecondaryIPAddressState? state = null, CustomResourceOptions? options = null)
            : base("exoscale:index/secondaryIPAddress:SecondaryIPAddress", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SecondaryIPAddress resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SecondaryIPAddress Get(string name, Input<string> id, SecondaryIPAddressState? state = null, CustomResourceOptions? options = null)
        {
            return new SecondaryIPAddress(name, id, state, options);
        }
    }

    public sealed class SecondaryIPAddressArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the [Compute instance][r-compute].
        /// </summary>
        [Input("computeId", required: true)]
        public Input<string> ComputeId { get; set; } = null!;

        /// <summary>
        /// The [Elastic IP][r-ipaddress] address to assign.
        /// </summary>
        [Input("ipAddress", required: true)]
        public Input<string> IpAddress { get; set; } = null!;

        public SecondaryIPAddressArgs()
        {
        }
    }

    public sealed class SecondaryIPAddressState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the [Compute instance][r-compute].
        /// </summary>
        [Input("computeId")]
        public Input<string>? ComputeId { get; set; }

        /// <summary>
        /// The [Elastic IP][r-ipaddress] address to assign.
        /// </summary>
        [Input("ipAddress")]
        public Input<string>? IpAddress { get; set; }

        /// <summary>
        /// The ID of the Network the Compute instance NIC is attached to.
        /// </summary>
        [Input("networkId")]
        public Input<string>? NetworkId { get; set; }

        /// <summary>
        /// The ID of the NIC.
        /// </summary>
        [Input("nicId")]
        public Input<string>? NicId { get; set; }

        public SecondaryIPAddressState()
        {
        }
    }
}
