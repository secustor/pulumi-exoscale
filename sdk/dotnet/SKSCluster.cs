// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Exoscale
{
    /// <summary>
    /// Provides an Exoscale [SKS][sks-doc] cluster resource. This can be used to create, modify, and delete SKS clusters.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Exoscale = Pulumi.Exoscale;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var zone = "de-fra-1";
    ///         var prod = new Exoscale.SKSCluster("prod", new Exoscale.SKSClusterArgs
    ///         {
    ///             Zone = zone,
    ///             Version = "1.20.2",
    ///             Labels = 
    ///             {
    ///                 { "env", "prod" },
    ///             },
    ///         });
    ///         this.SksEndpoint = prod.Endpoint;
    ///     }
    /// 
    ///     [Output("sksEndpoint")]
    ///     public Output&lt;string&gt; SksEndpoint { get; set; }
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// An existing SKS cluster can be imported as a resource by specifying `ID@ZONE`console
    /// 
    /// ```sh
    ///  $ pulumi import exoscale:index/sKSCluster:SKSCluster example eb556678-ec59-4be6-8c54-0406ae0f6da6@de-fra-1
    /// ```
    /// 
    ///  [cni]https://www.cni.dev/ [exo-ccm]https://github.com/exoscale/exoscale-cloud-controller-manager [k8s-ms]https://github.com/kubernetes-sigs/metrics-server [r-sks_nodepool]sks_nodepool.html [sks-doc]https://community.exoscale.com/documentation/sks/ [zone]https://www.exoscale.com/datacenters/
    /// </summary>
    [ExoscaleResourceType("exoscale:index/sKSCluster:SKSCluster")]
    public partial class SKSCluster : Pulumi.CustomResource
    {
        [Output("addons")]
        public Output<ImmutableArray<string>> Addons { get; private set; } = null!;

        /// <summary>
        /// Enable automatic upgrading of the SKS cluster control plane Kubernetes version (default: `false`).
        /// </summary>
        [Output("autoUpgrade")]
        public Output<bool?> AutoUpgrade { get; private set; } = null!;

        /// <summary>
        /// The Kubernetes [CNI][cni] plugin to be deployed in the SKS cluster control plane (default: `"calico"`). Can only be set during creation.
        /// </summary>
        [Output("cni")]
        public Output<string?> Cni { get; private set; } = null!;

        /// <summary>
        /// The creation date of the SKS cluster.
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// The description of the SKS cluster.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The Kubernetes public API endpoint of the SKS cluster.
        /// </summary>
        [Output("endpoint")]
        public Output<string> Endpoint { get; private set; } = null!;

        /// <summary>
        /// Deploy the Exoscale [Cloud Controller Manager][exo-ccm] in the SKS cluster control plane (default: `true`). Can only be set during creation.
        /// </summary>
        [Output("exoscaleCcm")]
        public Output<bool?> ExoscaleCcm { get; private set; } = null!;

        /// <summary>
        /// A map of key/value labels.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        /// <summary>
        /// Deploy the [Kubernetes Metrics Server][k8s-ms] in the SKS cluster control plane (default: `true`). Can only be set during creation.
        /// </summary>
        [Output("metricsServer")]
        public Output<bool?> MetricsServer { get; private set; } = null!;

        /// <summary>
        /// The name of the SKS cluster.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The list of [SKS Nodepools][r-sks_nodepool] (IDs) attached to the SKS cluster.
        /// </summary>
        [Output("nodepools")]
        public Output<ImmutableArray<string>> Nodepools { get; private set; } = null!;

        /// <summary>
        /// An OpenID Connect configuration to provide to the Kubernetes API server. Can only be set during creation. Structure is documented below.
        /// </summary>
        [Output("oidc")]
        public Output<Outputs.SKSClusterOidc> Oidc { get; private set; } = null!;

        /// <summary>
        /// The service level of the SKS cluster control plane (default: `"pro"`). Can only be set during creation.
        /// </summary>
        [Output("serviceLevel")]
        public Output<string?> ServiceLevel { get; private set; } = null!;

        /// <summary>
        /// The current state of the SKS cluster.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// The Kubernetes version of the SKS cluster control plane (default: latest version available from the API). Can only be set during creation.
        /// </summary>
        [Output("version")]
        public Output<string> Version { get; private set; } = null!;

        /// <summary>
        /// The name of the [zone][zone] to deploy the SKS cluster into.
        /// </summary>
        [Output("zone")]
        public Output<string> Zone { get; private set; } = null!;


        /// <summary>
        /// Create a SKSCluster resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SKSCluster(string name, SKSClusterArgs args, CustomResourceOptions? options = null)
            : base("exoscale:index/sKSCluster:SKSCluster", name, args ?? new SKSClusterArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SKSCluster(string name, Input<string> id, SKSClusterState? state = null, CustomResourceOptions? options = null)
            : base("exoscale:index/sKSCluster:SKSCluster", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SKSCluster resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SKSCluster Get(string name, Input<string> id, SKSClusterState? state = null, CustomResourceOptions? options = null)
        {
            return new SKSCluster(name, id, state, options);
        }
    }

    public sealed class SKSClusterArgs : Pulumi.ResourceArgs
    {
        [Input("addons")]
        private InputList<string>? _addons;
        [Obsolete(@"This attribute has been replaced by `exoscale_ccm`/`metrics_server` attributes, it will be removed in a future release.")]
        public InputList<string> Addons
        {
            get => _addons ?? (_addons = new InputList<string>());
            set => _addons = value;
        }

        /// <summary>
        /// Enable automatic upgrading of the SKS cluster control plane Kubernetes version (default: `false`).
        /// </summary>
        [Input("autoUpgrade")]
        public Input<bool>? AutoUpgrade { get; set; }

        /// <summary>
        /// The Kubernetes [CNI][cni] plugin to be deployed in the SKS cluster control plane (default: `"calico"`). Can only be set during creation.
        /// </summary>
        [Input("cni")]
        public Input<string>? Cni { get; set; }

        /// <summary>
        /// The description of the SKS cluster.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Deploy the Exoscale [Cloud Controller Manager][exo-ccm] in the SKS cluster control plane (default: `true`). Can only be set during creation.
        /// </summary>
        [Input("exoscaleCcm")]
        public Input<bool>? ExoscaleCcm { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// A map of key/value labels.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Deploy the [Kubernetes Metrics Server][k8s-ms] in the SKS cluster control plane (default: `true`). Can only be set during creation.
        /// </summary>
        [Input("metricsServer")]
        public Input<bool>? MetricsServer { get; set; }

        /// <summary>
        /// The name of the SKS cluster.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// An OpenID Connect configuration to provide to the Kubernetes API server. Can only be set during creation. Structure is documented below.
        /// </summary>
        [Input("oidc")]
        public Input<Inputs.SKSClusterOidcArgs>? Oidc { get; set; }

        /// <summary>
        /// The service level of the SKS cluster control plane (default: `"pro"`). Can only be set during creation.
        /// </summary>
        [Input("serviceLevel")]
        public Input<string>? ServiceLevel { get; set; }

        /// <summary>
        /// The Kubernetes version of the SKS cluster control plane (default: latest version available from the API). Can only be set during creation.
        /// </summary>
        [Input("version")]
        public Input<string>? Version { get; set; }

        /// <summary>
        /// The name of the [zone][zone] to deploy the SKS cluster into.
        /// </summary>
        [Input("zone", required: true)]
        public Input<string> Zone { get; set; } = null!;

        public SKSClusterArgs()
        {
        }
    }

    public sealed class SKSClusterState : Pulumi.ResourceArgs
    {
        [Input("addons")]
        private InputList<string>? _addons;
        [Obsolete(@"This attribute has been replaced by `exoscale_ccm`/`metrics_server` attributes, it will be removed in a future release.")]
        public InputList<string> Addons
        {
            get => _addons ?? (_addons = new InputList<string>());
            set => _addons = value;
        }

        /// <summary>
        /// Enable automatic upgrading of the SKS cluster control plane Kubernetes version (default: `false`).
        /// </summary>
        [Input("autoUpgrade")]
        public Input<bool>? AutoUpgrade { get; set; }

        /// <summary>
        /// The Kubernetes [CNI][cni] plugin to be deployed in the SKS cluster control plane (default: `"calico"`). Can only be set during creation.
        /// </summary>
        [Input("cni")]
        public Input<string>? Cni { get; set; }

        /// <summary>
        /// The creation date of the SKS cluster.
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// The description of the SKS cluster.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The Kubernetes public API endpoint of the SKS cluster.
        /// </summary>
        [Input("endpoint")]
        public Input<string>? Endpoint { get; set; }

        /// <summary>
        /// Deploy the Exoscale [Cloud Controller Manager][exo-ccm] in the SKS cluster control plane (default: `true`). Can only be set during creation.
        /// </summary>
        [Input("exoscaleCcm")]
        public Input<bool>? ExoscaleCcm { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// A map of key/value labels.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Deploy the [Kubernetes Metrics Server][k8s-ms] in the SKS cluster control plane (default: `true`). Can only be set during creation.
        /// </summary>
        [Input("metricsServer")]
        public Input<bool>? MetricsServer { get; set; }

        /// <summary>
        /// The name of the SKS cluster.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("nodepools")]
        private InputList<string>? _nodepools;

        /// <summary>
        /// The list of [SKS Nodepools][r-sks_nodepool] (IDs) attached to the SKS cluster.
        /// </summary>
        public InputList<string> Nodepools
        {
            get => _nodepools ?? (_nodepools = new InputList<string>());
            set => _nodepools = value;
        }

        /// <summary>
        /// An OpenID Connect configuration to provide to the Kubernetes API server. Can only be set during creation. Structure is documented below.
        /// </summary>
        [Input("oidc")]
        public Input<Inputs.SKSClusterOidcGetArgs>? Oidc { get; set; }

        /// <summary>
        /// The service level of the SKS cluster control plane (default: `"pro"`). Can only be set during creation.
        /// </summary>
        [Input("serviceLevel")]
        public Input<string>? ServiceLevel { get; set; }

        /// <summary>
        /// The current state of the SKS cluster.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// The Kubernetes version of the SKS cluster control plane (default: latest version available from the API). Can only be set during creation.
        /// </summary>
        [Input("version")]
        public Input<string>? Version { get; set; }

        /// <summary>
        /// The name of the [zone][zone] to deploy the SKS cluster into.
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public SKSClusterState()
        {
        }
    }
}
