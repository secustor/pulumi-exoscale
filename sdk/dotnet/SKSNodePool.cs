// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Exoscale
{
    /// <summary>
    /// Provides an Exoscale [SKS][sks-doc] Nodepool resource. This can be used to create, modify, and delete SKS Nodepools.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Exoscale = Pulumi.Exoscale;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var zone = "de-fra-1";
    ///         var sksSecurityGroup = new Exoscale.SecurityGroup("sksSecurityGroup", new Exoscale.SecurityGroupArgs
    ///         {
    ///         });
    ///         var sksSecurityGroupRules = new Exoscale.SecurityGroupRules("sksSecurityGroupRules", new Exoscale.SecurityGroupRulesArgs
    ///         {
    ///             SecurityGroup = sksSecurityGroup.Name,
    ///             Ingresses = 
    ///             {
    ///                 new Exoscale.Inputs.SecurityGroupRulesIngressArgs
    ///                 {
    ///                     Description = "Calico traffic",
    ///                     Protocol = "UDP",
    ///                     Ports = 
    ///                     {
    ///                         "4789",
    ///                     },
    ///                     UserSecurityGroupLists = 
    ///                     {
    ///                         sksSecurityGroup.Name,
    ///                     },
    ///                 },
    ///                 new Exoscale.Inputs.SecurityGroupRulesIngressArgs
    ///                 {
    ///                     Description = "Nodes logs/exec",
    ///                     Protocol = "TCP",
    ///                     Ports = 
    ///                     {
    ///                         "10250",
    ///                     },
    ///                     CidrLists = 
    ///                     {
    ///                         "0.0.0.0/0",
    ///                         "::/0",
    ///                     },
    ///                 },
    ///                 new Exoscale.Inputs.SecurityGroupRulesIngressArgs
    ///                 {
    ///                     Description = "NodePort services",
    ///                     Protocol = "TCP",
    ///                     CidrLists = 
    ///                     {
    ///                         "0.0.0.0/0",
    ///                         "::/0",
    ///                     },
    ///                     Ports = 
    ///                     {
    ///                         "30000-32767",
    ///                     },
    ///                 },
    ///             },
    ///         });
    ///         var prod = new Exoscale.SKSCluster("prod", new Exoscale.SKSClusterArgs
    ///         {
    ///             Zone = zone,
    ///             Version = "1.20.3",
    ///         });
    ///         var ci_builders = new Exoscale.SKSNodePool("ci-builders", new Exoscale.SKSNodePoolArgs
    ///         {
    ///             Zone = zone,
    ///             ClusterId = prod.Id,
    ///             InstanceType = "standard.medium",
    ///             Size = 3,
    ///             SecurityGroupIds = 
    ///             {
    ///                 sksSecurityGroup.Id,
    ///             },
    ///             Labels = 
    ///             {
    ///                 { "role", "ci-builders" },
    ///             },
    ///             Taints = 
    ///             {
    ///                 { "ci", "ci:NoSchedule" },
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// An existing SKS Nodepool can be imported as a resource by `&lt;CLUSTER-ID&gt;/&lt;NODEPOOL-ID&gt;@&lt;ZONE&gt;`console
    /// 
    /// ```sh
    ///  $ pulumi import exoscale:index/sKSNodePool:SKSNodePool ci-builders eb556678-ec59-4be6-8c54-0406ae0f6da6/8c08b92a-e673-47c7-866e-dc009f620a82@de-fra-1
    /// ```
    /// 
    ///  [k8s-taints]https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/ [r-sks_cluster]sks_cluster.html [sks-doc]https://community.exoscale.com/documentation/sks/ [type]https://www.exoscale.com/pricing/#/compute/ [zone]https://www.exoscale.com/datacenters/
    /// </summary>
    [ExoscaleResourceType("exoscale:index/sKSNodePool:SKSNodePool")]
    public partial class SKSNodePool : Pulumi.CustomResource
    {
        /// <summary>
        /// The list of Anti-Affinity Groups (IDs) the Compute instances managed by the SKS Nodepool are member of.
        /// </summary>
        [Output("antiAffinityGroupIds")]
        public Output<ImmutableArray<string>> AntiAffinityGroupIds { get; private set; } = null!;

        /// <summary>
        /// The ID of the parent SKS cluster.
        /// </summary>
        [Output("clusterId")]
        public Output<string> ClusterId { get; private set; } = null!;

        /// <summary>
        /// The creation date of the SKS Nodepool.
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// A Deploy Target ID to deploy managed Compute instances to.
        /// </summary>
        [Output("deployTargetId")]
        public Output<string?> DeployTargetId { get; private set; } = null!;

        /// <summary>
        /// The description of the SKS Nodepool.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The disk size of the Compute instances managed by the SKS Nodepool (default: `50`).
        /// </summary>
        [Output("diskSize")]
        public Output<int?> DiskSize { get; private set; } = null!;

        /// <summary>
        /// The ID of the Instance Pool managed by the SKS Nodepool.
        /// </summary>
        [Output("instancePoolId")]
        public Output<string> InstancePoolId { get; private set; } = null!;

        /// <summary>
        /// The string to add as prefix to managed Compute instances name (default `pool`).
        /// </summary>
        [Output("instancePrefix")]
        public Output<string?> InstancePrefix { get; private set; } = null!;

        /// <summary>
        /// The [type][type] of Compute instances managed by the SKS Nodepool (format: `FAMILY.SIZE`, e.g. `standard.medium`, `memory.huge`).
        /// </summary>
        [Output("instanceType")]
        public Output<string> InstanceType { get; private set; } = null!;

        /// <summary>
        /// A map of key/value labels.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        /// <summary>
        /// The name of the SKS Nodepool.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The list of Private Networks (IDs) to be attached to the Compute instances managed by the SKS Nodepool.
        /// </summary>
        [Output("privateNetworkIds")]
        public Output<ImmutableArray<string>> PrivateNetworkIds { get; private set; } = null!;

        /// <summary>
        /// The list of Security Groups (IDs) the Compute instances managed by the SKS Nodepool are member of.
        /// </summary>
        [Output("securityGroupIds")]
        public Output<ImmutableArray<string>> SecurityGroupIds { get; private set; } = null!;

        /// <summary>
        /// The number of Compute instances the SKS Nodepool manages.
        /// </summary>
        [Output("size")]
        public Output<int> Size { get; private set; } = null!;

        /// <summary>
        /// The current state of the SKS Nodepool.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// A map of key/value [Kubernetes taints][k8s-taints] (value format: `VALUE:EFFECT`).
        /// </summary>
        [Output("taints")]
        public Output<ImmutableDictionary<string, string>?> Taints { get; private set; } = null!;

        /// <summary>
        /// The ID of the Compute instance template used by the SKS Nodepool members.
        /// </summary>
        [Output("templateId")]
        public Output<string> TemplateId { get; private set; } = null!;

        /// <summary>
        /// The Kubernetes version of the SKS Nodepool members.
        /// </summary>
        [Output("version")]
        public Output<string> Version { get; private set; } = null!;

        /// <summary>
        /// The name of the [zone][zone] to deploy the SKS Nodepool into.
        /// </summary>
        [Output("zone")]
        public Output<string> Zone { get; private set; } = null!;


        /// <summary>
        /// Create a SKSNodePool resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SKSNodePool(string name, SKSNodePoolArgs args, CustomResourceOptions? options = null)
            : base("exoscale:index/sKSNodePool:SKSNodePool", name, args ?? new SKSNodePoolArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SKSNodePool(string name, Input<string> id, SKSNodePoolState? state = null, CustomResourceOptions? options = null)
            : base("exoscale:index/sKSNodePool:SKSNodePool", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SKSNodePool resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SKSNodePool Get(string name, Input<string> id, SKSNodePoolState? state = null, CustomResourceOptions? options = null)
        {
            return new SKSNodePool(name, id, state, options);
        }
    }

    public sealed class SKSNodePoolArgs : Pulumi.ResourceArgs
    {
        [Input("antiAffinityGroupIds")]
        private InputList<string>? _antiAffinityGroupIds;

        /// <summary>
        /// The list of Anti-Affinity Groups (IDs) the Compute instances managed by the SKS Nodepool are member of.
        /// </summary>
        public InputList<string> AntiAffinityGroupIds
        {
            get => _antiAffinityGroupIds ?? (_antiAffinityGroupIds = new InputList<string>());
            set => _antiAffinityGroupIds = value;
        }

        /// <summary>
        /// The ID of the parent SKS cluster.
        /// </summary>
        [Input("clusterId", required: true)]
        public Input<string> ClusterId { get; set; } = null!;

        /// <summary>
        /// A Deploy Target ID to deploy managed Compute instances to.
        /// </summary>
        [Input("deployTargetId")]
        public Input<string>? DeployTargetId { get; set; }

        /// <summary>
        /// The description of the SKS Nodepool.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The disk size of the Compute instances managed by the SKS Nodepool (default: `50`).
        /// </summary>
        [Input("diskSize")]
        public Input<int>? DiskSize { get; set; }

        /// <summary>
        /// The string to add as prefix to managed Compute instances name (default `pool`).
        /// </summary>
        [Input("instancePrefix")]
        public Input<string>? InstancePrefix { get; set; }

        /// <summary>
        /// The [type][type] of Compute instances managed by the SKS Nodepool (format: `FAMILY.SIZE`, e.g. `standard.medium`, `memory.huge`).
        /// </summary>
        [Input("instanceType", required: true)]
        public Input<string> InstanceType { get; set; } = null!;

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// A map of key/value labels.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The name of the SKS Nodepool.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("privateNetworkIds")]
        private InputList<string>? _privateNetworkIds;

        /// <summary>
        /// The list of Private Networks (IDs) to be attached to the Compute instances managed by the SKS Nodepool.
        /// </summary>
        public InputList<string> PrivateNetworkIds
        {
            get => _privateNetworkIds ?? (_privateNetworkIds = new InputList<string>());
            set => _privateNetworkIds = value;
        }

        [Input("securityGroupIds")]
        private InputList<string>? _securityGroupIds;

        /// <summary>
        /// The list of Security Groups (IDs) the Compute instances managed by the SKS Nodepool are member of.
        /// </summary>
        public InputList<string> SecurityGroupIds
        {
            get => _securityGroupIds ?? (_securityGroupIds = new InputList<string>());
            set => _securityGroupIds = value;
        }

        /// <summary>
        /// The number of Compute instances the SKS Nodepool manages.
        /// </summary>
        [Input("size", required: true)]
        public Input<int> Size { get; set; } = null!;

        [Input("taints")]
        private InputMap<string>? _taints;

        /// <summary>
        /// A map of key/value [Kubernetes taints][k8s-taints] (value format: `VALUE:EFFECT`).
        /// </summary>
        public InputMap<string> Taints
        {
            get => _taints ?? (_taints = new InputMap<string>());
            set => _taints = value;
        }

        /// <summary>
        /// The name of the [zone][zone] to deploy the SKS Nodepool into.
        /// </summary>
        [Input("zone", required: true)]
        public Input<string> Zone { get; set; } = null!;

        public SKSNodePoolArgs()
        {
        }
    }

    public sealed class SKSNodePoolState : Pulumi.ResourceArgs
    {
        [Input("antiAffinityGroupIds")]
        private InputList<string>? _antiAffinityGroupIds;

        /// <summary>
        /// The list of Anti-Affinity Groups (IDs) the Compute instances managed by the SKS Nodepool are member of.
        /// </summary>
        public InputList<string> AntiAffinityGroupIds
        {
            get => _antiAffinityGroupIds ?? (_antiAffinityGroupIds = new InputList<string>());
            set => _antiAffinityGroupIds = value;
        }

        /// <summary>
        /// The ID of the parent SKS cluster.
        /// </summary>
        [Input("clusterId")]
        public Input<string>? ClusterId { get; set; }

        /// <summary>
        /// The creation date of the SKS Nodepool.
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// A Deploy Target ID to deploy managed Compute instances to.
        /// </summary>
        [Input("deployTargetId")]
        public Input<string>? DeployTargetId { get; set; }

        /// <summary>
        /// The description of the SKS Nodepool.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The disk size of the Compute instances managed by the SKS Nodepool (default: `50`).
        /// </summary>
        [Input("diskSize")]
        public Input<int>? DiskSize { get; set; }

        /// <summary>
        /// The ID of the Instance Pool managed by the SKS Nodepool.
        /// </summary>
        [Input("instancePoolId")]
        public Input<string>? InstancePoolId { get; set; }

        /// <summary>
        /// The string to add as prefix to managed Compute instances name (default `pool`).
        /// </summary>
        [Input("instancePrefix")]
        public Input<string>? InstancePrefix { get; set; }

        /// <summary>
        /// The [type][type] of Compute instances managed by the SKS Nodepool (format: `FAMILY.SIZE`, e.g. `standard.medium`, `memory.huge`).
        /// </summary>
        [Input("instanceType")]
        public Input<string>? InstanceType { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// A map of key/value labels.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The name of the SKS Nodepool.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("privateNetworkIds")]
        private InputList<string>? _privateNetworkIds;

        /// <summary>
        /// The list of Private Networks (IDs) to be attached to the Compute instances managed by the SKS Nodepool.
        /// </summary>
        public InputList<string> PrivateNetworkIds
        {
            get => _privateNetworkIds ?? (_privateNetworkIds = new InputList<string>());
            set => _privateNetworkIds = value;
        }

        [Input("securityGroupIds")]
        private InputList<string>? _securityGroupIds;

        /// <summary>
        /// The list of Security Groups (IDs) the Compute instances managed by the SKS Nodepool are member of.
        /// </summary>
        public InputList<string> SecurityGroupIds
        {
            get => _securityGroupIds ?? (_securityGroupIds = new InputList<string>());
            set => _securityGroupIds = value;
        }

        /// <summary>
        /// The number of Compute instances the SKS Nodepool manages.
        /// </summary>
        [Input("size")]
        public Input<int>? Size { get; set; }

        /// <summary>
        /// The current state of the SKS Nodepool.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        [Input("taints")]
        private InputMap<string>? _taints;

        /// <summary>
        /// A map of key/value [Kubernetes taints][k8s-taints] (value format: `VALUE:EFFECT`).
        /// </summary>
        public InputMap<string> Taints
        {
            get => _taints ?? (_taints = new InputMap<string>());
            set => _taints = value;
        }

        /// <summary>
        /// The ID of the Compute instance template used by the SKS Nodepool members.
        /// </summary>
        [Input("templateId")]
        public Input<string>? TemplateId { get; set; }

        /// <summary>
        /// The Kubernetes version of the SKS Nodepool members.
        /// </summary>
        [Input("version")]
        public Input<string>? Version { get; set; }

        /// <summary>
        /// The name of the [zone][zone] to deploy the SKS Nodepool into.
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public SKSNodePoolState()
        {
        }
    }
}
