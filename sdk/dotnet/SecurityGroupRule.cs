// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Exoscale
{
    /// <summary>
    /// Provides an Exoscale [Security Group][r-security_group] rule resource. This can be used to create and delete Security Group rules.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Exoscale = Pulumi.Exoscale;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var webservers = new Exoscale.SecurityGroup("webservers", new Exoscale.SecurityGroupArgs
    ///         {
    ///         });
    ///         // ...
    ///         var http = new Exoscale.SecurityGroupRule("http", new Exoscale.SecurityGroupRuleArgs
    ///         {
    ///             SecurityGroupId = webservers.Id,
    ///             Type = "INGRESS",
    ///             Protocol = "TCP",
    ///             Cidr = "0.0.0.0/0",
    ///             StartPort = 80,
    ///             EndPort = 80,
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// An existing Security Group rule can be imported as a resource by `&lt;SECURITY-GROUP-ID&gt;/&lt;SECURITY-GROUP-RULE-ID&gt;`console
    /// 
    /// ```sh
    ///  $ pulumi import exoscale:index/securityGroupRule:SecurityGroupRule http eb556678-ec59-4be6-8c54-0406ae0f6da6/846831cb-a0fc-454b-9abd-cb526559fcf9
    /// ```
    /// 
    ///  [cidr]https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing#CIDR_notation [icmp]https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol#Control_messages [r-security_group]security_group.html
    /// </summary>
    [ExoscaleResourceType("exoscale:index/securityGroupRule:SecurityGroupRule")]
    public partial class SecurityGroupRule : Pulumi.CustomResource
    {
        /// <summary>
        /// A source (for ingress)/destination (for egress) IP subnet (in [CIDR notation][cidr]) to match (conflicts with `user_security_group`/`security_group_id`).
        /// </summary>
        [Output("cidr")]
        public Output<string?> Cidr { get; private set; } = null!;

        /// <summary>
        /// A free-form text describing the Security Group rule purpose.
        /// * `start_port`/`end_port` - A `TCP`/`UDP` port range to match.
        /// * `icmp_type`/`icmp_code` - An ICMP/ICMPv6 [type/code][icmp] to match.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        [Output("endPort")]
        public Output<int?> EndPort { get; private set; } = null!;

        [Output("icmpCode")]
        public Output<int?> IcmpCode { get; private set; } = null!;

        [Output("icmpType")]
        public Output<int?> IcmpType { get; private set; } = null!;

        /// <summary>
        /// The network protocol to match. Supported values are: `TCP`, `UDP`, `ICMP`, `ICMPv6`, `AH`, `ESP`, `GRE`, `IPIP` and `ALL`.
        /// </summary>
        [Output("protocol")]
        public Output<string?> Protocol { get; private set; } = null!;

        /// <summary>
        /// The Security Group name the rule applies to.
        /// </summary>
        [Output("securityGroup")]
        public Output<string> SecurityGroup { get; private set; } = null!;

        /// <summary>
        /// The Security Group ID the rule applies to.
        /// </summary>
        [Output("securityGroupId")]
        public Output<string> SecurityGroupId { get; private set; } = null!;

        [Output("startPort")]
        public Output<int?> StartPort { get; private set; } = null!;

        /// <summary>
        /// The traffic direction to match (`INGRESS` or `EGRESS`).
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// A source (for ingress)/destination (for egress) Security Group name to match (conflicts with `cidr`/`security_group_id`).
        /// </summary>
        [Output("userSecurityGroup")]
        public Output<string> UserSecurityGroup { get; private set; } = null!;

        /// <summary>
        /// A source (for ingress)/destination (for egress) Security Group ID to match (conflicts with `cidr`/`security_group)`).
        /// </summary>
        [Output("userSecurityGroupId")]
        public Output<string?> UserSecurityGroupId { get; private set; } = null!;


        /// <summary>
        /// Create a SecurityGroupRule resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SecurityGroupRule(string name, SecurityGroupRuleArgs args, CustomResourceOptions? options = null)
            : base("exoscale:index/securityGroupRule:SecurityGroupRule", name, args ?? new SecurityGroupRuleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SecurityGroupRule(string name, Input<string> id, SecurityGroupRuleState? state = null, CustomResourceOptions? options = null)
            : base("exoscale:index/securityGroupRule:SecurityGroupRule", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SecurityGroupRule resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SecurityGroupRule Get(string name, Input<string> id, SecurityGroupRuleState? state = null, CustomResourceOptions? options = null)
        {
            return new SecurityGroupRule(name, id, state, options);
        }
    }

    public sealed class SecurityGroupRuleArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// A source (for ingress)/destination (for egress) IP subnet (in [CIDR notation][cidr]) to match (conflicts with `user_security_group`/`security_group_id`).
        /// </summary>
        [Input("cidr")]
        public Input<string>? Cidr { get; set; }

        /// <summary>
        /// A free-form text describing the Security Group rule purpose.
        /// * `start_port`/`end_port` - A `TCP`/`UDP` port range to match.
        /// * `icmp_type`/`icmp_code` - An ICMP/ICMPv6 [type/code][icmp] to match.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("endPort")]
        public Input<int>? EndPort { get; set; }

        [Input("icmpCode")]
        public Input<int>? IcmpCode { get; set; }

        [Input("icmpType")]
        public Input<int>? IcmpType { get; set; }

        /// <summary>
        /// The network protocol to match. Supported values are: `TCP`, `UDP`, `ICMP`, `ICMPv6`, `AH`, `ESP`, `GRE`, `IPIP` and `ALL`.
        /// </summary>
        [Input("protocol")]
        public Input<string>? Protocol { get; set; }

        /// <summary>
        /// The Security Group name the rule applies to.
        /// </summary>
        [Input("securityGroup")]
        public Input<string>? SecurityGroup { get; set; }

        /// <summary>
        /// The Security Group ID the rule applies to.
        /// </summary>
        [Input("securityGroupId")]
        public Input<string>? SecurityGroupId { get; set; }

        [Input("startPort")]
        public Input<int>? StartPort { get; set; }

        /// <summary>
        /// The traffic direction to match (`INGRESS` or `EGRESS`).
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        /// <summary>
        /// A source (for ingress)/destination (for egress) Security Group name to match (conflicts with `cidr`/`security_group_id`).
        /// </summary>
        [Input("userSecurityGroup")]
        public Input<string>? UserSecurityGroup { get; set; }

        /// <summary>
        /// A source (for ingress)/destination (for egress) Security Group ID to match (conflicts with `cidr`/`security_group)`).
        /// </summary>
        [Input("userSecurityGroupId")]
        public Input<string>? UserSecurityGroupId { get; set; }

        public SecurityGroupRuleArgs()
        {
        }
    }

    public sealed class SecurityGroupRuleState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// A source (for ingress)/destination (for egress) IP subnet (in [CIDR notation][cidr]) to match (conflicts with `user_security_group`/`security_group_id`).
        /// </summary>
        [Input("cidr")]
        public Input<string>? Cidr { get; set; }

        /// <summary>
        /// A free-form text describing the Security Group rule purpose.
        /// * `start_port`/`end_port` - A `TCP`/`UDP` port range to match.
        /// * `icmp_type`/`icmp_code` - An ICMP/ICMPv6 [type/code][icmp] to match.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("endPort")]
        public Input<int>? EndPort { get; set; }

        [Input("icmpCode")]
        public Input<int>? IcmpCode { get; set; }

        [Input("icmpType")]
        public Input<int>? IcmpType { get; set; }

        /// <summary>
        /// The network protocol to match. Supported values are: `TCP`, `UDP`, `ICMP`, `ICMPv6`, `AH`, `ESP`, `GRE`, `IPIP` and `ALL`.
        /// </summary>
        [Input("protocol")]
        public Input<string>? Protocol { get; set; }

        /// <summary>
        /// The Security Group name the rule applies to.
        /// </summary>
        [Input("securityGroup")]
        public Input<string>? SecurityGroup { get; set; }

        /// <summary>
        /// The Security Group ID the rule applies to.
        /// </summary>
        [Input("securityGroupId")]
        public Input<string>? SecurityGroupId { get; set; }

        [Input("startPort")]
        public Input<int>? StartPort { get; set; }

        /// <summary>
        /// The traffic direction to match (`INGRESS` or `EGRESS`).
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// A source (for ingress)/destination (for egress) Security Group name to match (conflicts with `cidr`/`security_group_id`).
        /// </summary>
        [Input("userSecurityGroup")]
        public Input<string>? UserSecurityGroup { get; set; }

        /// <summary>
        /// A source (for ingress)/destination (for egress) Security Group ID to match (conflicts with `cidr`/`security_group)`).
        /// </summary>
        [Input("userSecurityGroupId")]
        public Input<string>? UserSecurityGroupId { get; set; }

        public SecurityGroupRuleState()
        {
        }
    }
}
