// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi.Utilities;

namespace Pulumi.Exoscale
{
    public static class GetSecurityGroup
    {
        /// <summary>
        /// Provides information on a [Security Group][sg-doc] for use in other resources such as a [`exoscale.InstancePool`][r-instance_pool] resource.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Exoscale = Pulumi.Exoscale;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var zone = "ch-gva-2";
        ///         var web = Output.Create(Exoscale.GetSecurityGroup.InvokeAsync(new Exoscale.GetSecurityGroupArgs
        ///         {
        ///             Name = "web",
        ///         }));
        ///         var ubuntu = Output.Create(Exoscale.GetComputeTemplate.InvokeAsync(new Exoscale.GetComputeTemplateArgs
        ///         {
        ///             Zone = zone,
        ///             Name = "Linux Ubuntu 20.04 LTS 64-bit",
        ///         }));
        ///         var webservers = new Exoscale.InstancePool("webservers", new Exoscale.InstancePoolArgs
        ///         {
        ///             Zone = zone,
        ///             TemplateId = ubuntu.Apply(ubuntu =&gt; ubuntu.Id),
        ///             Size = 5,
        ///             ServiceOffering = "medium",
        ///             SecurityGroupIds = 
        ///             {
        ///                 web.Apply(web =&gt; web.Id),
        ///             },
        ///         });
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetSecurityGroupResult> InvokeAsync(GetSecurityGroupArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetSecurityGroupResult>("exoscale:index/getSecurityGroup:getSecurityGroup", args ?? new GetSecurityGroupArgs(), options.WithVersion());

        /// <summary>
        /// Provides information on a [Security Group][sg-doc] for use in other resources such as a [`exoscale.InstancePool`][r-instance_pool] resource.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Exoscale = Pulumi.Exoscale;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var zone = "ch-gva-2";
        ///         var web = Output.Create(Exoscale.GetSecurityGroup.InvokeAsync(new Exoscale.GetSecurityGroupArgs
        ///         {
        ///             Name = "web",
        ///         }));
        ///         var ubuntu = Output.Create(Exoscale.GetComputeTemplate.InvokeAsync(new Exoscale.GetComputeTemplateArgs
        ///         {
        ///             Zone = zone,
        ///             Name = "Linux Ubuntu 20.04 LTS 64-bit",
        ///         }));
        ///         var webservers = new Exoscale.InstancePool("webservers", new Exoscale.InstancePoolArgs
        ///         {
        ///             Zone = zone,
        ///             TemplateId = ubuntu.Apply(ubuntu =&gt; ubuntu.Id),
        ///             Size = 5,
        ///             ServiceOffering = "medium",
        ///             SecurityGroupIds = 
        ///             {
        ///                 web.Apply(web =&gt; web.Id),
        ///             },
        ///         });
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetSecurityGroupResult> Invoke(GetSecurityGroupInvokeArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetSecurityGroupResult>("exoscale:index/getSecurityGroup:getSecurityGroup", args ?? new GetSecurityGroupInvokeArgs(), options.WithVersion());
    }


    public sealed class GetSecurityGroupArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the Security Group (conflicts with `name`)
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// The name of the Security Group (conflicts with `id`)
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        public GetSecurityGroupArgs()
        {
        }
    }

    public sealed class GetSecurityGroupInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the Security Group (conflicts with `name`)
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// The name of the Security Group (conflicts with `id`)
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public GetSecurityGroupInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetSecurityGroupResult
    {
        public readonly string? Id;
        public readonly string? Name;

        [OutputConstructor]
        private GetSecurityGroupResult(
            string? id,

            string? name)
        {
            Id = id;
            Name = name;
        }
    }
}
