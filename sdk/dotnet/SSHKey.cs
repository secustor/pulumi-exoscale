// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Exoscale
{
    /// <summary>
    /// Provides an Exoscale [SSH Key][ssh-keys-doc] resource. This can be used to create and delete SSH Keys.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Exoscale = Pulumi.Exoscale;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var example = new Exoscale.SSHKey("example", new Exoscale.SSHKeyArgs
    ///         {
    ///             PublicKey = "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDGRY...",
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// An existing SSH Key can be imported as a resource by nameconsole
    /// 
    /// ```sh
    ///  $ pulumi import exoscale:index/sSHKey:SSHKey my-key my-key
    /// ```
    /// 
    ///  [ssh-keys-doc]https://community.exoscale.com/documentation/compute/ssh-keys/
    /// </summary>
    [ExoscaleResourceType("exoscale:index/sSHKey:SSHKey")]
    public partial class SSHKey : Pulumi.CustomResource
    {
        /// <summary>
        /// The unique identifier of the SSH Key.
        /// </summary>
        [Output("fingerprint")]
        public Output<string> Fingerprint { get; private set; } = null!;

        /// <summary>
        /// The name of the SSH Key.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// A SSH public key that will be copied into the Compute instances at **first** boot.
        /// </summary>
        [Output("publicKey")]
        public Output<string> PublicKey { get; private set; } = null!;


        /// <summary>
        /// Create a SSHKey resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SSHKey(string name, SSHKeyArgs? args = null, CustomResourceOptions? options = null)
            : base("exoscale:index/sSHKey:SSHKey", name, args ?? new SSHKeyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SSHKey(string name, Input<string> id, SSHKeyState? state = null, CustomResourceOptions? options = null)
            : base("exoscale:index/sSHKey:SSHKey", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SSHKey resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SSHKey Get(string name, Input<string> id, SSHKeyState? state = null, CustomResourceOptions? options = null)
        {
            return new SSHKey(name, id, state, options);
        }
    }

    public sealed class SSHKeyArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the SSH Key.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A SSH public key that will be copied into the Compute instances at **first** boot.
        /// </summary>
        [Input("publicKey")]
        public Input<string>? PublicKey { get; set; }

        public SSHKeyArgs()
        {
        }
    }

    public sealed class SSHKeyState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The unique identifier of the SSH Key.
        /// </summary>
        [Input("fingerprint")]
        public Input<string>? Fingerprint { get; set; }

        /// <summary>
        /// The name of the SSH Key.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A SSH public key that will be copied into the Compute instances at **first** boot.
        /// </summary>
        [Input("publicKey")]
        public Input<string>? PublicKey { get; set; }

        public SSHKeyState()
        {
        }
    }
}
