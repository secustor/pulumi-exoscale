// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Exoscale
{
    /// <summary>
    /// Provides an Exoscale Network Load Balancer ([NLB][r-nlb]) service resource. This can be used to create, modify, and delete NLB services.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Exoscale = Pulumi.Exoscale;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var config = new Config();
    ///         var zone = config.Get("zone") ?? "de-fra-1";
    ///         var template = config.Get("template") ?? "Linux Ubuntu 20.04 LTS 64-bit";
    ///         var websiteComputeTemplate = Output.Create(Exoscale.GetComputeTemplate.InvokeAsync(new Exoscale.GetComputeTemplateArgs
    ///         {
    ///             Zone = zone,
    ///             Name = template,
    ///         }));
    ///         var websiteInstancePool = new Exoscale.InstancePool("websiteInstancePool", new Exoscale.InstancePoolArgs
    ///         {
    ///             Description = "Instance Pool Website nodes",
    ///             TemplateId = websiteComputeTemplate.Apply(websiteComputeTemplate =&gt; websiteComputeTemplate.Id),
    ///             ServiceOffering = "medium",
    ///             Size = 3,
    ///             Zone = zone,
    ///         });
    ///         var websiteNLB = new Exoscale.NLB("websiteNLB", new Exoscale.NLBArgs
    ///         {
    ///             Description = "This is the Network Load Balancer for my website",
    ///             Zone = zone,
    ///         });
    ///         var websiteNLBService = new Exoscale.NLBService("websiteNLBService", new Exoscale.NLBServiceArgs
    ///         {
    ///             Zone = websiteNLB.Zone,
    ///             Description = "Website over HTTPS",
    ///             NlbId = websiteNLB.Id,
    ///             InstancePoolId = websiteInstancePool.Id,
    ///             Protocol = "tcp",
    ///             Port = 443,
    ///             TargetPort = 8443,
    ///             Strategy = "round-robin",
    ///             Healthchecks = 
    ///             {
    ///                 new Exoscale.Inputs.NLBServiceHealthcheckArgs
    ///                 {
    ///                     Mode = "https",
    ///                     Port = 8443,
    ///                     Uri = "/healthz",
    ///                     TlsSni = "example.net",
    ///                     Interval = 5,
    ///                     Timeout = 3,
    ///                     Retries = 1,
    ///                 },
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// An existing NLB service can be imported as a resource by `&lt;NLB-ID&gt;/&lt;SERVICE-ID&gt;@&lt;ZONE&gt;`console
    /// 
    /// ```sh
    ///  $ pulumi import exoscale:index/nLBService:NLBService example eb556678-ec59-4be6-8c54-0406ae0f6da6/9ecc6b8b-73d4-4211-8ced-f7f29bb79524@de-fra-1
    /// ```
    /// 
    ///  [r-nlb]nlb.html [zone]https://www.exoscale.com/datacenters/
    /// </summary>
    [ExoscaleResourceType("exoscale:index/nLBService:NLBService")]
    public partial class NLBService : Pulumi.CustomResource
    {
        /// <summary>
        /// The description of the NLB service.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        [Output("healthchecks")]
        public Output<ImmutableArray<Outputs.NLBServiceHealthcheck>> Healthchecks { get; private set; } = null!;

        /// <summary>
        /// The ID of the Instance Pool to forward network traffic to.
        /// </summary>
        [Output("instancePoolId")]
        public Output<string> InstancePoolId { get; private set; } = null!;

        /// <summary>
        /// The name of the NLB service.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the NLB to attach the service.
        /// </summary>
        [Output("nlbId")]
        public Output<string> NlbId { get; private set; } = null!;

        /// <summary>
        /// The healthcheck port.
        /// </summary>
        [Output("port")]
        public Output<int> Port { get; private set; } = null!;

        /// <summary>
        /// The protocol (tcp/udp).
        /// </summary>
        [Output("protocol")]
        public Output<string?> Protocol { get; private set; } = null!;

        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// The strategy (round-robin/source-hash).
        /// </summary>
        [Output("strategy")]
        public Output<string?> Strategy { get; private set; } = null!;

        /// <summary>
        /// The port to forward network traffic to on target instances.
        /// </summary>
        [Output("targetPort")]
        public Output<int> TargetPort { get; private set; } = null!;

        /// <summary>
        /// The name of the [zone][zone] used by the NLB.
        /// </summary>
        [Output("zone")]
        public Output<string> Zone { get; private set; } = null!;


        /// <summary>
        /// Create a NLBService resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NLBService(string name, NLBServiceArgs args, CustomResourceOptions? options = null)
            : base("exoscale:index/nLBService:NLBService", name, args ?? new NLBServiceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NLBService(string name, Input<string> id, NLBServiceState? state = null, CustomResourceOptions? options = null)
            : base("exoscale:index/nLBService:NLBService", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NLBService resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NLBService Get(string name, Input<string> id, NLBServiceState? state = null, CustomResourceOptions? options = null)
        {
            return new NLBService(name, id, state, options);
        }
    }

    public sealed class NLBServiceArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of the NLB service.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("healthchecks", required: true)]
        private InputList<Inputs.NLBServiceHealthcheckArgs>? _healthchecks;
        public InputList<Inputs.NLBServiceHealthcheckArgs> Healthchecks
        {
            get => _healthchecks ?? (_healthchecks = new InputList<Inputs.NLBServiceHealthcheckArgs>());
            set => _healthchecks = value;
        }

        /// <summary>
        /// The ID of the Instance Pool to forward network traffic to.
        /// </summary>
        [Input("instancePoolId", required: true)]
        public Input<string> InstancePoolId { get; set; } = null!;

        /// <summary>
        /// The name of the NLB service.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the NLB to attach the service.
        /// </summary>
        [Input("nlbId", required: true)]
        public Input<string> NlbId { get; set; } = null!;

        /// <summary>
        /// The healthcheck port.
        /// </summary>
        [Input("port", required: true)]
        public Input<int> Port { get; set; } = null!;

        /// <summary>
        /// The protocol (tcp/udp).
        /// </summary>
        [Input("protocol")]
        public Input<string>? Protocol { get; set; }

        /// <summary>
        /// The strategy (round-robin/source-hash).
        /// </summary>
        [Input("strategy")]
        public Input<string>? Strategy { get; set; }

        /// <summary>
        /// The port to forward network traffic to on target instances.
        /// </summary>
        [Input("targetPort", required: true)]
        public Input<int> TargetPort { get; set; } = null!;

        /// <summary>
        /// The name of the [zone][zone] used by the NLB.
        /// </summary>
        [Input("zone", required: true)]
        public Input<string> Zone { get; set; } = null!;

        public NLBServiceArgs()
        {
        }
    }

    public sealed class NLBServiceState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of the NLB service.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("healthchecks")]
        private InputList<Inputs.NLBServiceHealthcheckGetArgs>? _healthchecks;
        public InputList<Inputs.NLBServiceHealthcheckGetArgs> Healthchecks
        {
            get => _healthchecks ?? (_healthchecks = new InputList<Inputs.NLBServiceHealthcheckGetArgs>());
            set => _healthchecks = value;
        }

        /// <summary>
        /// The ID of the Instance Pool to forward network traffic to.
        /// </summary>
        [Input("instancePoolId")]
        public Input<string>? InstancePoolId { get; set; }

        /// <summary>
        /// The name of the NLB service.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the NLB to attach the service.
        /// </summary>
        [Input("nlbId")]
        public Input<string>? NlbId { get; set; }

        /// <summary>
        /// The healthcheck port.
        /// </summary>
        [Input("port")]
        public Input<int>? Port { get; set; }

        /// <summary>
        /// The protocol (tcp/udp).
        /// </summary>
        [Input("protocol")]
        public Input<string>? Protocol { get; set; }

        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// The strategy (round-robin/source-hash).
        /// </summary>
        [Input("strategy")]
        public Input<string>? Strategy { get; set; }

        /// <summary>
        /// The port to forward network traffic to on target instances.
        /// </summary>
        [Input("targetPort")]
        public Input<int>? TargetPort { get; set; }

        /// <summary>
        /// The name of the [zone][zone] used by the NLB.
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public NLBServiceState()
        {
        }
    }
}
