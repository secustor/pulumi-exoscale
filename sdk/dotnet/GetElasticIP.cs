// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi.Utilities;

namespace Pulumi.Exoscale
{
    public static class GetElasticIP
    {
        /// <summary>
        /// Provides information on an [Elastic IP][eip-doc].
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Exoscale = Pulumi.Exoscale;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var zone = "ch-gva-2";
        ///         var vip = Output.Create(Exoscale.GetElasticIP.InvokeAsync(new Exoscale.GetElasticIPArgs
        ///         {
        ///             Zone = zone,
        ///             IpAddress = "1.2.3.4",
        ///         }));
        ///         var ubuntu = Output.Create(Exoscale.GetComputeTemplate.InvokeAsync(new Exoscale.GetComputeTemplateArgs
        ///         {
        ///             Zone = zone,
        ///             Name = "Linux Ubuntu 20.04 LTS 64-bit",
        ///         }));
        ///         var example = new Exoscale.ComputeInstance("example", new Exoscale.ComputeInstanceArgs
        ///         {
        ///             Zone = zone,
        ///             Type = "standard.medium",
        ///             TemplateId = ubuntu.Apply(ubuntu =&gt; ubuntu.Id),
        ///             ElasticIpIds = 
        ///             {
        ///                 vip.Apply(vip =&gt; vip.Id),
        ///             },
        ///         });
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetElasticIPResult> InvokeAsync(GetElasticIPArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetElasticIPResult>("exoscale:index/getElasticIP:getElasticIP", args ?? new GetElasticIPArgs(), options.WithVersion());

        /// <summary>
        /// Provides information on an [Elastic IP][eip-doc].
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Exoscale = Pulumi.Exoscale;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var zone = "ch-gva-2";
        ///         var vip = Output.Create(Exoscale.GetElasticIP.InvokeAsync(new Exoscale.GetElasticIPArgs
        ///         {
        ///             Zone = zone,
        ///             IpAddress = "1.2.3.4",
        ///         }));
        ///         var ubuntu = Output.Create(Exoscale.GetComputeTemplate.InvokeAsync(new Exoscale.GetComputeTemplateArgs
        ///         {
        ///             Zone = zone,
        ///             Name = "Linux Ubuntu 20.04 LTS 64-bit",
        ///         }));
        ///         var example = new Exoscale.ComputeInstance("example", new Exoscale.ComputeInstanceArgs
        ///         {
        ///             Zone = zone,
        ///             Type = "standard.medium",
        ///             TemplateId = ubuntu.Apply(ubuntu =&gt; ubuntu.Id),
        ///             ElasticIpIds = 
        ///             {
        ///                 vip.Apply(vip =&gt; vip.Id),
        ///             },
        ///         });
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetElasticIPResult> Invoke(GetElasticIPInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetElasticIPResult>("exoscale:index/getElasticIP:getElasticIP", args ?? new GetElasticIPInvokeArgs(), options.WithVersion());
    }


    public sealed class GetElasticIPArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the Elastic IP (conflicts with `ip_address`).
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// The IP address of the Elastic IP (conflicts with `id`).
        /// </summary>
        [Input("ipAddress")]
        public string? IpAddress { get; set; }

        /// <summary>
        /// The [zone][zone] of the Elastic IP.
        /// </summary>
        [Input("zone", required: true)]
        public string Zone { get; set; } = null!;

        public GetElasticIPArgs()
        {
        }
    }

    public sealed class GetElasticIPInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the Elastic IP (conflicts with `ip_address`).
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// The IP address of the Elastic IP (conflicts with `id`).
        /// </summary>
        [Input("ipAddress")]
        public Input<string>? IpAddress { get; set; }

        /// <summary>
        /// The [zone][zone] of the Elastic IP.
        /// </summary>
        [Input("zone", required: true)]
        public Input<string> Zone { get; set; } = null!;

        public GetElasticIPInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetElasticIPResult
    {
        /// <summary>
        /// The description of the Elastic IP.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// A health checking configuration for managed Elastic IPs. Structure is documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetElasticIPHealthcheckResult> Healthchecks;
        public readonly string? Id;
        public readonly string? IpAddress;
        public readonly string Zone;

        [OutputConstructor]
        private GetElasticIPResult(
            string description,

            ImmutableArray<Outputs.GetElasticIPHealthcheckResult> healthchecks,

            string? id,

            string? ipAddress,

            string zone)
        {
            Description = description;
            Healthchecks = healthchecks;
            Id = id;
            IpAddress = ipAddress;
            Zone = zone;
        }
    }
}
