// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Exoscale
{
    /// <summary>
    /// Provides an Exoscale [DNS][dns-doc] domain record resource. This can be used to create, modify, and delete DNS domain records.
    /// 
    /// ## Usage example
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Exoscale = Pulumi.Exoscale;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var example = new Exoscale.Domain("example", new Exoscale.DomainArgs
    ///         {
    ///         });
    ///         var myserver = new Exoscale.DomainRecord("myserver", new Exoscale.DomainRecordArgs
    ///         {
    ///             Domain = example.Id,
    ///             RecordType = "A",
    ///             Content = "1.2.3.4",
    ///         });
    ///         var myserverAlias = new Exoscale.DomainRecord("myserverAlias", new Exoscale.DomainRecordArgs
    ///         {
    ///             Domain = example.Id,
    ///             RecordType = "CNAME",
    ///             Content = myserver.Hostname,
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// An existing DNS domain record can be imported as a resource by IDconsole
    /// 
    /// ```sh
    ///  $ pulumi import exoscale:index/domainRecord:DomainRecord www 12480484
    /// ```
    /// 
    ///  [dns-doc]https://community.exoscale.com/documentation/dns/ [r-domain]domain.html [ttl]https://en.wikipedia.org/wiki/Time_to_live
    /// </summary>
    [ExoscaleResourceType("exoscale:index/domainRecord:DomainRecord")]
    public partial class DomainRecord : Pulumi.CustomResource
    {
        /// <summary>
        /// The value of the domain record.
        /// </summary>
        [Output("content")]
        public Output<string> Content { get; private set; } = null!;

        /// <summary>
        /// The name of the [`exoscale.Domain`][r-domain] to create the record into.
        /// </summary>
        [Output("domain")]
        public Output<string> Domain { get; private set; } = null!;

        /// <summary>
        /// The DNS domain record's *Fully Qualified Domain Name* (FQDN), useful for linking `A` records into `CNAME`.
        /// </summary>
        [Output("hostname")]
        public Output<string> Hostname { get; private set; } = null!;

        /// <summary>
        /// The name of the domain record; leave blank (`""`) to create a root record (similar to using `@` in a DNS zone file).
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The priority of the DNS domain record (for types that support it).
        /// </summary>
        [Output("prio")]
        public Output<int> Prio { get; private set; } = null!;

        /// <summary>
        /// The type of the domain record. Supported values are: `A`, `AAAA`, `ALIAS`, `CAA`, `CNAME`, `HINFO`, `MX`, `NAPTR`, `NS`, `POOL`, `SPF`, `SRV`, `SSHFP`, `TXT`, `URL`.
        /// </summary>
        [Output("recordType")]
        public Output<string> RecordType { get; private set; } = null!;

        /// <summary>
        /// The [Time To Live][ttl] of the domain record.
        /// </summary>
        [Output("ttl")]
        public Output<int> Ttl { get; private set; } = null!;


        /// <summary>
        /// Create a DomainRecord resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DomainRecord(string name, DomainRecordArgs args, CustomResourceOptions? options = null)
            : base("exoscale:index/domainRecord:DomainRecord", name, args ?? new DomainRecordArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DomainRecord(string name, Input<string> id, DomainRecordState? state = null, CustomResourceOptions? options = null)
            : base("exoscale:index/domainRecord:DomainRecord", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DomainRecord resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DomainRecord Get(string name, Input<string> id, DomainRecordState? state = null, CustomResourceOptions? options = null)
        {
            return new DomainRecord(name, id, state, options);
        }
    }

    public sealed class DomainRecordArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The value of the domain record.
        /// </summary>
        [Input("content", required: true)]
        public Input<string> Content { get; set; } = null!;

        /// <summary>
        /// The name of the [`exoscale.Domain`][r-domain] to create the record into.
        /// </summary>
        [Input("domain", required: true)]
        public Input<string> Domain { get; set; } = null!;

        /// <summary>
        /// The name of the domain record; leave blank (`""`) to create a root record (similar to using `@` in a DNS zone file).
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The priority of the DNS domain record (for types that support it).
        /// </summary>
        [Input("prio")]
        public Input<int>? Prio { get; set; }

        /// <summary>
        /// The type of the domain record. Supported values are: `A`, `AAAA`, `ALIAS`, `CAA`, `CNAME`, `HINFO`, `MX`, `NAPTR`, `NS`, `POOL`, `SPF`, `SRV`, `SSHFP`, `TXT`, `URL`.
        /// </summary>
        [Input("recordType", required: true)]
        public Input<string> RecordType { get; set; } = null!;

        /// <summary>
        /// The [Time To Live][ttl] of the domain record.
        /// </summary>
        [Input("ttl")]
        public Input<int>? Ttl { get; set; }

        public DomainRecordArgs()
        {
        }
    }

    public sealed class DomainRecordState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The value of the domain record.
        /// </summary>
        [Input("content")]
        public Input<string>? Content { get; set; }

        /// <summary>
        /// The name of the [`exoscale.Domain`][r-domain] to create the record into.
        /// </summary>
        [Input("domain")]
        public Input<string>? Domain { get; set; }

        /// <summary>
        /// The DNS domain record's *Fully Qualified Domain Name* (FQDN), useful for linking `A` records into `CNAME`.
        /// </summary>
        [Input("hostname")]
        public Input<string>? Hostname { get; set; }

        /// <summary>
        /// The name of the domain record; leave blank (`""`) to create a root record (similar to using `@` in a DNS zone file).
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The priority of the DNS domain record (for types that support it).
        /// </summary>
        [Input("prio")]
        public Input<int>? Prio { get; set; }

        /// <summary>
        /// The type of the domain record. Supported values are: `A`, `AAAA`, `ALIAS`, `CAA`, `CNAME`, `HINFO`, `MX`, `NAPTR`, `NS`, `POOL`, `SPF`, `SRV`, `SSHFP`, `TXT`, `URL`.
        /// </summary>
        [Input("recordType")]
        public Input<string>? RecordType { get; set; }

        /// <summary>
        /// The [Time To Live][ttl] of the domain record.
        /// </summary>
        [Input("ttl")]
        public Input<int>? Ttl { get; set; }

        public DomainRecordState()
        {
        }
    }
}
