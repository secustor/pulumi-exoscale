// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi.Utilities;

namespace Pulumi.Exoscale
{
    public static class GetComputeTemplate
    {
        /// <summary>
        /// Provides information on a Compute [template][templates] for use in other resources such as a [`exoscale.Compute`][r-compute] resource.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Exoscale = Pulumi.Exoscale;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var zone = "ch-gva-2";
        ///         var ubuntu = Output.Create(Exoscale.GetComputeTemplate.InvokeAsync(new Exoscale.GetComputeTemplateArgs
        ///         {
        ///             Zone = zone,
        ///             Name = "Linux Ubuntu 20.04 LTS 64-bit",
        ///         }));
        ///         var my_server = new Exoscale.ComputeInstance("my-server", new Exoscale.ComputeInstanceArgs
        ///         {
        ///             Zone = zone,
        ///             Type = "standard.medium",
        ///             TemplateId = ubuntu.Apply(ubuntu =&gt; ubuntu.Id),
        ///             DiskSize = 20,
        ///         });
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetComputeTemplateResult> InvokeAsync(GetComputeTemplateArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetComputeTemplateResult>("exoscale:index/getComputeTemplate:getComputeTemplate", args ?? new GetComputeTemplateArgs(), options.WithVersion());

        /// <summary>
        /// Provides information on a Compute [template][templates] for use in other resources such as a [`exoscale.Compute`][r-compute] resource.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Exoscale = Pulumi.Exoscale;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var zone = "ch-gva-2";
        ///         var ubuntu = Output.Create(Exoscale.GetComputeTemplate.InvokeAsync(new Exoscale.GetComputeTemplateArgs
        ///         {
        ///             Zone = zone,
        ///             Name = "Linux Ubuntu 20.04 LTS 64-bit",
        ///         }));
        ///         var my_server = new Exoscale.ComputeInstance("my-server", new Exoscale.ComputeInstanceArgs
        ///         {
        ///             Zone = zone,
        ///             Type = "standard.medium",
        ///             TemplateId = ubuntu.Apply(ubuntu =&gt; ubuntu.Id),
        ///             DiskSize = 20,
        ///         });
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetComputeTemplateResult> Invoke(GetComputeTemplateInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetComputeTemplateResult>("exoscale:index/getComputeTemplate:getComputeTemplate", args ?? new GetComputeTemplateInvokeArgs(), options.WithVersion());
    }


    public sealed class GetComputeTemplateArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// A Compute template search filter, must be either `featured` (official Exoscale templates), `community` (community-contributed templates) or `mine` (custom templates private to my organization). Default is `featured`.
        /// </summary>
        [Input("filter")]
        public string? Filter { get; set; }

        /// <summary>
        /// The ID of the Compute template (conflicts with `name`).
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// The name of the Compute template (conflicts with `id`).
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// The name of the [zone][zone] where to look for the Compute template.
        /// </summary>
        [Input("zone", required: true)]
        public string Zone { get; set; } = null!;

        public GetComputeTemplateArgs()
        {
        }
    }

    public sealed class GetComputeTemplateInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// A Compute template search filter, must be either `featured` (official Exoscale templates), `community` (community-contributed templates) or `mine` (custom templates private to my organization). Default is `featured`.
        /// </summary>
        [Input("filter")]
        public Input<string>? Filter { get; set; }

        /// <summary>
        /// The ID of the Compute template (conflicts with `name`).
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// The name of the Compute template (conflicts with `id`).
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the [zone][zone] where to look for the Compute template.
        /// </summary>
        [Input("zone", required: true)]
        public Input<string> Zone { get; set; } = null!;

        public GetComputeTemplateInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetComputeTemplateResult
    {
        public readonly string? Filter;
        public readonly string? Id;
        public readonly string? Name;
        /// <summary>
        /// Username to use to log into a Compute Instance based on this template
        /// </summary>
        public readonly string Username;
        public readonly string Zone;

        [OutputConstructor]
        private GetComputeTemplateResult(
            string? filter,

            string? id,

            string? name,

            string username,

            string zone)
        {
            Filter = filter;
            Id = id;
            Name = name;
            Username = username;
            Zone = zone;
        }
    }
}
