// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Exoscale
{
    /// <summary>
    /// Provides an Exoscale [Compute instance][compute-doc] resource. This can be used to create, modify, and delete Compute instances.
    /// 
    /// !&gt; **WARNING:** This resource is deprecated and will be removed in the next major version.
    /// 
    /// ## Import
    /// 
    /// An existing Compute instance can be imported as a resource by name or IDconsole # By name
    /// 
    /// ```sh
    ///  $ pulumi import exoscale:index/compute:Compute vm1 vm1
    /// ```
    /// 
    /// # By ID
    /// 
    /// ```sh
    ///  $ pulumi import exoscale:index/compute:Compute vm1 eb556678-ec59-4be6-8c54-0406ae0f6da6
    /// ```
    /// 
    ///  [cloudinit]http://cloudinit.readthedocs.io/en/latest/ [compute-doc]https://community.exoscale.com/documentation/compute/ [d-compute_template]../d/compute_template.html [r-affinity]affinity.html [r-nic]nic.html [r-secondary_ipaddress]secondary_ipaddress.html [r-security_group]security_group.html [remote-exec]https://www.terraform.io/docs/provisioners/remote-exec.html [size]https://www.exoscale.com/pricing/#/compute/ [sshkeypair-doc]https://community.exoscale.com/documentation/compute/ssh-keypairs/ [template]https://www.exoscale.com/templates/ [zone]https://www.exoscale.com/datacenters/
    /// </summary>
    [ExoscaleResourceType("exoscale:index/compute:Compute")]
    public partial class Compute : Pulumi.CustomResource
    {
        /// <summary>
        /// A list of [Anti-Affinity Group][r-affinity] IDs (at creation time only; conflicts with `affinity_groups`).
        /// </summary>
        [Output("affinityGroupIds")]
        public Output<ImmutableArray<string>> AffinityGroupIds { get; private set; } = null!;

        /// <summary>
        /// A list of [Anti-Affinity Group][r-affinity] names (at creation time only; conflicts with `affinity_group_ids`).
        /// </summary>
        [Output("affinityGroups")]
        public Output<ImmutableArray<string>> AffinityGroups { get; private set; } = null!;

        /// <summary>
        /// The Compute instance root disk size in GiB (at least `10`).
        /// </summary>
        [Output("diskSize")]
        public Output<int> DiskSize { get; private set; } = null!;

        /// <summary>
        /// The displayed name of the Compute instance. Note: if the `hostname` attribute is not set, this attribute is also used to set the OS' *hostname* during creation, so the value must contain only alphanumeric and hyphen ("-") characters; it can be changed to any character during a later update. If neither `display_name` or `hostname` attributes are set, a random value will be generated automatically server-side.
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        [Output("gateway")]
        public Output<string> Gateway { get; private set; } = null!;

        /// <summary>
        /// The Compute instance hostname, must contain only alphanumeric and hyphen ("-") characters. If neither `display_name` or `hostname` attributes are set, a random value will be generated automatically server-side. Note: updating this attribute's value requires to reboot the instance.
        /// </summary>
        [Output("hostname")]
        public Output<string> Hostname { get; private set; } = null!;

        /// <summary>
        /// Boolean controlling if IPv4 is enabled (only supported value is `true`).
        /// </summary>
        [Output("ip4")]
        public Output<bool?> Ip4 { get; private set; } = null!;

        /// <summary>
        /// Boolean controlling if IPv6 is enabled.
        /// </summary>
        [Output("ip6")]
        public Output<bool?> Ip6 { get; private set; } = null!;

        /// <summary>
        /// The IPv6 address of the Compute instance main network interface.
        /// </summary>
        [Output("ip6Address")]
        public Output<string> Ip6Address { get; private set; } = null!;

        [Output("ip6Cidr")]
        public Output<string> Ip6Cidr { get; private set; } = null!;

        /// <summary>
        /// The IP address of the Compute instance main network interface.
        /// </summary>
        [Output("ipAddress")]
        public Output<string> IpAddress { get; private set; } = null!;

        /// <summary>
        /// The name of the [SSH key pair][sshkeypair-doc] to be installed.
        /// </summary>
        [Output("keyPair")]
        public Output<string?> KeyPair { get; private set; } = null!;

        /// <summary>
        /// The keyboard layout configuration (at creation time only). Supported values are: `de`, `de-ch`, `es`, `fi`, `fr`, `fr-be`, `fr-ch`, `is`, `it`, `jp`, `nl-be`, `no`, `pt`, `uk`, `us`.
        /// </summary>
        [Output("keyboard")]
        public Output<string?> Keyboard { get; private set; } = null!;

        /// <summary>
        /// **Deprecated** The Compute instance *hostname*. Use the `hostname` attribute instead.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The initial Compute instance password and/or encrypted password.
        /// </summary>
        [Output("password")]
        public Output<string> Password { get; private set; } = null!;

        /// <summary>
        /// The reverse DNS record of the Compute instance (must end with a `.`, e.g: `my-server.example.net.`).
        /// </summary>
        [Output("reverseDns")]
        public Output<string?> ReverseDns { get; private set; } = null!;

        /// <summary>
        /// A list of [Security Group][r-security_group] IDs (conflicts with `security_groups`).
        /// </summary>
        [Output("securityGroupIds")]
        public Output<ImmutableArray<string>> SecurityGroupIds { get; private set; } = null!;

        /// <summary>
        /// A list of [Security Group][r-security_group] names (conflicts with `security_group_ids`).
        /// </summary>
        [Output("securityGroups")]
        public Output<ImmutableArray<string>> SecurityGroups { get; private set; } = null!;

        /// <summary>
        /// The Compute instance [size][size], e.g. `Tiny`, `Small`, `Medium`, `Large` etc.
        /// </summary>
        [Output("size")]
        public Output<string?> Size { get; private set; } = null!;

        /// <summary>
        /// The state of the Compute instance, e.g. `Running` or `Stopped`
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// A dictionary of tags (key/value). To remove all tags, set `tags = {}`.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>> Tags { get; private set; } = null!;

        /// <summary>
        /// The name of the Compute instance [template][template]. Only *featured* templates are available, if you want to reference *custom templates* use the `template_id` attribute instead.
        /// </summary>
        [Output("template")]
        public Output<string> Template { get; private set; } = null!;

        /// <summary>
        /// The ID of the Compute instance [template][template]. Usage of the [`compute_template`][d-compute_template] data source is recommended.
        /// </summary>
        [Output("templateId")]
        public Output<string> TemplateId { get; private set; } = null!;

        /// <summary>
        /// A [cloud-init][cloudinit] configuration. Whenever possible don't base64-encode neither gzip it yourself, as this will be automatically taken care of on your behalf by the provider.
        /// </summary>
        [Output("userData")]
        public Output<string?> UserData { get; private set; } = null!;

        /// <summary>
        /// was the cloud-init configuration base64 encoded
        /// </summary>
        [Output("userDataBase64")]
        public Output<bool> UserDataBase64 { get; private set; } = null!;

        /// <summary>
        /// The user to use to connect to the Compute instance with SSH. If you've referenced a *custom template* in the resource, use the [`compute_template`][d-compute_template] data source `username` attribute instead.
        /// </summary>
        [Output("username")]
        public Output<string> Username { get; private set; } = null!;

        /// <summary>
        /// The name of the [zone][zone] to deploy the Compute instance into.
        /// </summary>
        [Output("zone")]
        public Output<string> Zone { get; private set; } = null!;


        /// <summary>
        /// Create a Compute resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Compute(string name, ComputeArgs args, CustomResourceOptions? options = null)
            : base("exoscale:index/compute:Compute", name, args ?? new ComputeArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Compute(string name, Input<string> id, ComputeState? state = null, CustomResourceOptions? options = null)
            : base("exoscale:index/compute:Compute", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Compute resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Compute Get(string name, Input<string> id, ComputeState? state = null, CustomResourceOptions? options = null)
        {
            return new Compute(name, id, state, options);
        }
    }

    public sealed class ComputeArgs : Pulumi.ResourceArgs
    {
        [Input("affinityGroupIds")]
        private InputList<string>? _affinityGroupIds;

        /// <summary>
        /// A list of [Anti-Affinity Group][r-affinity] IDs (at creation time only; conflicts with `affinity_groups`).
        /// </summary>
        public InputList<string> AffinityGroupIds
        {
            get => _affinityGroupIds ?? (_affinityGroupIds = new InputList<string>());
            set => _affinityGroupIds = value;
        }

        [Input("affinityGroups")]
        private InputList<string>? _affinityGroups;

        /// <summary>
        /// A list of [Anti-Affinity Group][r-affinity] names (at creation time only; conflicts with `affinity_group_ids`).
        /// </summary>
        public InputList<string> AffinityGroups
        {
            get => _affinityGroups ?? (_affinityGroups = new InputList<string>());
            set => _affinityGroups = value;
        }

        /// <summary>
        /// The Compute instance root disk size in GiB (at least `10`).
        /// </summary>
        [Input("diskSize", required: true)]
        public Input<int> DiskSize { get; set; } = null!;

        /// <summary>
        /// The displayed name of the Compute instance. Note: if the `hostname` attribute is not set, this attribute is also used to set the OS' *hostname* during creation, so the value must contain only alphanumeric and hyphen ("-") characters; it can be changed to any character during a later update. If neither `display_name` or `hostname` attributes are set, a random value will be generated automatically server-side.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// The Compute instance hostname, must contain only alphanumeric and hyphen ("-") characters. If neither `display_name` or `hostname` attributes are set, a random value will be generated automatically server-side. Note: updating this attribute's value requires to reboot the instance.
        /// </summary>
        [Input("hostname")]
        public Input<string>? Hostname { get; set; }

        /// <summary>
        /// Boolean controlling if IPv4 is enabled (only supported value is `true`).
        /// </summary>
        [Input("ip4")]
        public Input<bool>? Ip4 { get; set; }

        /// <summary>
        /// Boolean controlling if IPv6 is enabled.
        /// </summary>
        [Input("ip6")]
        public Input<bool>? Ip6 { get; set; }

        /// <summary>
        /// The name of the [SSH key pair][sshkeypair-doc] to be installed.
        /// </summary>
        [Input("keyPair")]
        public Input<string>? KeyPair { get; set; }

        /// <summary>
        /// The keyboard layout configuration (at creation time only). Supported values are: `de`, `de-ch`, `es`, `fi`, `fr`, `fr-be`, `fr-ch`, `is`, `it`, `jp`, `nl-be`, `no`, `pt`, `uk`, `us`.
        /// </summary>
        [Input("keyboard")]
        public Input<string>? Keyboard { get; set; }

        /// <summary>
        /// The reverse DNS record of the Compute instance (must end with a `.`, e.g: `my-server.example.net.`).
        /// </summary>
        [Input("reverseDns")]
        public Input<string>? ReverseDns { get; set; }

        [Input("securityGroupIds")]
        private InputList<string>? _securityGroupIds;

        /// <summary>
        /// A list of [Security Group][r-security_group] IDs (conflicts with `security_groups`).
        /// </summary>
        public InputList<string> SecurityGroupIds
        {
            get => _securityGroupIds ?? (_securityGroupIds = new InputList<string>());
            set => _securityGroupIds = value;
        }

        [Input("securityGroups")]
        private InputList<string>? _securityGroups;

        /// <summary>
        /// A list of [Security Group][r-security_group] names (conflicts with `security_group_ids`).
        /// </summary>
        public InputList<string> SecurityGroups
        {
            get => _securityGroups ?? (_securityGroups = new InputList<string>());
            set => _securityGroups = value;
        }

        /// <summary>
        /// The Compute instance [size][size], e.g. `Tiny`, `Small`, `Medium`, `Large` etc.
        /// </summary>
        [Input("size")]
        public Input<string>? Size { get; set; }

        /// <summary>
        /// The state of the Compute instance, e.g. `Running` or `Stopped`
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A dictionary of tags (key/value). To remove all tags, set `tags = {}`.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The name of the Compute instance [template][template]. Only *featured* templates are available, if you want to reference *custom templates* use the `template_id` attribute instead.
        /// </summary>
        [Input("template")]
        public Input<string>? Template { get; set; }

        /// <summary>
        /// The ID of the Compute instance [template][template]. Usage of the [`compute_template`][d-compute_template] data source is recommended.
        /// </summary>
        [Input("templateId")]
        public Input<string>? TemplateId { get; set; }

        /// <summary>
        /// A [cloud-init][cloudinit] configuration. Whenever possible don't base64-encode neither gzip it yourself, as this will be automatically taken care of on your behalf by the provider.
        /// </summary>
        [Input("userData")]
        public Input<string>? UserData { get; set; }

        /// <summary>
        /// The name of the [zone][zone] to deploy the Compute instance into.
        /// </summary>
        [Input("zone", required: true)]
        public Input<string> Zone { get; set; } = null!;

        public ComputeArgs()
        {
        }
    }

    public sealed class ComputeState : Pulumi.ResourceArgs
    {
        [Input("affinityGroupIds")]
        private InputList<string>? _affinityGroupIds;

        /// <summary>
        /// A list of [Anti-Affinity Group][r-affinity] IDs (at creation time only; conflicts with `affinity_groups`).
        /// </summary>
        public InputList<string> AffinityGroupIds
        {
            get => _affinityGroupIds ?? (_affinityGroupIds = new InputList<string>());
            set => _affinityGroupIds = value;
        }

        [Input("affinityGroups")]
        private InputList<string>? _affinityGroups;

        /// <summary>
        /// A list of [Anti-Affinity Group][r-affinity] names (at creation time only; conflicts with `affinity_group_ids`).
        /// </summary>
        public InputList<string> AffinityGroups
        {
            get => _affinityGroups ?? (_affinityGroups = new InputList<string>());
            set => _affinityGroups = value;
        }

        /// <summary>
        /// The Compute instance root disk size in GiB (at least `10`).
        /// </summary>
        [Input("diskSize")]
        public Input<int>? DiskSize { get; set; }

        /// <summary>
        /// The displayed name of the Compute instance. Note: if the `hostname` attribute is not set, this attribute is also used to set the OS' *hostname* during creation, so the value must contain only alphanumeric and hyphen ("-") characters; it can be changed to any character during a later update. If neither `display_name` or `hostname` attributes are set, a random value will be generated automatically server-side.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("gateway")]
        public Input<string>? Gateway { get; set; }

        /// <summary>
        /// The Compute instance hostname, must contain only alphanumeric and hyphen ("-") characters. If neither `display_name` or `hostname` attributes are set, a random value will be generated automatically server-side. Note: updating this attribute's value requires to reboot the instance.
        /// </summary>
        [Input("hostname")]
        public Input<string>? Hostname { get; set; }

        /// <summary>
        /// Boolean controlling if IPv4 is enabled (only supported value is `true`).
        /// </summary>
        [Input("ip4")]
        public Input<bool>? Ip4 { get; set; }

        /// <summary>
        /// Boolean controlling if IPv6 is enabled.
        /// </summary>
        [Input("ip6")]
        public Input<bool>? Ip6 { get; set; }

        /// <summary>
        /// The IPv6 address of the Compute instance main network interface.
        /// </summary>
        [Input("ip6Address")]
        public Input<string>? Ip6Address { get; set; }

        [Input("ip6Cidr")]
        public Input<string>? Ip6Cidr { get; set; }

        /// <summary>
        /// The IP address of the Compute instance main network interface.
        /// </summary>
        [Input("ipAddress")]
        public Input<string>? IpAddress { get; set; }

        /// <summary>
        /// The name of the [SSH key pair][sshkeypair-doc] to be installed.
        /// </summary>
        [Input("keyPair")]
        public Input<string>? KeyPair { get; set; }

        /// <summary>
        /// The keyboard layout configuration (at creation time only). Supported values are: `de`, `de-ch`, `es`, `fi`, `fr`, `fr-be`, `fr-ch`, `is`, `it`, `jp`, `nl-be`, `no`, `pt`, `uk`, `us`.
        /// </summary>
        [Input("keyboard")]
        public Input<string>? Keyboard { get; set; }

        /// <summary>
        /// **Deprecated** The Compute instance *hostname*. Use the `hostname` attribute instead.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The initial Compute instance password and/or encrypted password.
        /// </summary>
        [Input("password")]
        public Input<string>? Password { get; set; }

        /// <summary>
        /// The reverse DNS record of the Compute instance (must end with a `.`, e.g: `my-server.example.net.`).
        /// </summary>
        [Input("reverseDns")]
        public Input<string>? ReverseDns { get; set; }

        [Input("securityGroupIds")]
        private InputList<string>? _securityGroupIds;

        /// <summary>
        /// A list of [Security Group][r-security_group] IDs (conflicts with `security_groups`).
        /// </summary>
        public InputList<string> SecurityGroupIds
        {
            get => _securityGroupIds ?? (_securityGroupIds = new InputList<string>());
            set => _securityGroupIds = value;
        }

        [Input("securityGroups")]
        private InputList<string>? _securityGroups;

        /// <summary>
        /// A list of [Security Group][r-security_group] names (conflicts with `security_group_ids`).
        /// </summary>
        public InputList<string> SecurityGroups
        {
            get => _securityGroups ?? (_securityGroups = new InputList<string>());
            set => _securityGroups = value;
        }

        /// <summary>
        /// The Compute instance [size][size], e.g. `Tiny`, `Small`, `Medium`, `Large` etc.
        /// </summary>
        [Input("size")]
        public Input<string>? Size { get; set; }

        /// <summary>
        /// The state of the Compute instance, e.g. `Running` or `Stopped`
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A dictionary of tags (key/value). To remove all tags, set `tags = {}`.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The name of the Compute instance [template][template]. Only *featured* templates are available, if you want to reference *custom templates* use the `template_id` attribute instead.
        /// </summary>
        [Input("template")]
        public Input<string>? Template { get; set; }

        /// <summary>
        /// The ID of the Compute instance [template][template]. Usage of the [`compute_template`][d-compute_template] data source is recommended.
        /// </summary>
        [Input("templateId")]
        public Input<string>? TemplateId { get; set; }

        /// <summary>
        /// A [cloud-init][cloudinit] configuration. Whenever possible don't base64-encode neither gzip it yourself, as this will be automatically taken care of on your behalf by the provider.
        /// </summary>
        [Input("userData")]
        public Input<string>? UserData { get; set; }

        /// <summary>
        /// was the cloud-init configuration base64 encoded
        /// </summary>
        [Input("userDataBase64")]
        public Input<bool>? UserDataBase64 { get; set; }

        /// <summary>
        /// The user to use to connect to the Compute instance with SSH. If you've referenced a *custom template* in the resource, use the [`compute_template`][d-compute_template] data source `username` attribute instead.
        /// </summary>
        [Input("username")]
        public Input<string>? Username { get; set; }

        /// <summary>
        /// The name of the [zone][zone] to deploy the Compute instance into.
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public ComputeState()
        {
        }
    }
}
