// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Exoscale
{
    public static class GetDomainRecord
    {
        /// <summary>
        /// Provides information on [domain records][r-domain_record] hosted on [Exoscale DNS][exo-dns].
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// The example below matches all domain records that match with name `mailserver` and Record type `MX`.
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Exoscale = Pulumi.Exoscale;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var mycompany = Output.Create(Exoscale.GetDomain.InvokeAsync(new Exoscale.GetDomainArgs
        ///         {
        ///             Name = my_company.Com,
        ///         }));
        ///         var mycompanyMailservers = mycompany.Apply(mycompany =&gt; Output.Create(Exoscale.GetDomainRecord.InvokeAsync(new Exoscale.GetDomainRecordArgs
        ///         {
        ///             Domain = mycompany.Name,
        ///             Filter = new Exoscale.Inputs.GetDomainRecordFilterArgs
        ///             {
        ///                 Name = "mailserver",
        ///                 RecordeType = "MX",
        ///             },
        ///         })));
        ///         var mycompanyNameservers = mycompany.Apply(mycompany =&gt; Output.Create(Exoscale.GetDomainRecord.InvokeAsync(new Exoscale.GetDomainRecordArgs
        ///         {
        ///             Domain = mycompany.Name,
        ///             Filter = new Exoscale.Inputs.GetDomainRecordFilterArgs
        ///             {
        ///                 ContentRegex = "ns.*",
        ///             },
        ///         })));
        ///         this.FirstDomainRecordName = mycompanyMailservers.Apply(mycompanyMailservers =&gt; mycompanyMailservers.Records?[0]?.Name);
        ///         this.FirstDomainRecordContent = mycompanyNameservers.Apply(mycompanyNameservers =&gt; mycompanyNameservers.Records?[0]?.Content);
        ///     }
        /// 
        ///     [Output("firstDomainRecordName")]
        ///     public Output&lt;string&gt; FirstDomainRecordName { get; set; }
        ///     [Output("firstDomainRecordContent")]
        ///     public Output&lt;string&gt; FirstDomainRecordContent { get; set; }
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetDomainRecordResult> InvokeAsync(GetDomainRecordArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetDomainRecordResult>("exoscale:index/getDomainRecord:getDomainRecord", args ?? new GetDomainRecordArgs(), options.WithDefaults());

        /// <summary>
        /// Provides information on [domain records][r-domain_record] hosted on [Exoscale DNS][exo-dns].
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// The example below matches all domain records that match with name `mailserver` and Record type `MX`.
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Exoscale = Pulumi.Exoscale;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var mycompany = Output.Create(Exoscale.GetDomain.InvokeAsync(new Exoscale.GetDomainArgs
        ///         {
        ///             Name = my_company.Com,
        ///         }));
        ///         var mycompanyMailservers = mycompany.Apply(mycompany =&gt; Output.Create(Exoscale.GetDomainRecord.InvokeAsync(new Exoscale.GetDomainRecordArgs
        ///         {
        ///             Domain = mycompany.Name,
        ///             Filter = new Exoscale.Inputs.GetDomainRecordFilterArgs
        ///             {
        ///                 Name = "mailserver",
        ///                 RecordeType = "MX",
        ///             },
        ///         })));
        ///         var mycompanyNameservers = mycompany.Apply(mycompany =&gt; Output.Create(Exoscale.GetDomainRecord.InvokeAsync(new Exoscale.GetDomainRecordArgs
        ///         {
        ///             Domain = mycompany.Name,
        ///             Filter = new Exoscale.Inputs.GetDomainRecordFilterArgs
        ///             {
        ///                 ContentRegex = "ns.*",
        ///             },
        ///         })));
        ///         this.FirstDomainRecordName = mycompanyMailservers.Apply(mycompanyMailservers =&gt; mycompanyMailservers.Records?[0]?.Name);
        ///         this.FirstDomainRecordContent = mycompanyNameservers.Apply(mycompanyNameservers =&gt; mycompanyNameservers.Records?[0]?.Content);
        ///     }
        /// 
        ///     [Output("firstDomainRecordName")]
        ///     public Output&lt;string&gt; FirstDomainRecordName { get; set; }
        ///     [Output("firstDomainRecordContent")]
        ///     public Output&lt;string&gt; FirstDomainRecordContent { get; set; }
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetDomainRecordResult> Invoke(GetDomainRecordInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetDomainRecordResult>("exoscale:index/getDomainRecord:getDomainRecord", args ?? new GetDomainRecordInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDomainRecordArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the [domain][r-domain] where to look for domain records.
        /// </summary>
        [Input("domain", required: true)]
        public string Domain { get; set; } = null!;

        /// <summary>
        /// Filter to apply when looking up domain records.
        /// </summary>
        [Input("filter", required: true)]
        public Inputs.GetDomainRecordFilterArgs Filter { get; set; } = null!;

        public GetDomainRecordArgs()
        {
        }
    }

    public sealed class GetDomainRecordInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the [domain][r-domain] where to look for domain records.
        /// </summary>
        [Input("domain", required: true)]
        public Input<string> Domain { get; set; } = null!;

        /// <summary>
        /// Filter to apply when looking up domain records.
        /// </summary>
        [Input("filter", required: true)]
        public Input<Inputs.GetDomainRecordFilterInputArgs> Filter { get; set; } = null!;

        public GetDomainRecordInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetDomainRecordResult
    {
        public readonly string Domain;
        public readonly Outputs.GetDomainRecordFilterResult Filter;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<Outputs.GetDomainRecordRecordResult> Records;

        [OutputConstructor]
        private GetDomainRecordResult(
            string domain,

            Outputs.GetDomainRecordFilterResult filter,

            string id,

            ImmutableArray<Outputs.GetDomainRecordRecordResult> records)
        {
            Domain = domain;
            Filter = filter;
            Id = id;
            Records = records;
        }
    }
}
