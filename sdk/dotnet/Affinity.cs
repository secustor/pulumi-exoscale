// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Exoscale
{
    /// <summary>
    /// Provides an Exoscale [Anti-Affinity Group][aag-doc] resource. This can be used to create and delete Anti-Affinity Groups.
    /// 
    /// !&gt; **WARNING:** This resource is deprecated and will be removed in the next major version.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Exoscale = Pulumi.Exoscale;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var cluster = new Exoscale.Affinity("cluster", new Exoscale.AffinityArgs
    ///         {
    ///             Description = "HA Cluster",
    ///             Type = "host anti-affinity",
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// An existing Anti-Affinity Group can be imported as a resource by name or IDconsole # By name
    /// 
    /// ```sh
    ///  $ pulumi import exoscale:index/affinity:Affinity mygroup mygroup
    /// ```
    /// 
    /// # By ID
    /// 
    /// ```sh
    ///  $ pulumi import exoscale:index/affinity:Affinity mygroup eb556678-ec59-4be6-8c54-0406ae0f6da6
    /// ```
    /// 
    ///  [aag-doc]https://community.exoscale.com/documentation/compute/anti-affinity-groups/
    /// </summary>
    [ExoscaleResourceType("exoscale:index/affinity:Affinity")]
    public partial class Affinity : Pulumi.CustomResource
    {
        /// <summary>
        /// A free-form text describing the Anti-Affinity Group purpose.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The name of the Anti-Affinity Group.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The type of the Anti-Affinity Group (`host anti-affinity` is the only supported value).
        /// </summary>
        [Output("type")]
        public Output<string?> Type { get; private set; } = null!;

        /// <summary>
        /// The IDs of the Compute instance resources member of the Anti-Affinity Group.
        /// </summary>
        [Output("virtualMachineIds")]
        public Output<ImmutableArray<string>> VirtualMachineIds { get; private set; } = null!;


        /// <summary>
        /// Create a Affinity resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Affinity(string name, AffinityArgs? args = null, CustomResourceOptions? options = null)
            : base("exoscale:index/affinity:Affinity", name, args ?? new AffinityArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Affinity(string name, Input<string> id, AffinityState? state = null, CustomResourceOptions? options = null)
            : base("exoscale:index/affinity:Affinity", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Affinity resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Affinity Get(string name, Input<string> id, AffinityState? state = null, CustomResourceOptions? options = null)
        {
            return new Affinity(name, id, state, options);
        }
    }

    public sealed class AffinityArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// A free-form text describing the Anti-Affinity Group purpose.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The name of the Anti-Affinity Group.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The type of the Anti-Affinity Group (`host anti-affinity` is the only supported value).
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public AffinityArgs()
        {
        }
    }

    public sealed class AffinityState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// A free-form text describing the Anti-Affinity Group purpose.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The name of the Anti-Affinity Group.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The type of the Anti-Affinity Group (`host anti-affinity` is the only supported value).
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        [Input("virtualMachineIds")]
        private InputList<string>? _virtualMachineIds;

        /// <summary>
        /// The IDs of the Compute instance resources member of the Anti-Affinity Group.
        /// </summary>
        public InputList<string> VirtualMachineIds
        {
            get => _virtualMachineIds ?? (_virtualMachineIds = new InputList<string>());
            set => _virtualMachineIds = value;
        }

        public AffinityState()
        {
        }
    }
}
