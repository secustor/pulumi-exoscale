# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetAntiAffinityGroupResult',
    'AwaitableGetAntiAffinityGroupResult',
    'get_anti_affinity_group',
    'get_anti_affinity_group_output',
]

@pulumi.output_type
class GetAntiAffinityGroupResult:
    """
    A collection of values returned by getAntiAffinityGroup.
    """
    def __init__(__self__, id=None, instances=None, name=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instances and not isinstance(instances, list):
            raise TypeError("Expected argument 'instances' to be a list")
        pulumi.set(__self__, "instances", instances)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def instances(self) -> Sequence[str]:
        """
        A list of Compute instance IDs belonging to the Anti-Affinity Group.
        """
        return pulumi.get(self, "instances")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


class AwaitableGetAntiAffinityGroupResult(GetAntiAffinityGroupResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAntiAffinityGroupResult(
            id=self.id,
            instances=self.instances,
            name=self.name)


def get_anti_affinity_group(id: Optional[str] = None,
                            name: Optional[str] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAntiAffinityGroupResult:
    """
    Provides information on an [Anti-Affinity Group][aag-doc] for use in other resources such as a [`Compute`][r-compute] resource.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_exoscale as exoscale

    zone = "ch-gva-2"
    web = exoscale.get_anti_affinity_group(name="web")
    ubuntu = exoscale.get_compute_template(zone=zone,
        name="Linux Ubuntu 20.04 LTS 64-bit")
    my_server = exoscale.ComputeInstance("my-server",
        zone=zone,
        type="standard.medium",
        template_id=ubuntu.id,
        disk_size=20,
        anti_affinity_group_ids=[web.id])
    ```


    :param str id: The ID of the Anti-Affinity Group (conflicts with `name`).
    :param str name: The name of the Anti-Affinity Group (conflicts with `id`).
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('exoscale:index/getAntiAffinityGroup:getAntiAffinityGroup', __args__, opts=opts, typ=GetAntiAffinityGroupResult).value

    return AwaitableGetAntiAffinityGroupResult(
        id=__ret__.id,
        instances=__ret__.instances,
        name=__ret__.name)


@_utilities.lift_output_func(get_anti_affinity_group)
def get_anti_affinity_group_output(id: Optional[pulumi.Input[Optional[str]]] = None,
                                   name: Optional[pulumi.Input[Optional[str]]] = None,
                                   opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetAntiAffinityGroupResult]:
    """
    Provides information on an [Anti-Affinity Group][aag-doc] for use in other resources such as a [`Compute`][r-compute] resource.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_exoscale as exoscale

    zone = "ch-gva-2"
    web = exoscale.get_anti_affinity_group(name="web")
    ubuntu = exoscale.get_compute_template(zone=zone,
        name="Linux Ubuntu 20.04 LTS 64-bit")
    my_server = exoscale.ComputeInstance("my-server",
        zone=zone,
        type="standard.medium",
        template_id=ubuntu.id,
        disk_size=20,
        anti_affinity_group_ids=[web.id])
    ```


    :param str id: The ID of the Anti-Affinity Group (conflicts with `name`).
    :param str name: The name of the Anti-Affinity Group (conflicts with `id`).
    """
    ...
