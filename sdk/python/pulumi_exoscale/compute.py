# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['ComputeArgs', 'Compute']

@pulumi.input_type
class ComputeArgs:
    def __init__(__self__, *,
                 disk_size: pulumi.Input[int],
                 zone: pulumi.Input[str],
                 affinity_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 affinity_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 hostname: Optional[pulumi.Input[str]] = None,
                 ip4: Optional[pulumi.Input[bool]] = None,
                 ip6: Optional[pulumi.Input[bool]] = None,
                 key_pair: Optional[pulumi.Input[str]] = None,
                 keyboard: Optional[pulumi.Input[str]] = None,
                 reverse_dns: Optional[pulumi.Input[str]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 size: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 template: Optional[pulumi.Input[str]] = None,
                 template_id: Optional[pulumi.Input[str]] = None,
                 user_data: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Compute resource.
        :param pulumi.Input[int] disk_size: The Compute instance root disk size in GiB (at least `10`).
        :param pulumi.Input[str] zone: The name of the [zone][zone] to deploy the Compute instance into.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] affinity_group_ids: A list of [Anti-Affinity Group][r-affinity] IDs (at creation time only; conflicts with `affinity_groups`).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] affinity_groups: A list of [Anti-Affinity Group][r-affinity] names (at creation time only; conflicts with `affinity_group_ids`).
        :param pulumi.Input[str] display_name: The displayed name of the Compute instance. Note: if the `hostname` attribute is not set, this attribute is also used to set the OS' *hostname* during creation, so the value must contain only alphanumeric and hyphen ("-") characters; it can be changed to any character during a later update. If neither `display_name` or `hostname` attributes are set, a random value will be generated automatically server-side.
        :param pulumi.Input[str] hostname: The Compute instance hostname, must contain only alphanumeric and hyphen ("-") characters. If neither `display_name` or `hostname` attributes are set, a random value will be generated automatically server-side. Note: updating this attribute's value requires to reboot the instance.
        :param pulumi.Input[bool] ip4: Boolean controlling if IPv4 is enabled (only supported value is `true`).
        :param pulumi.Input[bool] ip6: Boolean controlling if IPv6 is enabled.
        :param pulumi.Input[str] key_pair: The name of the [SSH key pair][sshkeypair-doc] to be installed.
        :param pulumi.Input[str] keyboard: The keyboard layout configuration (at creation time only). Supported values are: `de`, `de-ch`, `es`, `fi`, `fr`, `fr-be`, `fr-ch`, `is`, `it`, `jp`, `nl-be`, `no`, `pt`, `uk`, `us`.
        :param pulumi.Input[str] reverse_dns: The reverse DNS record of the Compute instance (must end with a `.`, e.g: `my-server.example.net.`).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_ids: A list of [Security Group][r-security_group] IDs (conflicts with `security_groups`).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_groups: A list of [Security Group][r-security_group] names (conflicts with `security_group_ids`).
        :param pulumi.Input[str] size: The Compute instance [size][size], e.g. `Tiny`, `Small`, `Medium`, `Large` etc.
        :param pulumi.Input[str] state: The state of the Compute instance, e.g. `Running` or `Stopped`
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: A dictionary of tags (key/value). To remove all tags, set `tags = {}`.
        :param pulumi.Input[str] template: The name of the Compute instance [template][template]. Only *featured* templates are available, if you want to reference *custom templates* use the `template_id` attribute instead.
        :param pulumi.Input[str] template_id: The ID of the Compute instance [template][template]. Usage of the [`compute_template`][d-compute_template] data source is recommended.
        :param pulumi.Input[str] user_data: A [cloud-init][cloudinit] configuration. Whenever possible don't base64-encode neither gzip it yourself, as this will be automatically taken care of on your behalf by the provider.
        """
        pulumi.set(__self__, "disk_size", disk_size)
        pulumi.set(__self__, "zone", zone)
        if affinity_group_ids is not None:
            pulumi.set(__self__, "affinity_group_ids", affinity_group_ids)
        if affinity_groups is not None:
            pulumi.set(__self__, "affinity_groups", affinity_groups)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if ip4 is not None:
            pulumi.set(__self__, "ip4", ip4)
        if ip6 is not None:
            pulumi.set(__self__, "ip6", ip6)
        if key_pair is not None:
            pulumi.set(__self__, "key_pair", key_pair)
        if keyboard is not None:
            pulumi.set(__self__, "keyboard", keyboard)
        if reverse_dns is not None:
            pulumi.set(__self__, "reverse_dns", reverse_dns)
        if security_group_ids is not None:
            pulumi.set(__self__, "security_group_ids", security_group_ids)
        if security_groups is not None:
            pulumi.set(__self__, "security_groups", security_groups)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if template is not None:
            pulumi.set(__self__, "template", template)
        if template_id is not None:
            pulumi.set(__self__, "template_id", template_id)
        if user_data is not None:
            pulumi.set(__self__, "user_data", user_data)

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> pulumi.Input[int]:
        """
        The Compute instance root disk size in GiB (at least `10`).
        """
        return pulumi.get(self, "disk_size")

    @disk_size.setter
    def disk_size(self, value: pulumi.Input[int]):
        pulumi.set(self, "disk_size", value)

    @property
    @pulumi.getter
    def zone(self) -> pulumi.Input[str]:
        """
        The name of the [zone][zone] to deploy the Compute instance into.
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: pulumi.Input[str]):
        pulumi.set(self, "zone", value)

    @property
    @pulumi.getter(name="affinityGroupIds")
    def affinity_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of [Anti-Affinity Group][r-affinity] IDs (at creation time only; conflicts with `affinity_groups`).
        """
        return pulumi.get(self, "affinity_group_ids")

    @affinity_group_ids.setter
    def affinity_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "affinity_group_ids", value)

    @property
    @pulumi.getter(name="affinityGroups")
    def affinity_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of [Anti-Affinity Group][r-affinity] names (at creation time only; conflicts with `affinity_group_ids`).
        """
        return pulumi.get(self, "affinity_groups")

    @affinity_groups.setter
    def affinity_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "affinity_groups", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        The displayed name of the Compute instance. Note: if the `hostname` attribute is not set, this attribute is also used to set the OS' *hostname* during creation, so the value must contain only alphanumeric and hyphen ("-") characters; it can be changed to any character during a later update. If neither `display_name` or `hostname` attributes are set, a random value will be generated automatically server-side.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input[str]]:
        """
        The Compute instance hostname, must contain only alphanumeric and hyphen ("-") characters. If neither `display_name` or `hostname` attributes are set, a random value will be generated automatically server-side. Note: updating this attribute's value requires to reboot the instance.
        """
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter
    def ip4(self) -> Optional[pulumi.Input[bool]]:
        """
        Boolean controlling if IPv4 is enabled (only supported value is `true`).
        """
        return pulumi.get(self, "ip4")

    @ip4.setter
    def ip4(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ip4", value)

    @property
    @pulumi.getter
    def ip6(self) -> Optional[pulumi.Input[bool]]:
        """
        Boolean controlling if IPv6 is enabled.
        """
        return pulumi.get(self, "ip6")

    @ip6.setter
    def ip6(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ip6", value)

    @property
    @pulumi.getter(name="keyPair")
    def key_pair(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the [SSH key pair][sshkeypair-doc] to be installed.
        """
        return pulumi.get(self, "key_pair")

    @key_pair.setter
    def key_pair(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_pair", value)

    @property
    @pulumi.getter
    def keyboard(self) -> Optional[pulumi.Input[str]]:
        """
        The keyboard layout configuration (at creation time only). Supported values are: `de`, `de-ch`, `es`, `fi`, `fr`, `fr-be`, `fr-ch`, `is`, `it`, `jp`, `nl-be`, `no`, `pt`, `uk`, `us`.
        """
        return pulumi.get(self, "keyboard")

    @keyboard.setter
    def keyboard(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keyboard", value)

    @property
    @pulumi.getter(name="reverseDns")
    def reverse_dns(self) -> Optional[pulumi.Input[str]]:
        """
        The reverse DNS record of the Compute instance (must end with a `.`, e.g: `my-server.example.net.`).
        """
        return pulumi.get(self, "reverse_dns")

    @reverse_dns.setter
    def reverse_dns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reverse_dns", value)

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of [Security Group][r-security_group] IDs (conflicts with `security_groups`).
        """
        return pulumi.get(self, "security_group_ids")

    @security_group_ids.setter
    def security_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_group_ids", value)

    @property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of [Security Group][r-security_group] names (conflicts with `security_group_ids`).
        """
        return pulumi.get(self, "security_groups")

    @security_groups.setter
    def security_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_groups", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[str]]:
        """
        The Compute instance [size][size], e.g. `Tiny`, `Small`, `Medium`, `Large` etc.
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        """
        The state of the Compute instance, e.g. `Running` or `Stopped`
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A dictionary of tags (key/value). To remove all tags, set `tags = {}`.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def template(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the Compute instance [template][template]. Only *featured* templates are available, if you want to reference *custom templates* use the `template_id` attribute instead.
        """
        return pulumi.get(self, "template")

    @template.setter
    def template(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "template", value)

    @property
    @pulumi.getter(name="templateId")
    def template_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the Compute instance [template][template]. Usage of the [`compute_template`][d-compute_template] data source is recommended.
        """
        return pulumi.get(self, "template_id")

    @template_id.setter
    def template_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "template_id", value)

    @property
    @pulumi.getter(name="userData")
    def user_data(self) -> Optional[pulumi.Input[str]]:
        """
        A [cloud-init][cloudinit] configuration. Whenever possible don't base64-encode neither gzip it yourself, as this will be automatically taken care of on your behalf by the provider.
        """
        return pulumi.get(self, "user_data")

    @user_data.setter
    def user_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_data", value)


@pulumi.input_type
class _ComputeState:
    def __init__(__self__, *,
                 affinity_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 affinity_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 disk_size: Optional[pulumi.Input[int]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 gateway: Optional[pulumi.Input[str]] = None,
                 hostname: Optional[pulumi.Input[str]] = None,
                 ip4: Optional[pulumi.Input[bool]] = None,
                 ip6: Optional[pulumi.Input[bool]] = None,
                 ip6_address: Optional[pulumi.Input[str]] = None,
                 ip6_cidr: Optional[pulumi.Input[str]] = None,
                 ip_address: Optional[pulumi.Input[str]] = None,
                 key_pair: Optional[pulumi.Input[str]] = None,
                 keyboard: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 reverse_dns: Optional[pulumi.Input[str]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 size: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 template: Optional[pulumi.Input[str]] = None,
                 template_id: Optional[pulumi.Input[str]] = None,
                 user_data: Optional[pulumi.Input[str]] = None,
                 user_data_base64: Optional[pulumi.Input[bool]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 zone: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Compute resources.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] affinity_group_ids: A list of [Anti-Affinity Group][r-affinity] IDs (at creation time only; conflicts with `affinity_groups`).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] affinity_groups: A list of [Anti-Affinity Group][r-affinity] names (at creation time only; conflicts with `affinity_group_ids`).
        :param pulumi.Input[int] disk_size: The Compute instance root disk size in GiB (at least `10`).
        :param pulumi.Input[str] display_name: The displayed name of the Compute instance. Note: if the `hostname` attribute is not set, this attribute is also used to set the OS' *hostname* during creation, so the value must contain only alphanumeric and hyphen ("-") characters; it can be changed to any character during a later update. If neither `display_name` or `hostname` attributes are set, a random value will be generated automatically server-side.
        :param pulumi.Input[str] hostname: The Compute instance hostname, must contain only alphanumeric and hyphen ("-") characters. If neither `display_name` or `hostname` attributes are set, a random value will be generated automatically server-side. Note: updating this attribute's value requires to reboot the instance.
        :param pulumi.Input[bool] ip4: Boolean controlling if IPv4 is enabled (only supported value is `true`).
        :param pulumi.Input[bool] ip6: Boolean controlling if IPv6 is enabled.
        :param pulumi.Input[str] ip6_address: The IPv6 address of the Compute instance main network interface.
        :param pulumi.Input[str] ip_address: The IP address of the Compute instance main network interface.
        :param pulumi.Input[str] key_pair: The name of the [SSH key pair][sshkeypair-doc] to be installed.
        :param pulumi.Input[str] keyboard: The keyboard layout configuration (at creation time only). Supported values are: `de`, `de-ch`, `es`, `fi`, `fr`, `fr-be`, `fr-ch`, `is`, `it`, `jp`, `nl-be`, `no`, `pt`, `uk`, `us`.
        :param pulumi.Input[str] name: **Deprecated** The Compute instance *hostname*. Use the `hostname` attribute instead.
        :param pulumi.Input[str] password: The initial Compute instance password and/or encrypted password.
        :param pulumi.Input[str] reverse_dns: The reverse DNS record of the Compute instance (must end with a `.`, e.g: `my-server.example.net.`).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_ids: A list of [Security Group][r-security_group] IDs (conflicts with `security_groups`).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_groups: A list of [Security Group][r-security_group] names (conflicts with `security_group_ids`).
        :param pulumi.Input[str] size: The Compute instance [size][size], e.g. `Tiny`, `Small`, `Medium`, `Large` etc.
        :param pulumi.Input[str] state: The state of the Compute instance, e.g. `Running` or `Stopped`
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: A dictionary of tags (key/value). To remove all tags, set `tags = {}`.
        :param pulumi.Input[str] template: The name of the Compute instance [template][template]. Only *featured* templates are available, if you want to reference *custom templates* use the `template_id` attribute instead.
        :param pulumi.Input[str] template_id: The ID of the Compute instance [template][template]. Usage of the [`compute_template`][d-compute_template] data source is recommended.
        :param pulumi.Input[str] user_data: A [cloud-init][cloudinit] configuration. Whenever possible don't base64-encode neither gzip it yourself, as this will be automatically taken care of on your behalf by the provider.
        :param pulumi.Input[bool] user_data_base64: was the cloud-init configuration base64 encoded
        :param pulumi.Input[str] username: The user to use to connect to the Compute instance with SSH. If you've referenced a *custom template* in the resource, use the [`compute_template`][d-compute_template] data source `username` attribute instead.
        :param pulumi.Input[str] zone: The name of the [zone][zone] to deploy the Compute instance into.
        """
        if affinity_group_ids is not None:
            pulumi.set(__self__, "affinity_group_ids", affinity_group_ids)
        if affinity_groups is not None:
            pulumi.set(__self__, "affinity_groups", affinity_groups)
        if disk_size is not None:
            pulumi.set(__self__, "disk_size", disk_size)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if ip4 is not None:
            pulumi.set(__self__, "ip4", ip4)
        if ip6 is not None:
            pulumi.set(__self__, "ip6", ip6)
        if ip6_address is not None:
            pulumi.set(__self__, "ip6_address", ip6_address)
        if ip6_cidr is not None:
            pulumi.set(__self__, "ip6_cidr", ip6_cidr)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if key_pair is not None:
            pulumi.set(__self__, "key_pair", key_pair)
        if keyboard is not None:
            pulumi.set(__self__, "keyboard", keyboard)
        if name is not None:
            warnings.warn("""use `hostname` attribute instead""", DeprecationWarning)
            pulumi.log.warn("""name is deprecated: use `hostname` attribute instead""")
        if name is not None:
            pulumi.set(__self__, "name", name)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if reverse_dns is not None:
            pulumi.set(__self__, "reverse_dns", reverse_dns)
        if security_group_ids is not None:
            pulumi.set(__self__, "security_group_ids", security_group_ids)
        if security_groups is not None:
            pulumi.set(__self__, "security_groups", security_groups)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if template is not None:
            pulumi.set(__self__, "template", template)
        if template_id is not None:
            pulumi.set(__self__, "template_id", template_id)
        if user_data is not None:
            pulumi.set(__self__, "user_data", user_data)
        if user_data_base64 is not None:
            pulumi.set(__self__, "user_data_base64", user_data_base64)
        if username is not None:
            warnings.warn("""broken, use `compute_template` data source `username` attribute""", DeprecationWarning)
            pulumi.log.warn("""username is deprecated: broken, use `compute_template` data source `username` attribute""")
        if username is not None:
            pulumi.set(__self__, "username", username)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="affinityGroupIds")
    def affinity_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of [Anti-Affinity Group][r-affinity] IDs (at creation time only; conflicts with `affinity_groups`).
        """
        return pulumi.get(self, "affinity_group_ids")

    @affinity_group_ids.setter
    def affinity_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "affinity_group_ids", value)

    @property
    @pulumi.getter(name="affinityGroups")
    def affinity_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of [Anti-Affinity Group][r-affinity] names (at creation time only; conflicts with `affinity_group_ids`).
        """
        return pulumi.get(self, "affinity_groups")

    @affinity_groups.setter
    def affinity_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "affinity_groups", value)

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> Optional[pulumi.Input[int]]:
        """
        The Compute instance root disk size in GiB (at least `10`).
        """
        return pulumi.get(self, "disk_size")

    @disk_size.setter
    def disk_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "disk_size", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        The displayed name of the Compute instance. Note: if the `hostname` attribute is not set, this attribute is also used to set the OS' *hostname* during creation, so the value must contain only alphanumeric and hyphen ("-") characters; it can be changed to any character during a later update. If neither `display_name` or `hostname` attributes are set, a random value will be generated automatically server-side.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def gateway(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gateway")

    @gateway.setter
    def gateway(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gateway", value)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input[str]]:
        """
        The Compute instance hostname, must contain only alphanumeric and hyphen ("-") characters. If neither `display_name` or `hostname` attributes are set, a random value will be generated automatically server-side. Note: updating this attribute's value requires to reboot the instance.
        """
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter
    def ip4(self) -> Optional[pulumi.Input[bool]]:
        """
        Boolean controlling if IPv4 is enabled (only supported value is `true`).
        """
        return pulumi.get(self, "ip4")

    @ip4.setter
    def ip4(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ip4", value)

    @property
    @pulumi.getter
    def ip6(self) -> Optional[pulumi.Input[bool]]:
        """
        Boolean controlling if IPv6 is enabled.
        """
        return pulumi.get(self, "ip6")

    @ip6.setter
    def ip6(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ip6", value)

    @property
    @pulumi.getter(name="ip6Address")
    def ip6_address(self) -> Optional[pulumi.Input[str]]:
        """
        The IPv6 address of the Compute instance main network interface.
        """
        return pulumi.get(self, "ip6_address")

    @ip6_address.setter
    def ip6_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip6_address", value)

    @property
    @pulumi.getter(name="ip6Cidr")
    def ip6_cidr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip6_cidr")

    @ip6_cidr.setter
    def ip6_cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip6_cidr", value)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[pulumi.Input[str]]:
        """
        The IP address of the Compute instance main network interface.
        """
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_address", value)

    @property
    @pulumi.getter(name="keyPair")
    def key_pair(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the [SSH key pair][sshkeypair-doc] to be installed.
        """
        return pulumi.get(self, "key_pair")

    @key_pair.setter
    def key_pair(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_pair", value)

    @property
    @pulumi.getter
    def keyboard(self) -> Optional[pulumi.Input[str]]:
        """
        The keyboard layout configuration (at creation time only). Supported values are: `de`, `de-ch`, `es`, `fi`, `fr`, `fr-be`, `fr-ch`, `is`, `it`, `jp`, `nl-be`, `no`, `pt`, `uk`, `us`.
        """
        return pulumi.get(self, "keyboard")

    @keyboard.setter
    def keyboard(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keyboard", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        **Deprecated** The Compute instance *hostname*. Use the `hostname` attribute instead.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        The initial Compute instance password and/or encrypted password.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="reverseDns")
    def reverse_dns(self) -> Optional[pulumi.Input[str]]:
        """
        The reverse DNS record of the Compute instance (must end with a `.`, e.g: `my-server.example.net.`).
        """
        return pulumi.get(self, "reverse_dns")

    @reverse_dns.setter
    def reverse_dns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reverse_dns", value)

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of [Security Group][r-security_group] IDs (conflicts with `security_groups`).
        """
        return pulumi.get(self, "security_group_ids")

    @security_group_ids.setter
    def security_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_group_ids", value)

    @property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of [Security Group][r-security_group] names (conflicts with `security_group_ids`).
        """
        return pulumi.get(self, "security_groups")

    @security_groups.setter
    def security_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_groups", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[str]]:
        """
        The Compute instance [size][size], e.g. `Tiny`, `Small`, `Medium`, `Large` etc.
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        """
        The state of the Compute instance, e.g. `Running` or `Stopped`
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A dictionary of tags (key/value). To remove all tags, set `tags = {}`.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def template(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the Compute instance [template][template]. Only *featured* templates are available, if you want to reference *custom templates* use the `template_id` attribute instead.
        """
        return pulumi.get(self, "template")

    @template.setter
    def template(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "template", value)

    @property
    @pulumi.getter(name="templateId")
    def template_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the Compute instance [template][template]. Usage of the [`compute_template`][d-compute_template] data source is recommended.
        """
        return pulumi.get(self, "template_id")

    @template_id.setter
    def template_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "template_id", value)

    @property
    @pulumi.getter(name="userData")
    def user_data(self) -> Optional[pulumi.Input[str]]:
        """
        A [cloud-init][cloudinit] configuration. Whenever possible don't base64-encode neither gzip it yourself, as this will be automatically taken care of on your behalf by the provider.
        """
        return pulumi.get(self, "user_data")

    @user_data.setter
    def user_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_data", value)

    @property
    @pulumi.getter(name="userDataBase64")
    def user_data_base64(self) -> Optional[pulumi.Input[bool]]:
        """
        was the cloud-init configuration base64 encoded
        """
        return pulumi.get(self, "user_data_base64")

    @user_data_base64.setter
    def user_data_base64(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "user_data_base64", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        The user to use to connect to the Compute instance with SSH. If you've referenced a *custom template* in the resource, use the [`compute_template`][d-compute_template] data source `username` attribute instead.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter
    def zone(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the [zone][zone] to deploy the Compute instance into.
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone", value)


class Compute(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 affinity_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 affinity_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 disk_size: Optional[pulumi.Input[int]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 hostname: Optional[pulumi.Input[str]] = None,
                 ip4: Optional[pulumi.Input[bool]] = None,
                 ip6: Optional[pulumi.Input[bool]] = None,
                 key_pair: Optional[pulumi.Input[str]] = None,
                 keyboard: Optional[pulumi.Input[str]] = None,
                 reverse_dns: Optional[pulumi.Input[str]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 size: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 template: Optional[pulumi.Input[str]] = None,
                 template_id: Optional[pulumi.Input[str]] = None,
                 user_data: Optional[pulumi.Input[str]] = None,
                 zone: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides an Exoscale [Compute instance][compute-doc] resource. This can be used to create, modify, and delete Compute instances.

        !> **WARNING:** This resource is deprecated and will be removed in the next major version.

        ## Import

        An existing Compute instance can be imported as a resource by name or IDconsole # By name

        ```sh
         $ pulumi import exoscale:index/compute:Compute vm1 vm1
        ```

        # By ID

        ```sh
         $ pulumi import exoscale:index/compute:Compute vm1 eb556678-ec59-4be6-8c54-0406ae0f6da6
        ```

         [cloudinit]http://cloudinit.readthedocs.io/en/latest/ [compute-doc]https://community.exoscale.com/documentation/compute/ [d-compute_template]../d/compute_template.html [r-affinity]affinity.html [r-nic]nic.html [r-secondary_ipaddress]secondary_ipaddress.html [r-security_group]security_group.html [remote-exec]https://www.terraform.io/docs/provisioners/remote-exec.html [size]https://www.exoscale.com/pricing/#/compute/ [sshkeypair-doc]https://community.exoscale.com/documentation/compute/ssh-keypairs/ [template]https://www.exoscale.com/templates/ [zone]https://www.exoscale.com/datacenters/

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] affinity_group_ids: A list of [Anti-Affinity Group][r-affinity] IDs (at creation time only; conflicts with `affinity_groups`).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] affinity_groups: A list of [Anti-Affinity Group][r-affinity] names (at creation time only; conflicts with `affinity_group_ids`).
        :param pulumi.Input[int] disk_size: The Compute instance root disk size in GiB (at least `10`).
        :param pulumi.Input[str] display_name: The displayed name of the Compute instance. Note: if the `hostname` attribute is not set, this attribute is also used to set the OS' *hostname* during creation, so the value must contain only alphanumeric and hyphen ("-") characters; it can be changed to any character during a later update. If neither `display_name` or `hostname` attributes are set, a random value will be generated automatically server-side.
        :param pulumi.Input[str] hostname: The Compute instance hostname, must contain only alphanumeric and hyphen ("-") characters. If neither `display_name` or `hostname` attributes are set, a random value will be generated automatically server-side. Note: updating this attribute's value requires to reboot the instance.
        :param pulumi.Input[bool] ip4: Boolean controlling if IPv4 is enabled (only supported value is `true`).
        :param pulumi.Input[bool] ip6: Boolean controlling if IPv6 is enabled.
        :param pulumi.Input[str] key_pair: The name of the [SSH key pair][sshkeypair-doc] to be installed.
        :param pulumi.Input[str] keyboard: The keyboard layout configuration (at creation time only). Supported values are: `de`, `de-ch`, `es`, `fi`, `fr`, `fr-be`, `fr-ch`, `is`, `it`, `jp`, `nl-be`, `no`, `pt`, `uk`, `us`.
        :param pulumi.Input[str] reverse_dns: The reverse DNS record of the Compute instance (must end with a `.`, e.g: `my-server.example.net.`).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_ids: A list of [Security Group][r-security_group] IDs (conflicts with `security_groups`).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_groups: A list of [Security Group][r-security_group] names (conflicts with `security_group_ids`).
        :param pulumi.Input[str] size: The Compute instance [size][size], e.g. `Tiny`, `Small`, `Medium`, `Large` etc.
        :param pulumi.Input[str] state: The state of the Compute instance, e.g. `Running` or `Stopped`
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: A dictionary of tags (key/value). To remove all tags, set `tags = {}`.
        :param pulumi.Input[str] template: The name of the Compute instance [template][template]. Only *featured* templates are available, if you want to reference *custom templates* use the `template_id` attribute instead.
        :param pulumi.Input[str] template_id: The ID of the Compute instance [template][template]. Usage of the [`compute_template`][d-compute_template] data source is recommended.
        :param pulumi.Input[str] user_data: A [cloud-init][cloudinit] configuration. Whenever possible don't base64-encode neither gzip it yourself, as this will be automatically taken care of on your behalf by the provider.
        :param pulumi.Input[str] zone: The name of the [zone][zone] to deploy the Compute instance into.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ComputeArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides an Exoscale [Compute instance][compute-doc] resource. This can be used to create, modify, and delete Compute instances.

        !> **WARNING:** This resource is deprecated and will be removed in the next major version.

        ## Import

        An existing Compute instance can be imported as a resource by name or IDconsole # By name

        ```sh
         $ pulumi import exoscale:index/compute:Compute vm1 vm1
        ```

        # By ID

        ```sh
         $ pulumi import exoscale:index/compute:Compute vm1 eb556678-ec59-4be6-8c54-0406ae0f6da6
        ```

         [cloudinit]http://cloudinit.readthedocs.io/en/latest/ [compute-doc]https://community.exoscale.com/documentation/compute/ [d-compute_template]../d/compute_template.html [r-affinity]affinity.html [r-nic]nic.html [r-secondary_ipaddress]secondary_ipaddress.html [r-security_group]security_group.html [remote-exec]https://www.terraform.io/docs/provisioners/remote-exec.html [size]https://www.exoscale.com/pricing/#/compute/ [sshkeypair-doc]https://community.exoscale.com/documentation/compute/ssh-keypairs/ [template]https://www.exoscale.com/templates/ [zone]https://www.exoscale.com/datacenters/

        :param str resource_name: The name of the resource.
        :param ComputeArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ComputeArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 affinity_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 affinity_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 disk_size: Optional[pulumi.Input[int]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 hostname: Optional[pulumi.Input[str]] = None,
                 ip4: Optional[pulumi.Input[bool]] = None,
                 ip6: Optional[pulumi.Input[bool]] = None,
                 key_pair: Optional[pulumi.Input[str]] = None,
                 keyboard: Optional[pulumi.Input[str]] = None,
                 reverse_dns: Optional[pulumi.Input[str]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 size: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 template: Optional[pulumi.Input[str]] = None,
                 template_id: Optional[pulumi.Input[str]] = None,
                 user_data: Optional[pulumi.Input[str]] = None,
                 zone: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ComputeArgs.__new__(ComputeArgs)

            __props__.__dict__["affinity_group_ids"] = affinity_group_ids
            __props__.__dict__["affinity_groups"] = affinity_groups
            if disk_size is None and not opts.urn:
                raise TypeError("Missing required property 'disk_size'")
            __props__.__dict__["disk_size"] = disk_size
            __props__.__dict__["display_name"] = display_name
            __props__.__dict__["hostname"] = hostname
            __props__.__dict__["ip4"] = ip4
            __props__.__dict__["ip6"] = ip6
            __props__.__dict__["key_pair"] = key_pair
            __props__.__dict__["keyboard"] = keyboard
            __props__.__dict__["reverse_dns"] = reverse_dns
            __props__.__dict__["security_group_ids"] = security_group_ids
            __props__.__dict__["security_groups"] = security_groups
            __props__.__dict__["size"] = size
            __props__.__dict__["state"] = state
            __props__.__dict__["tags"] = tags
            __props__.__dict__["template"] = template
            __props__.__dict__["template_id"] = template_id
            __props__.__dict__["user_data"] = user_data
            if zone is None and not opts.urn:
                raise TypeError("Missing required property 'zone'")
            __props__.__dict__["zone"] = zone
            __props__.__dict__["gateway"] = None
            __props__.__dict__["ip6_address"] = None
            __props__.__dict__["ip6_cidr"] = None
            __props__.__dict__["ip_address"] = None
            __props__.__dict__["name"] = None
            __props__.__dict__["password"] = None
            __props__.__dict__["user_data_base64"] = None
            __props__.__dict__["username"] = None
        super(Compute, __self__).__init__(
            'exoscale:index/compute:Compute',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            affinity_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            affinity_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            disk_size: Optional[pulumi.Input[int]] = None,
            display_name: Optional[pulumi.Input[str]] = None,
            gateway: Optional[pulumi.Input[str]] = None,
            hostname: Optional[pulumi.Input[str]] = None,
            ip4: Optional[pulumi.Input[bool]] = None,
            ip6: Optional[pulumi.Input[bool]] = None,
            ip6_address: Optional[pulumi.Input[str]] = None,
            ip6_cidr: Optional[pulumi.Input[str]] = None,
            ip_address: Optional[pulumi.Input[str]] = None,
            key_pair: Optional[pulumi.Input[str]] = None,
            keyboard: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            password: Optional[pulumi.Input[str]] = None,
            reverse_dns: Optional[pulumi.Input[str]] = None,
            security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            size: Optional[pulumi.Input[str]] = None,
            state: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            template: Optional[pulumi.Input[str]] = None,
            template_id: Optional[pulumi.Input[str]] = None,
            user_data: Optional[pulumi.Input[str]] = None,
            user_data_base64: Optional[pulumi.Input[bool]] = None,
            username: Optional[pulumi.Input[str]] = None,
            zone: Optional[pulumi.Input[str]] = None) -> 'Compute':
        """
        Get an existing Compute resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] affinity_group_ids: A list of [Anti-Affinity Group][r-affinity] IDs (at creation time only; conflicts with `affinity_groups`).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] affinity_groups: A list of [Anti-Affinity Group][r-affinity] names (at creation time only; conflicts with `affinity_group_ids`).
        :param pulumi.Input[int] disk_size: The Compute instance root disk size in GiB (at least `10`).
        :param pulumi.Input[str] display_name: The displayed name of the Compute instance. Note: if the `hostname` attribute is not set, this attribute is also used to set the OS' *hostname* during creation, so the value must contain only alphanumeric and hyphen ("-") characters; it can be changed to any character during a later update. If neither `display_name` or `hostname` attributes are set, a random value will be generated automatically server-side.
        :param pulumi.Input[str] hostname: The Compute instance hostname, must contain only alphanumeric and hyphen ("-") characters. If neither `display_name` or `hostname` attributes are set, a random value will be generated automatically server-side. Note: updating this attribute's value requires to reboot the instance.
        :param pulumi.Input[bool] ip4: Boolean controlling if IPv4 is enabled (only supported value is `true`).
        :param pulumi.Input[bool] ip6: Boolean controlling if IPv6 is enabled.
        :param pulumi.Input[str] ip6_address: The IPv6 address of the Compute instance main network interface.
        :param pulumi.Input[str] ip_address: The IP address of the Compute instance main network interface.
        :param pulumi.Input[str] key_pair: The name of the [SSH key pair][sshkeypair-doc] to be installed.
        :param pulumi.Input[str] keyboard: The keyboard layout configuration (at creation time only). Supported values are: `de`, `de-ch`, `es`, `fi`, `fr`, `fr-be`, `fr-ch`, `is`, `it`, `jp`, `nl-be`, `no`, `pt`, `uk`, `us`.
        :param pulumi.Input[str] name: **Deprecated** The Compute instance *hostname*. Use the `hostname` attribute instead.
        :param pulumi.Input[str] password: The initial Compute instance password and/or encrypted password.
        :param pulumi.Input[str] reverse_dns: The reverse DNS record of the Compute instance (must end with a `.`, e.g: `my-server.example.net.`).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_ids: A list of [Security Group][r-security_group] IDs (conflicts with `security_groups`).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_groups: A list of [Security Group][r-security_group] names (conflicts with `security_group_ids`).
        :param pulumi.Input[str] size: The Compute instance [size][size], e.g. `Tiny`, `Small`, `Medium`, `Large` etc.
        :param pulumi.Input[str] state: The state of the Compute instance, e.g. `Running` or `Stopped`
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: A dictionary of tags (key/value). To remove all tags, set `tags = {}`.
        :param pulumi.Input[str] template: The name of the Compute instance [template][template]. Only *featured* templates are available, if you want to reference *custom templates* use the `template_id` attribute instead.
        :param pulumi.Input[str] template_id: The ID of the Compute instance [template][template]. Usage of the [`compute_template`][d-compute_template] data source is recommended.
        :param pulumi.Input[str] user_data: A [cloud-init][cloudinit] configuration. Whenever possible don't base64-encode neither gzip it yourself, as this will be automatically taken care of on your behalf by the provider.
        :param pulumi.Input[bool] user_data_base64: was the cloud-init configuration base64 encoded
        :param pulumi.Input[str] username: The user to use to connect to the Compute instance with SSH. If you've referenced a *custom template* in the resource, use the [`compute_template`][d-compute_template] data source `username` attribute instead.
        :param pulumi.Input[str] zone: The name of the [zone][zone] to deploy the Compute instance into.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ComputeState.__new__(_ComputeState)

        __props__.__dict__["affinity_group_ids"] = affinity_group_ids
        __props__.__dict__["affinity_groups"] = affinity_groups
        __props__.__dict__["disk_size"] = disk_size
        __props__.__dict__["display_name"] = display_name
        __props__.__dict__["gateway"] = gateway
        __props__.__dict__["hostname"] = hostname
        __props__.__dict__["ip4"] = ip4
        __props__.__dict__["ip6"] = ip6
        __props__.__dict__["ip6_address"] = ip6_address
        __props__.__dict__["ip6_cidr"] = ip6_cidr
        __props__.__dict__["ip_address"] = ip_address
        __props__.__dict__["key_pair"] = key_pair
        __props__.__dict__["keyboard"] = keyboard
        __props__.__dict__["name"] = name
        __props__.__dict__["password"] = password
        __props__.__dict__["reverse_dns"] = reverse_dns
        __props__.__dict__["security_group_ids"] = security_group_ids
        __props__.__dict__["security_groups"] = security_groups
        __props__.__dict__["size"] = size
        __props__.__dict__["state"] = state
        __props__.__dict__["tags"] = tags
        __props__.__dict__["template"] = template
        __props__.__dict__["template_id"] = template_id
        __props__.__dict__["user_data"] = user_data
        __props__.__dict__["user_data_base64"] = user_data_base64
        __props__.__dict__["username"] = username
        __props__.__dict__["zone"] = zone
        return Compute(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="affinityGroupIds")
    def affinity_group_ids(self) -> pulumi.Output[Sequence[str]]:
        """
        A list of [Anti-Affinity Group][r-affinity] IDs (at creation time only; conflicts with `affinity_groups`).
        """
        return pulumi.get(self, "affinity_group_ids")

    @property
    @pulumi.getter(name="affinityGroups")
    def affinity_groups(self) -> pulumi.Output[Sequence[str]]:
        """
        A list of [Anti-Affinity Group][r-affinity] names (at creation time only; conflicts with `affinity_group_ids`).
        """
        return pulumi.get(self, "affinity_groups")

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> pulumi.Output[int]:
        """
        The Compute instance root disk size in GiB (at least `10`).
        """
        return pulumi.get(self, "disk_size")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Output[str]:
        """
        The displayed name of the Compute instance. Note: if the `hostname` attribute is not set, this attribute is also used to set the OS' *hostname* during creation, so the value must contain only alphanumeric and hyphen ("-") characters; it can be changed to any character during a later update. If neither `display_name` or `hostname` attributes are set, a random value will be generated automatically server-side.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def gateway(self) -> pulumi.Output[str]:
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter
    def hostname(self) -> pulumi.Output[str]:
        """
        The Compute instance hostname, must contain only alphanumeric and hyphen ("-") characters. If neither `display_name` or `hostname` attributes are set, a random value will be generated automatically server-side. Note: updating this attribute's value requires to reboot the instance.
        """
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter
    def ip4(self) -> pulumi.Output[Optional[bool]]:
        """
        Boolean controlling if IPv4 is enabled (only supported value is `true`).
        """
        return pulumi.get(self, "ip4")

    @property
    @pulumi.getter
    def ip6(self) -> pulumi.Output[Optional[bool]]:
        """
        Boolean controlling if IPv6 is enabled.
        """
        return pulumi.get(self, "ip6")

    @property
    @pulumi.getter(name="ip6Address")
    def ip6_address(self) -> pulumi.Output[str]:
        """
        The IPv6 address of the Compute instance main network interface.
        """
        return pulumi.get(self, "ip6_address")

    @property
    @pulumi.getter(name="ip6Cidr")
    def ip6_cidr(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ip6_cidr")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> pulumi.Output[str]:
        """
        The IP address of the Compute instance main network interface.
        """
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter(name="keyPair")
    def key_pair(self) -> pulumi.Output[Optional[str]]:
        """
        The name of the [SSH key pair][sshkeypair-doc] to be installed.
        """
        return pulumi.get(self, "key_pair")

    @property
    @pulumi.getter
    def keyboard(self) -> pulumi.Output[Optional[str]]:
        """
        The keyboard layout configuration (at creation time only). Supported values are: `de`, `de-ch`, `es`, `fi`, `fr`, `fr-be`, `fr-ch`, `is`, `it`, `jp`, `nl-be`, `no`, `pt`, `uk`, `us`.
        """
        return pulumi.get(self, "keyboard")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        **Deprecated** The Compute instance *hostname*. Use the `hostname` attribute instead.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def password(self) -> pulumi.Output[str]:
        """
        The initial Compute instance password and/or encrypted password.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="reverseDns")
    def reverse_dns(self) -> pulumi.Output[Optional[str]]:
        """
        The reverse DNS record of the Compute instance (must end with a `.`, e.g: `my-server.example.net.`).
        """
        return pulumi.get(self, "reverse_dns")

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> pulumi.Output[Sequence[str]]:
        """
        A list of [Security Group][r-security_group] IDs (conflicts with `security_groups`).
        """
        return pulumi.get(self, "security_group_ids")

    @property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> pulumi.Output[Sequence[str]]:
        """
        A list of [Security Group][r-security_group] names (conflicts with `security_group_ids`).
        """
        return pulumi.get(self, "security_groups")

    @property
    @pulumi.getter
    def size(self) -> pulumi.Output[Optional[str]]:
        """
        The Compute instance [size][size], e.g. `Tiny`, `Small`, `Medium`, `Large` etc.
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[str]:
        """
        The state of the Compute instance, e.g. `Running` or `Stopped`
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Mapping[str, str]]:
        """
        A dictionary of tags (key/value). To remove all tags, set `tags = {}`.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def template(self) -> pulumi.Output[str]:
        """
        The name of the Compute instance [template][template]. Only *featured* templates are available, if you want to reference *custom templates* use the `template_id` attribute instead.
        """
        return pulumi.get(self, "template")

    @property
    @pulumi.getter(name="templateId")
    def template_id(self) -> pulumi.Output[str]:
        """
        The ID of the Compute instance [template][template]. Usage of the [`compute_template`][d-compute_template] data source is recommended.
        """
        return pulumi.get(self, "template_id")

    @property
    @pulumi.getter(name="userData")
    def user_data(self) -> pulumi.Output[Optional[str]]:
        """
        A [cloud-init][cloudinit] configuration. Whenever possible don't base64-encode neither gzip it yourself, as this will be automatically taken care of on your behalf by the provider.
        """
        return pulumi.get(self, "user_data")

    @property
    @pulumi.getter(name="userDataBase64")
    def user_data_base64(self) -> pulumi.Output[bool]:
        """
        was the cloud-init configuration base64 encoded
        """
        return pulumi.get(self, "user_data_base64")

    @property
    @pulumi.getter
    def username(self) -> pulumi.Output[str]:
        """
        The user to use to connect to the Compute instance with SSH. If you've referenced a *custom template* in the resource, use the [`compute_template`][d-compute_template] data source `username` attribute instead.
        """
        return pulumi.get(self, "username")

    @property
    @pulumi.getter
    def zone(self) -> pulumi.Output[str]:
        """
        The name of the [zone][zone] to deploy the Compute instance into.
        """
        return pulumi.get(self, "zone")

