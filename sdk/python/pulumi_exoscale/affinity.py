# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['AffinityArgs', 'Affinity']

@pulumi.input_type
class AffinityArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Affinity resource.
        :param pulumi.Input[str] description: A free-form text describing the Anti-Affinity Group purpose.
        :param pulumi.Input[str] name: The name of the Anti-Affinity Group.
        :param pulumi.Input[str] type: The type of the Anti-Affinity Group (`host anti-affinity` is the only supported value).
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        A free-form text describing the Anti-Affinity Group purpose.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the Anti-Affinity Group.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of the Anti-Affinity Group (`host anti-affinity` is the only supported value).
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class _AffinityState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 virtual_machine_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Input properties used for looking up and filtering Affinity resources.
        :param pulumi.Input[str] description: A free-form text describing the Anti-Affinity Group purpose.
        :param pulumi.Input[str] name: The name of the Anti-Affinity Group.
        :param pulumi.Input[str] type: The type of the Anti-Affinity Group (`host anti-affinity` is the only supported value).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] virtual_machine_ids: The IDs of the Compute instance resources member of the Anti-Affinity Group.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if virtual_machine_ids is not None:
            pulumi.set(__self__, "virtual_machine_ids", virtual_machine_ids)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        A free-form text describing the Anti-Affinity Group purpose.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the Anti-Affinity Group.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of the Anti-Affinity Group (`host anti-affinity` is the only supported value).
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="virtualMachineIds")
    def virtual_machine_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The IDs of the Compute instance resources member of the Anti-Affinity Group.
        """
        return pulumi.get(self, "virtual_machine_ids")

    @virtual_machine_ids.setter
    def virtual_machine_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "virtual_machine_ids", value)


class Affinity(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides an Exoscale [Anti-Affinity Group][aag-doc] resource. This can be used to create and delete Anti-Affinity Groups.

        !> **WARNING:** This resource is deprecated and will be removed in the next major version.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_exoscale as exoscale

        cluster = exoscale.Affinity("cluster",
            description="HA Cluster",
            type="host anti-affinity")
        ```

        ## Import

        An existing Anti-Affinity Group can be imported as a resource by name or IDconsole # By name

        ```sh
         $ pulumi import exoscale:index/affinity:Affinity mygroup mygroup
        ```

        # By ID

        ```sh
         $ pulumi import exoscale:index/affinity:Affinity mygroup eb556678-ec59-4be6-8c54-0406ae0f6da6
        ```

         [aag-doc]https://community.exoscale.com/documentation/compute/anti-affinity-groups/

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: A free-form text describing the Anti-Affinity Group purpose.
        :param pulumi.Input[str] name: The name of the Anti-Affinity Group.
        :param pulumi.Input[str] type: The type of the Anti-Affinity Group (`host anti-affinity` is the only supported value).
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[AffinityArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides an Exoscale [Anti-Affinity Group][aag-doc] resource. This can be used to create and delete Anti-Affinity Groups.

        !> **WARNING:** This resource is deprecated and will be removed in the next major version.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_exoscale as exoscale

        cluster = exoscale.Affinity("cluster",
            description="HA Cluster",
            type="host anti-affinity")
        ```

        ## Import

        An existing Anti-Affinity Group can be imported as a resource by name or IDconsole # By name

        ```sh
         $ pulumi import exoscale:index/affinity:Affinity mygroup mygroup
        ```

        # By ID

        ```sh
         $ pulumi import exoscale:index/affinity:Affinity mygroup eb556678-ec59-4be6-8c54-0406ae0f6da6
        ```

         [aag-doc]https://community.exoscale.com/documentation/compute/anti-affinity-groups/

        :param str resource_name: The name of the resource.
        :param AffinityArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AffinityArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AffinityArgs.__new__(AffinityArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["name"] = name
            __props__.__dict__["type"] = type
            __props__.__dict__["virtual_machine_ids"] = None
        super(Affinity, __self__).__init__(
            'exoscale:index/affinity:Affinity',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            type: Optional[pulumi.Input[str]] = None,
            virtual_machine_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None) -> 'Affinity':
        """
        Get an existing Affinity resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: A free-form text describing the Anti-Affinity Group purpose.
        :param pulumi.Input[str] name: The name of the Anti-Affinity Group.
        :param pulumi.Input[str] type: The type of the Anti-Affinity Group (`host anti-affinity` is the only supported value).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] virtual_machine_ids: The IDs of the Compute instance resources member of the Anti-Affinity Group.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AffinityState.__new__(_AffinityState)

        __props__.__dict__["description"] = description
        __props__.__dict__["name"] = name
        __props__.__dict__["type"] = type
        __props__.__dict__["virtual_machine_ids"] = virtual_machine_ids
        return Affinity(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        A free-form text describing the Anti-Affinity Group purpose.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the Anti-Affinity Group.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[Optional[str]]:
        """
        The type of the Anti-Affinity Group (`host anti-affinity` is the only supported value).
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="virtualMachineIds")
    def virtual_machine_ids(self) -> pulumi.Output[Sequence[str]]:
        """
        The IDs of the Compute instance resources member of the Anti-Affinity Group.
        """
        return pulumi.get(self, "virtual_machine_ids")

