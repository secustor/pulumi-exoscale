# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['IPAddressArgs', 'IPAddress']

@pulumi.input_type
class IPAddressArgs:
    def __init__(__self__, *,
                 zone: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 healthcheck_interval: Optional[pulumi.Input[int]] = None,
                 healthcheck_mode: Optional[pulumi.Input[str]] = None,
                 healthcheck_path: Optional[pulumi.Input[str]] = None,
                 healthcheck_port: Optional[pulumi.Input[int]] = None,
                 healthcheck_strikes_fail: Optional[pulumi.Input[int]] = None,
                 healthcheck_strikes_ok: Optional[pulumi.Input[int]] = None,
                 healthcheck_timeout: Optional[pulumi.Input[int]] = None,
                 healthcheck_tls_skip_verify: Optional[pulumi.Input[bool]] = None,
                 healthcheck_tls_sni: Optional[pulumi.Input[str]] = None,
                 reverse_dns: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a IPAddress resource.
        :param pulumi.Input[str] zone: The name of the [zone][zone] to create the Elastic IP into.
        :param pulumi.Input[str] description: The description of the Elastic IP.
        :param pulumi.Input[int] healthcheck_interval: The healthcheck probing interval in seconds (must be between `5` and `300`).
        :param pulumi.Input[str] healthcheck_mode: The healthcheck probing mode (must be `tcp`, `http` or `https`).
        :param pulumi.Input[str] healthcheck_path: The healthcheck probe HTTP request path (must be specified in `http`/`https` modes).
        :param pulumi.Input[int] healthcheck_port: The healthcheck service port to probe (must be between `1` and `65535`).
        :param pulumi.Input[int] healthcheck_strikes_fail: The number of unsuccessful healthcheck probes before considering the target unhealthy (must be between `1` and `20`).
        :param pulumi.Input[int] healthcheck_strikes_ok: The number of successful healthcheck probes before considering the target healthy (must be between `1` and `20`).
        :param pulumi.Input[int] healthcheck_timeout: The time in seconds before considering a healthcheck probing failed (must be between `2` and `60`).
        :param pulumi.Input[bool] healthcheck_tls_skip_verify: Disable TLS certificate validation in `https` mode. Note: this parameter can only be changed to `true`, it cannot be reset to `false` later on (requires a resource re-creation).
        :param pulumi.Input[str] healthcheck_tls_sni: The healthcheck TLS server name to specify in `https` mode. Note: this parameter can only be changed to a non-empty value, it cannot be reset to its default empty value later on (requires a resource re-creation).
        :param pulumi.Input[str] reverse_dns: A reverse DNS record to set for the Elastic IP.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: A dictionary of tags (key/value). To remove all tags, set `tags = {}`.
        """
        pulumi.set(__self__, "zone", zone)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if healthcheck_interval is not None:
            pulumi.set(__self__, "healthcheck_interval", healthcheck_interval)
        if healthcheck_mode is not None:
            pulumi.set(__self__, "healthcheck_mode", healthcheck_mode)
        if healthcheck_path is not None:
            pulumi.set(__self__, "healthcheck_path", healthcheck_path)
        if healthcheck_port is not None:
            pulumi.set(__self__, "healthcheck_port", healthcheck_port)
        if healthcheck_strikes_fail is not None:
            pulumi.set(__self__, "healthcheck_strikes_fail", healthcheck_strikes_fail)
        if healthcheck_strikes_ok is not None:
            pulumi.set(__self__, "healthcheck_strikes_ok", healthcheck_strikes_ok)
        if healthcheck_timeout is not None:
            pulumi.set(__self__, "healthcheck_timeout", healthcheck_timeout)
        if healthcheck_tls_skip_verify is not None:
            pulumi.set(__self__, "healthcheck_tls_skip_verify", healthcheck_tls_skip_verify)
        if healthcheck_tls_sni is not None:
            pulumi.set(__self__, "healthcheck_tls_sni", healthcheck_tls_sni)
        if reverse_dns is not None:
            pulumi.set(__self__, "reverse_dns", reverse_dns)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def zone(self) -> pulumi.Input[str]:
        """
        The name of the [zone][zone] to create the Elastic IP into.
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: pulumi.Input[str]):
        pulumi.set(self, "zone", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the Elastic IP.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="healthcheckInterval")
    def healthcheck_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The healthcheck probing interval in seconds (must be between `5` and `300`).
        """
        return pulumi.get(self, "healthcheck_interval")

    @healthcheck_interval.setter
    def healthcheck_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "healthcheck_interval", value)

    @property
    @pulumi.getter(name="healthcheckMode")
    def healthcheck_mode(self) -> Optional[pulumi.Input[str]]:
        """
        The healthcheck probing mode (must be `tcp`, `http` or `https`).
        """
        return pulumi.get(self, "healthcheck_mode")

    @healthcheck_mode.setter
    def healthcheck_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "healthcheck_mode", value)

    @property
    @pulumi.getter(name="healthcheckPath")
    def healthcheck_path(self) -> Optional[pulumi.Input[str]]:
        """
        The healthcheck probe HTTP request path (must be specified in `http`/`https` modes).
        """
        return pulumi.get(self, "healthcheck_path")

    @healthcheck_path.setter
    def healthcheck_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "healthcheck_path", value)

    @property
    @pulumi.getter(name="healthcheckPort")
    def healthcheck_port(self) -> Optional[pulumi.Input[int]]:
        """
        The healthcheck service port to probe (must be between `1` and `65535`).
        """
        return pulumi.get(self, "healthcheck_port")

    @healthcheck_port.setter
    def healthcheck_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "healthcheck_port", value)

    @property
    @pulumi.getter(name="healthcheckStrikesFail")
    def healthcheck_strikes_fail(self) -> Optional[pulumi.Input[int]]:
        """
        The number of unsuccessful healthcheck probes before considering the target unhealthy (must be between `1` and `20`).
        """
        return pulumi.get(self, "healthcheck_strikes_fail")

    @healthcheck_strikes_fail.setter
    def healthcheck_strikes_fail(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "healthcheck_strikes_fail", value)

    @property
    @pulumi.getter(name="healthcheckStrikesOk")
    def healthcheck_strikes_ok(self) -> Optional[pulumi.Input[int]]:
        """
        The number of successful healthcheck probes before considering the target healthy (must be between `1` and `20`).
        """
        return pulumi.get(self, "healthcheck_strikes_ok")

    @healthcheck_strikes_ok.setter
    def healthcheck_strikes_ok(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "healthcheck_strikes_ok", value)

    @property
    @pulumi.getter(name="healthcheckTimeout")
    def healthcheck_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        The time in seconds before considering a healthcheck probing failed (must be between `2` and `60`).
        """
        return pulumi.get(self, "healthcheck_timeout")

    @healthcheck_timeout.setter
    def healthcheck_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "healthcheck_timeout", value)

    @property
    @pulumi.getter(name="healthcheckTlsSkipVerify")
    def healthcheck_tls_skip_verify(self) -> Optional[pulumi.Input[bool]]:
        """
        Disable TLS certificate validation in `https` mode. Note: this parameter can only be changed to `true`, it cannot be reset to `false` later on (requires a resource re-creation).
        """
        return pulumi.get(self, "healthcheck_tls_skip_verify")

    @healthcheck_tls_skip_verify.setter
    def healthcheck_tls_skip_verify(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "healthcheck_tls_skip_verify", value)

    @property
    @pulumi.getter(name="healthcheckTlsSni")
    def healthcheck_tls_sni(self) -> Optional[pulumi.Input[str]]:
        """
        The healthcheck TLS server name to specify in `https` mode. Note: this parameter can only be changed to a non-empty value, it cannot be reset to its default empty value later on (requires a resource re-creation).
        """
        return pulumi.get(self, "healthcheck_tls_sni")

    @healthcheck_tls_sni.setter
    def healthcheck_tls_sni(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "healthcheck_tls_sni", value)

    @property
    @pulumi.getter(name="reverseDns")
    def reverse_dns(self) -> Optional[pulumi.Input[str]]:
        """
        A reverse DNS record to set for the Elastic IP.
        """
        return pulumi.get(self, "reverse_dns")

    @reverse_dns.setter
    def reverse_dns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reverse_dns", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A dictionary of tags (key/value). To remove all tags, set `tags = {}`.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _IPAddressState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 healthcheck_interval: Optional[pulumi.Input[int]] = None,
                 healthcheck_mode: Optional[pulumi.Input[str]] = None,
                 healthcheck_path: Optional[pulumi.Input[str]] = None,
                 healthcheck_port: Optional[pulumi.Input[int]] = None,
                 healthcheck_strikes_fail: Optional[pulumi.Input[int]] = None,
                 healthcheck_strikes_ok: Optional[pulumi.Input[int]] = None,
                 healthcheck_timeout: Optional[pulumi.Input[int]] = None,
                 healthcheck_tls_skip_verify: Optional[pulumi.Input[bool]] = None,
                 healthcheck_tls_sni: Optional[pulumi.Input[str]] = None,
                 ip_address: Optional[pulumi.Input[str]] = None,
                 reverse_dns: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 zone: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering IPAddress resources.
        :param pulumi.Input[str] description: The description of the Elastic IP.
        :param pulumi.Input[int] healthcheck_interval: The healthcheck probing interval in seconds (must be between `5` and `300`).
        :param pulumi.Input[str] healthcheck_mode: The healthcheck probing mode (must be `tcp`, `http` or `https`).
        :param pulumi.Input[str] healthcheck_path: The healthcheck probe HTTP request path (must be specified in `http`/`https` modes).
        :param pulumi.Input[int] healthcheck_port: The healthcheck service port to probe (must be between `1` and `65535`).
        :param pulumi.Input[int] healthcheck_strikes_fail: The number of unsuccessful healthcheck probes before considering the target unhealthy (must be between `1` and `20`).
        :param pulumi.Input[int] healthcheck_strikes_ok: The number of successful healthcheck probes before considering the target healthy (must be between `1` and `20`).
        :param pulumi.Input[int] healthcheck_timeout: The time in seconds before considering a healthcheck probing failed (must be between `2` and `60`).
        :param pulumi.Input[bool] healthcheck_tls_skip_verify: Disable TLS certificate validation in `https` mode. Note: this parameter can only be changed to `true`, it cannot be reset to `false` later on (requires a resource re-creation).
        :param pulumi.Input[str] healthcheck_tls_sni: The healthcheck TLS server name to specify in `https` mode. Note: this parameter can only be changed to a non-empty value, it cannot be reset to its default empty value later on (requires a resource re-creation).
        :param pulumi.Input[str] ip_address: The Elastic IP address.
        :param pulumi.Input[str] reverse_dns: A reverse DNS record to set for the Elastic IP.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: A dictionary of tags (key/value). To remove all tags, set `tags = {}`.
        :param pulumi.Input[str] zone: The name of the [zone][zone] to create the Elastic IP into.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if healthcheck_interval is not None:
            pulumi.set(__self__, "healthcheck_interval", healthcheck_interval)
        if healthcheck_mode is not None:
            pulumi.set(__self__, "healthcheck_mode", healthcheck_mode)
        if healthcheck_path is not None:
            pulumi.set(__self__, "healthcheck_path", healthcheck_path)
        if healthcheck_port is not None:
            pulumi.set(__self__, "healthcheck_port", healthcheck_port)
        if healthcheck_strikes_fail is not None:
            pulumi.set(__self__, "healthcheck_strikes_fail", healthcheck_strikes_fail)
        if healthcheck_strikes_ok is not None:
            pulumi.set(__self__, "healthcheck_strikes_ok", healthcheck_strikes_ok)
        if healthcheck_timeout is not None:
            pulumi.set(__self__, "healthcheck_timeout", healthcheck_timeout)
        if healthcheck_tls_skip_verify is not None:
            pulumi.set(__self__, "healthcheck_tls_skip_verify", healthcheck_tls_skip_verify)
        if healthcheck_tls_sni is not None:
            pulumi.set(__self__, "healthcheck_tls_sni", healthcheck_tls_sni)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if reverse_dns is not None:
            pulumi.set(__self__, "reverse_dns", reverse_dns)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the Elastic IP.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="healthcheckInterval")
    def healthcheck_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The healthcheck probing interval in seconds (must be between `5` and `300`).
        """
        return pulumi.get(self, "healthcheck_interval")

    @healthcheck_interval.setter
    def healthcheck_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "healthcheck_interval", value)

    @property
    @pulumi.getter(name="healthcheckMode")
    def healthcheck_mode(self) -> Optional[pulumi.Input[str]]:
        """
        The healthcheck probing mode (must be `tcp`, `http` or `https`).
        """
        return pulumi.get(self, "healthcheck_mode")

    @healthcheck_mode.setter
    def healthcheck_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "healthcheck_mode", value)

    @property
    @pulumi.getter(name="healthcheckPath")
    def healthcheck_path(self) -> Optional[pulumi.Input[str]]:
        """
        The healthcheck probe HTTP request path (must be specified in `http`/`https` modes).
        """
        return pulumi.get(self, "healthcheck_path")

    @healthcheck_path.setter
    def healthcheck_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "healthcheck_path", value)

    @property
    @pulumi.getter(name="healthcheckPort")
    def healthcheck_port(self) -> Optional[pulumi.Input[int]]:
        """
        The healthcheck service port to probe (must be between `1` and `65535`).
        """
        return pulumi.get(self, "healthcheck_port")

    @healthcheck_port.setter
    def healthcheck_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "healthcheck_port", value)

    @property
    @pulumi.getter(name="healthcheckStrikesFail")
    def healthcheck_strikes_fail(self) -> Optional[pulumi.Input[int]]:
        """
        The number of unsuccessful healthcheck probes before considering the target unhealthy (must be between `1` and `20`).
        """
        return pulumi.get(self, "healthcheck_strikes_fail")

    @healthcheck_strikes_fail.setter
    def healthcheck_strikes_fail(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "healthcheck_strikes_fail", value)

    @property
    @pulumi.getter(name="healthcheckStrikesOk")
    def healthcheck_strikes_ok(self) -> Optional[pulumi.Input[int]]:
        """
        The number of successful healthcheck probes before considering the target healthy (must be between `1` and `20`).
        """
        return pulumi.get(self, "healthcheck_strikes_ok")

    @healthcheck_strikes_ok.setter
    def healthcheck_strikes_ok(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "healthcheck_strikes_ok", value)

    @property
    @pulumi.getter(name="healthcheckTimeout")
    def healthcheck_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        The time in seconds before considering a healthcheck probing failed (must be between `2` and `60`).
        """
        return pulumi.get(self, "healthcheck_timeout")

    @healthcheck_timeout.setter
    def healthcheck_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "healthcheck_timeout", value)

    @property
    @pulumi.getter(name="healthcheckTlsSkipVerify")
    def healthcheck_tls_skip_verify(self) -> Optional[pulumi.Input[bool]]:
        """
        Disable TLS certificate validation in `https` mode. Note: this parameter can only be changed to `true`, it cannot be reset to `false` later on (requires a resource re-creation).
        """
        return pulumi.get(self, "healthcheck_tls_skip_verify")

    @healthcheck_tls_skip_verify.setter
    def healthcheck_tls_skip_verify(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "healthcheck_tls_skip_verify", value)

    @property
    @pulumi.getter(name="healthcheckTlsSni")
    def healthcheck_tls_sni(self) -> Optional[pulumi.Input[str]]:
        """
        The healthcheck TLS server name to specify in `https` mode. Note: this parameter can only be changed to a non-empty value, it cannot be reset to its default empty value later on (requires a resource re-creation).
        """
        return pulumi.get(self, "healthcheck_tls_sni")

    @healthcheck_tls_sni.setter
    def healthcheck_tls_sni(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "healthcheck_tls_sni", value)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[pulumi.Input[str]]:
        """
        The Elastic IP address.
        """
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_address", value)

    @property
    @pulumi.getter(name="reverseDns")
    def reverse_dns(self) -> Optional[pulumi.Input[str]]:
        """
        A reverse DNS record to set for the Elastic IP.
        """
        return pulumi.get(self, "reverse_dns")

    @reverse_dns.setter
    def reverse_dns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reverse_dns", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A dictionary of tags (key/value). To remove all tags, set `tags = {}`.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def zone(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the [zone][zone] to create the Elastic IP into.
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone", value)


class IPAddress(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 healthcheck_interval: Optional[pulumi.Input[int]] = None,
                 healthcheck_mode: Optional[pulumi.Input[str]] = None,
                 healthcheck_path: Optional[pulumi.Input[str]] = None,
                 healthcheck_port: Optional[pulumi.Input[int]] = None,
                 healthcheck_strikes_fail: Optional[pulumi.Input[int]] = None,
                 healthcheck_strikes_ok: Optional[pulumi.Input[int]] = None,
                 healthcheck_timeout: Optional[pulumi.Input[int]] = None,
                 healthcheck_tls_skip_verify: Optional[pulumi.Input[bool]] = None,
                 healthcheck_tls_sni: Optional[pulumi.Input[str]] = None,
                 reverse_dns: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 zone: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides an Exoscale [Elastic IP address][eip-doc] resource. This can be used to create, update and delete Elastic IPs.

        See [`SecondaryIPAddress`][r-secondary_ipaddress] for usage with Compute instances.

        !> **WARNING:** This resource is deprecated and will be removed in the next major version.

        ## Import

        An existing Elastic IP can be imported as a resource by address or IDconsole # By address

        ```sh
         $ pulumi import exoscale:index/iPAddress:IPAddress myip 159.100.251.224
        ```

        # By ID

        ```sh
         $ pulumi import exoscale:index/iPAddress:IPAddress myip eb556678-ec59-4be6-8c54-0406ae0f6da6
        ```

         [eip-doc]https://community.exoscale.com/documentation/compute/eip/ [r-secondary_ipaddress]secondary_ipaddress.html [zone]https://www.exoscale.com/datacenters/

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: The description of the Elastic IP.
        :param pulumi.Input[int] healthcheck_interval: The healthcheck probing interval in seconds (must be between `5` and `300`).
        :param pulumi.Input[str] healthcheck_mode: The healthcheck probing mode (must be `tcp`, `http` or `https`).
        :param pulumi.Input[str] healthcheck_path: The healthcheck probe HTTP request path (must be specified in `http`/`https` modes).
        :param pulumi.Input[int] healthcheck_port: The healthcheck service port to probe (must be between `1` and `65535`).
        :param pulumi.Input[int] healthcheck_strikes_fail: The number of unsuccessful healthcheck probes before considering the target unhealthy (must be between `1` and `20`).
        :param pulumi.Input[int] healthcheck_strikes_ok: The number of successful healthcheck probes before considering the target healthy (must be between `1` and `20`).
        :param pulumi.Input[int] healthcheck_timeout: The time in seconds before considering a healthcheck probing failed (must be between `2` and `60`).
        :param pulumi.Input[bool] healthcheck_tls_skip_verify: Disable TLS certificate validation in `https` mode. Note: this parameter can only be changed to `true`, it cannot be reset to `false` later on (requires a resource re-creation).
        :param pulumi.Input[str] healthcheck_tls_sni: The healthcheck TLS server name to specify in `https` mode. Note: this parameter can only be changed to a non-empty value, it cannot be reset to its default empty value later on (requires a resource re-creation).
        :param pulumi.Input[str] reverse_dns: A reverse DNS record to set for the Elastic IP.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: A dictionary of tags (key/value). To remove all tags, set `tags = {}`.
        :param pulumi.Input[str] zone: The name of the [zone][zone] to create the Elastic IP into.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: IPAddressArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides an Exoscale [Elastic IP address][eip-doc] resource. This can be used to create, update and delete Elastic IPs.

        See [`SecondaryIPAddress`][r-secondary_ipaddress] for usage with Compute instances.

        !> **WARNING:** This resource is deprecated and will be removed in the next major version.

        ## Import

        An existing Elastic IP can be imported as a resource by address or IDconsole # By address

        ```sh
         $ pulumi import exoscale:index/iPAddress:IPAddress myip 159.100.251.224
        ```

        # By ID

        ```sh
         $ pulumi import exoscale:index/iPAddress:IPAddress myip eb556678-ec59-4be6-8c54-0406ae0f6da6
        ```

         [eip-doc]https://community.exoscale.com/documentation/compute/eip/ [r-secondary_ipaddress]secondary_ipaddress.html [zone]https://www.exoscale.com/datacenters/

        :param str resource_name: The name of the resource.
        :param IPAddressArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IPAddressArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 healthcheck_interval: Optional[pulumi.Input[int]] = None,
                 healthcheck_mode: Optional[pulumi.Input[str]] = None,
                 healthcheck_path: Optional[pulumi.Input[str]] = None,
                 healthcheck_port: Optional[pulumi.Input[int]] = None,
                 healthcheck_strikes_fail: Optional[pulumi.Input[int]] = None,
                 healthcheck_strikes_ok: Optional[pulumi.Input[int]] = None,
                 healthcheck_timeout: Optional[pulumi.Input[int]] = None,
                 healthcheck_tls_skip_verify: Optional[pulumi.Input[bool]] = None,
                 healthcheck_tls_sni: Optional[pulumi.Input[str]] = None,
                 reverse_dns: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 zone: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IPAddressArgs.__new__(IPAddressArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["healthcheck_interval"] = healthcheck_interval
            __props__.__dict__["healthcheck_mode"] = healthcheck_mode
            __props__.__dict__["healthcheck_path"] = healthcheck_path
            __props__.__dict__["healthcheck_port"] = healthcheck_port
            __props__.__dict__["healthcheck_strikes_fail"] = healthcheck_strikes_fail
            __props__.__dict__["healthcheck_strikes_ok"] = healthcheck_strikes_ok
            __props__.__dict__["healthcheck_timeout"] = healthcheck_timeout
            __props__.__dict__["healthcheck_tls_skip_verify"] = healthcheck_tls_skip_verify
            __props__.__dict__["healthcheck_tls_sni"] = healthcheck_tls_sni
            __props__.__dict__["reverse_dns"] = reverse_dns
            __props__.__dict__["tags"] = tags
            if zone is None and not opts.urn:
                raise TypeError("Missing required property 'zone'")
            __props__.__dict__["zone"] = zone
            __props__.__dict__["ip_address"] = None
        super(IPAddress, __self__).__init__(
            'exoscale:index/iPAddress:IPAddress',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[str]] = None,
            healthcheck_interval: Optional[pulumi.Input[int]] = None,
            healthcheck_mode: Optional[pulumi.Input[str]] = None,
            healthcheck_path: Optional[pulumi.Input[str]] = None,
            healthcheck_port: Optional[pulumi.Input[int]] = None,
            healthcheck_strikes_fail: Optional[pulumi.Input[int]] = None,
            healthcheck_strikes_ok: Optional[pulumi.Input[int]] = None,
            healthcheck_timeout: Optional[pulumi.Input[int]] = None,
            healthcheck_tls_skip_verify: Optional[pulumi.Input[bool]] = None,
            healthcheck_tls_sni: Optional[pulumi.Input[str]] = None,
            ip_address: Optional[pulumi.Input[str]] = None,
            reverse_dns: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            zone: Optional[pulumi.Input[str]] = None) -> 'IPAddress':
        """
        Get an existing IPAddress resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: The description of the Elastic IP.
        :param pulumi.Input[int] healthcheck_interval: The healthcheck probing interval in seconds (must be between `5` and `300`).
        :param pulumi.Input[str] healthcheck_mode: The healthcheck probing mode (must be `tcp`, `http` or `https`).
        :param pulumi.Input[str] healthcheck_path: The healthcheck probe HTTP request path (must be specified in `http`/`https` modes).
        :param pulumi.Input[int] healthcheck_port: The healthcheck service port to probe (must be between `1` and `65535`).
        :param pulumi.Input[int] healthcheck_strikes_fail: The number of unsuccessful healthcheck probes before considering the target unhealthy (must be between `1` and `20`).
        :param pulumi.Input[int] healthcheck_strikes_ok: The number of successful healthcheck probes before considering the target healthy (must be between `1` and `20`).
        :param pulumi.Input[int] healthcheck_timeout: The time in seconds before considering a healthcheck probing failed (must be between `2` and `60`).
        :param pulumi.Input[bool] healthcheck_tls_skip_verify: Disable TLS certificate validation in `https` mode. Note: this parameter can only be changed to `true`, it cannot be reset to `false` later on (requires a resource re-creation).
        :param pulumi.Input[str] healthcheck_tls_sni: The healthcheck TLS server name to specify in `https` mode. Note: this parameter can only be changed to a non-empty value, it cannot be reset to its default empty value later on (requires a resource re-creation).
        :param pulumi.Input[str] ip_address: The Elastic IP address.
        :param pulumi.Input[str] reverse_dns: A reverse DNS record to set for the Elastic IP.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: A dictionary of tags (key/value). To remove all tags, set `tags = {}`.
        :param pulumi.Input[str] zone: The name of the [zone][zone] to create the Elastic IP into.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IPAddressState.__new__(_IPAddressState)

        __props__.__dict__["description"] = description
        __props__.__dict__["healthcheck_interval"] = healthcheck_interval
        __props__.__dict__["healthcheck_mode"] = healthcheck_mode
        __props__.__dict__["healthcheck_path"] = healthcheck_path
        __props__.__dict__["healthcheck_port"] = healthcheck_port
        __props__.__dict__["healthcheck_strikes_fail"] = healthcheck_strikes_fail
        __props__.__dict__["healthcheck_strikes_ok"] = healthcheck_strikes_ok
        __props__.__dict__["healthcheck_timeout"] = healthcheck_timeout
        __props__.__dict__["healthcheck_tls_skip_verify"] = healthcheck_tls_skip_verify
        __props__.__dict__["healthcheck_tls_sni"] = healthcheck_tls_sni
        __props__.__dict__["ip_address"] = ip_address
        __props__.__dict__["reverse_dns"] = reverse_dns
        __props__.__dict__["tags"] = tags
        __props__.__dict__["zone"] = zone
        return IPAddress(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        The description of the Elastic IP.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="healthcheckInterval")
    def healthcheck_interval(self) -> pulumi.Output[Optional[int]]:
        """
        The healthcheck probing interval in seconds (must be between `5` and `300`).
        """
        return pulumi.get(self, "healthcheck_interval")

    @property
    @pulumi.getter(name="healthcheckMode")
    def healthcheck_mode(self) -> pulumi.Output[Optional[str]]:
        """
        The healthcheck probing mode (must be `tcp`, `http` or `https`).
        """
        return pulumi.get(self, "healthcheck_mode")

    @property
    @pulumi.getter(name="healthcheckPath")
    def healthcheck_path(self) -> pulumi.Output[Optional[str]]:
        """
        The healthcheck probe HTTP request path (must be specified in `http`/`https` modes).
        """
        return pulumi.get(self, "healthcheck_path")

    @property
    @pulumi.getter(name="healthcheckPort")
    def healthcheck_port(self) -> pulumi.Output[Optional[int]]:
        """
        The healthcheck service port to probe (must be between `1` and `65535`).
        """
        return pulumi.get(self, "healthcheck_port")

    @property
    @pulumi.getter(name="healthcheckStrikesFail")
    def healthcheck_strikes_fail(self) -> pulumi.Output[Optional[int]]:
        """
        The number of unsuccessful healthcheck probes before considering the target unhealthy (must be between `1` and `20`).
        """
        return pulumi.get(self, "healthcheck_strikes_fail")

    @property
    @pulumi.getter(name="healthcheckStrikesOk")
    def healthcheck_strikes_ok(self) -> pulumi.Output[Optional[int]]:
        """
        The number of successful healthcheck probes before considering the target healthy (must be between `1` and `20`).
        """
        return pulumi.get(self, "healthcheck_strikes_ok")

    @property
    @pulumi.getter(name="healthcheckTimeout")
    def healthcheck_timeout(self) -> pulumi.Output[Optional[int]]:
        """
        The time in seconds before considering a healthcheck probing failed (must be between `2` and `60`).
        """
        return pulumi.get(self, "healthcheck_timeout")

    @property
    @pulumi.getter(name="healthcheckTlsSkipVerify")
    def healthcheck_tls_skip_verify(self) -> pulumi.Output[Optional[bool]]:
        """
        Disable TLS certificate validation in `https` mode. Note: this parameter can only be changed to `true`, it cannot be reset to `false` later on (requires a resource re-creation).
        """
        return pulumi.get(self, "healthcheck_tls_skip_verify")

    @property
    @pulumi.getter(name="healthcheckTlsSni")
    def healthcheck_tls_sni(self) -> pulumi.Output[Optional[str]]:
        """
        The healthcheck TLS server name to specify in `https` mode. Note: this parameter can only be changed to a non-empty value, it cannot be reset to its default empty value later on (requires a resource re-creation).
        """
        return pulumi.get(self, "healthcheck_tls_sni")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> pulumi.Output[str]:
        """
        The Elastic IP address.
        """
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter(name="reverseDns")
    def reverse_dns(self) -> pulumi.Output[Optional[str]]:
        """
        A reverse DNS record to set for the Elastic IP.
        """
        return pulumi.get(self, "reverse_dns")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Mapping[str, str]]:
        """
        A dictionary of tags (key/value). To remove all tags, set `tags = {}`.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def zone(self) -> pulumi.Output[str]:
        """
        The name of the [zone][zone] to create the Elastic IP into.
        """
        return pulumi.get(self, "zone")

