# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SKSClusterArgs', 'SKSCluster']

@pulumi.input_type
class SKSClusterArgs:
    def __init__(__self__, *,
                 zone: pulumi.Input[str],
                 addons: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 auto_upgrade: Optional[pulumi.Input[bool]] = None,
                 cni: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 exoscale_ccm: Optional[pulumi.Input[bool]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 metrics_server: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 oidc: Optional[pulumi.Input['SKSClusterOidcArgs']] = None,
                 service_level: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a SKSCluster resource.
        :param pulumi.Input[str] zone: The name of the [zone][zone] to deploy the SKS cluster into.
        :param pulumi.Input[bool] auto_upgrade: Enable automatic upgrading of the SKS cluster control plane Kubernetes version (default: `false`).
        :param pulumi.Input[str] cni: The Kubernetes [CNI][cni] plugin to be deployed in the SKS cluster control plane (default: `"calico"`). Can only be set during creation.
        :param pulumi.Input[str] description: The description of the SKS cluster.
        :param pulumi.Input[bool] exoscale_ccm: Deploy the Exoscale [Cloud Controller Manager][exo-ccm] in the SKS cluster control plane (default: `true`). Can only be set during creation.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: A map of key/value labels.
        :param pulumi.Input[bool] metrics_server: Deploy the [Kubernetes Metrics Server][k8s-ms] in the SKS cluster control plane (default: `true`). Can only be set during creation.
        :param pulumi.Input[str] name: The name of the SKS cluster.
        :param pulumi.Input['SKSClusterOidcArgs'] oidc: An OpenID Connect configuration to provide to the Kubernetes API server. Can only be set during creation. Structure is documented below.
        :param pulumi.Input[str] service_level: The service level of the SKS cluster control plane (default: `"pro"`). Can only be set during creation.
        :param pulumi.Input[str] version: The Kubernetes version of the SKS cluster control plane (default: latest version available from the API). Can only be set during creation.
        """
        pulumi.set(__self__, "zone", zone)
        if addons is not None:
            warnings.warn("""This attribute has been replaced by `exoscale_ccm`/`metrics_server` attributes, it will be removed in a future release.""", DeprecationWarning)
            pulumi.log.warn("""addons is deprecated: This attribute has been replaced by `exoscale_ccm`/`metrics_server` attributes, it will be removed in a future release.""")
        if addons is not None:
            pulumi.set(__self__, "addons", addons)
        if auto_upgrade is not None:
            pulumi.set(__self__, "auto_upgrade", auto_upgrade)
        if cni is not None:
            pulumi.set(__self__, "cni", cni)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if exoscale_ccm is not None:
            pulumi.set(__self__, "exoscale_ccm", exoscale_ccm)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if metrics_server is not None:
            pulumi.set(__self__, "metrics_server", metrics_server)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if oidc is not None:
            pulumi.set(__self__, "oidc", oidc)
        if service_level is not None:
            pulumi.set(__self__, "service_level", service_level)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def zone(self) -> pulumi.Input[str]:
        """
        The name of the [zone][zone] to deploy the SKS cluster into.
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: pulumi.Input[str]):
        pulumi.set(self, "zone", value)

    @property
    @pulumi.getter
    def addons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "addons")

    @addons.setter
    def addons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "addons", value)

    @property
    @pulumi.getter(name="autoUpgrade")
    def auto_upgrade(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable automatic upgrading of the SKS cluster control plane Kubernetes version (default: `false`).
        """
        return pulumi.get(self, "auto_upgrade")

    @auto_upgrade.setter
    def auto_upgrade(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_upgrade", value)

    @property
    @pulumi.getter
    def cni(self) -> Optional[pulumi.Input[str]]:
        """
        The Kubernetes [CNI][cni] plugin to be deployed in the SKS cluster control plane (default: `"calico"`). Can only be set during creation.
        """
        return pulumi.get(self, "cni")

    @cni.setter
    def cni(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cni", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the SKS cluster.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="exoscaleCcm")
    def exoscale_ccm(self) -> Optional[pulumi.Input[bool]]:
        """
        Deploy the Exoscale [Cloud Controller Manager][exo-ccm] in the SKS cluster control plane (default: `true`). Can only be set during creation.
        """
        return pulumi.get(self, "exoscale_ccm")

    @exoscale_ccm.setter
    def exoscale_ccm(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "exoscale_ccm", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A map of key/value labels.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="metricsServer")
    def metrics_server(self) -> Optional[pulumi.Input[bool]]:
        """
        Deploy the [Kubernetes Metrics Server][k8s-ms] in the SKS cluster control plane (default: `true`). Can only be set during creation.
        """
        return pulumi.get(self, "metrics_server")

    @metrics_server.setter
    def metrics_server(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "metrics_server", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the SKS cluster.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def oidc(self) -> Optional[pulumi.Input['SKSClusterOidcArgs']]:
        """
        An OpenID Connect configuration to provide to the Kubernetes API server. Can only be set during creation. Structure is documented below.
        """
        return pulumi.get(self, "oidc")

    @oidc.setter
    def oidc(self, value: Optional[pulumi.Input['SKSClusterOidcArgs']]):
        pulumi.set(self, "oidc", value)

    @property
    @pulumi.getter(name="serviceLevel")
    def service_level(self) -> Optional[pulumi.Input[str]]:
        """
        The service level of the SKS cluster control plane (default: `"pro"`). Can only be set during creation.
        """
        return pulumi.get(self, "service_level")

    @service_level.setter
    def service_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_level", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        The Kubernetes version of the SKS cluster control plane (default: latest version available from the API). Can only be set during creation.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class _SKSClusterState:
    def __init__(__self__, *,
                 addons: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 auto_upgrade: Optional[pulumi.Input[bool]] = None,
                 cni: Optional[pulumi.Input[str]] = None,
                 created_at: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 endpoint: Optional[pulumi.Input[str]] = None,
                 exoscale_ccm: Optional[pulumi.Input[bool]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 metrics_server: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nodepools: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 oidc: Optional[pulumi.Input['SKSClusterOidcArgs']] = None,
                 service_level: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None,
                 zone: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering SKSCluster resources.
        :param pulumi.Input[bool] auto_upgrade: Enable automatic upgrading of the SKS cluster control plane Kubernetes version (default: `false`).
        :param pulumi.Input[str] cni: The Kubernetes [CNI][cni] plugin to be deployed in the SKS cluster control plane (default: `"calico"`). Can only be set during creation.
        :param pulumi.Input[str] created_at: The creation date of the SKS cluster.
        :param pulumi.Input[str] description: The description of the SKS cluster.
        :param pulumi.Input[str] endpoint: The Kubernetes public API endpoint of the SKS cluster.
        :param pulumi.Input[bool] exoscale_ccm: Deploy the Exoscale [Cloud Controller Manager][exo-ccm] in the SKS cluster control plane (default: `true`). Can only be set during creation.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: A map of key/value labels.
        :param pulumi.Input[bool] metrics_server: Deploy the [Kubernetes Metrics Server][k8s-ms] in the SKS cluster control plane (default: `true`). Can only be set during creation.
        :param pulumi.Input[str] name: The name of the SKS cluster.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] nodepools: The list of [SKS Nodepools][r-sks_nodepool] (IDs) attached to the SKS cluster.
        :param pulumi.Input['SKSClusterOidcArgs'] oidc: An OpenID Connect configuration to provide to the Kubernetes API server. Can only be set during creation. Structure is documented below.
        :param pulumi.Input[str] service_level: The service level of the SKS cluster control plane (default: `"pro"`). Can only be set during creation.
        :param pulumi.Input[str] state: The current state of the SKS cluster.
        :param pulumi.Input[str] version: The Kubernetes version of the SKS cluster control plane (default: latest version available from the API). Can only be set during creation.
        :param pulumi.Input[str] zone: The name of the [zone][zone] to deploy the SKS cluster into.
        """
        if addons is not None:
            warnings.warn("""This attribute has been replaced by `exoscale_ccm`/`metrics_server` attributes, it will be removed in a future release.""", DeprecationWarning)
            pulumi.log.warn("""addons is deprecated: This attribute has been replaced by `exoscale_ccm`/`metrics_server` attributes, it will be removed in a future release.""")
        if addons is not None:
            pulumi.set(__self__, "addons", addons)
        if auto_upgrade is not None:
            pulumi.set(__self__, "auto_upgrade", auto_upgrade)
        if cni is not None:
            pulumi.set(__self__, "cni", cni)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if endpoint is not None:
            pulumi.set(__self__, "endpoint", endpoint)
        if exoscale_ccm is not None:
            pulumi.set(__self__, "exoscale_ccm", exoscale_ccm)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if metrics_server is not None:
            pulumi.set(__self__, "metrics_server", metrics_server)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nodepools is not None:
            pulumi.set(__self__, "nodepools", nodepools)
        if oidc is not None:
            pulumi.set(__self__, "oidc", oidc)
        if service_level is not None:
            pulumi.set(__self__, "service_level", service_level)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if version is not None:
            pulumi.set(__self__, "version", version)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter
    def addons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "addons")

    @addons.setter
    def addons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "addons", value)

    @property
    @pulumi.getter(name="autoUpgrade")
    def auto_upgrade(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable automatic upgrading of the SKS cluster control plane Kubernetes version (default: `false`).
        """
        return pulumi.get(self, "auto_upgrade")

    @auto_upgrade.setter
    def auto_upgrade(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_upgrade", value)

    @property
    @pulumi.getter
    def cni(self) -> Optional[pulumi.Input[str]]:
        """
        The Kubernetes [CNI][cni] plugin to be deployed in the SKS cluster control plane (default: `"calico"`). Can only be set during creation.
        """
        return pulumi.get(self, "cni")

    @cni.setter
    def cni(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cni", value)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[str]]:
        """
        The creation date of the SKS cluster.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the SKS cluster.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def endpoint(self) -> Optional[pulumi.Input[str]]:
        """
        The Kubernetes public API endpoint of the SKS cluster.
        """
        return pulumi.get(self, "endpoint")

    @endpoint.setter
    def endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "endpoint", value)

    @property
    @pulumi.getter(name="exoscaleCcm")
    def exoscale_ccm(self) -> Optional[pulumi.Input[bool]]:
        """
        Deploy the Exoscale [Cloud Controller Manager][exo-ccm] in the SKS cluster control plane (default: `true`). Can only be set during creation.
        """
        return pulumi.get(self, "exoscale_ccm")

    @exoscale_ccm.setter
    def exoscale_ccm(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "exoscale_ccm", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A map of key/value labels.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="metricsServer")
    def metrics_server(self) -> Optional[pulumi.Input[bool]]:
        """
        Deploy the [Kubernetes Metrics Server][k8s-ms] in the SKS cluster control plane (default: `true`). Can only be set during creation.
        """
        return pulumi.get(self, "metrics_server")

    @metrics_server.setter
    def metrics_server(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "metrics_server", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the SKS cluster.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def nodepools(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The list of [SKS Nodepools][r-sks_nodepool] (IDs) attached to the SKS cluster.
        """
        return pulumi.get(self, "nodepools")

    @nodepools.setter
    def nodepools(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "nodepools", value)

    @property
    @pulumi.getter
    def oidc(self) -> Optional[pulumi.Input['SKSClusterOidcArgs']]:
        """
        An OpenID Connect configuration to provide to the Kubernetes API server. Can only be set during creation. Structure is documented below.
        """
        return pulumi.get(self, "oidc")

    @oidc.setter
    def oidc(self, value: Optional[pulumi.Input['SKSClusterOidcArgs']]):
        pulumi.set(self, "oidc", value)

    @property
    @pulumi.getter(name="serviceLevel")
    def service_level(self) -> Optional[pulumi.Input[str]]:
        """
        The service level of the SKS cluster control plane (default: `"pro"`). Can only be set during creation.
        """
        return pulumi.get(self, "service_level")

    @service_level.setter
    def service_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_level", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        """
        The current state of the SKS cluster.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        The Kubernetes version of the SKS cluster control plane (default: latest version available from the API). Can only be set during creation.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)

    @property
    @pulumi.getter
    def zone(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the [zone][zone] to deploy the SKS cluster into.
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone", value)


class SKSCluster(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 addons: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 auto_upgrade: Optional[pulumi.Input[bool]] = None,
                 cni: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 exoscale_ccm: Optional[pulumi.Input[bool]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 metrics_server: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 oidc: Optional[pulumi.Input[pulumi.InputType['SKSClusterOidcArgs']]] = None,
                 service_level: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None,
                 zone: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides an Exoscale [SKS][sks-doc] cluster resource. This can be used to create, modify, and delete SKS clusters.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_exoscale as exoscale

        zone = "de-fra-1"
        prod = exoscale.SKSCluster("prod",
            zone=zone,
            version="1.20.2",
            labels={
                "env": "prod",
            })
        pulumi.export("sksEndpoint", prod.endpoint)
        ```

        ## Import

        An existing SKS cluster can be imported as a resource by specifying `ID@ZONE`console

        ```sh
         $ pulumi import exoscale:index/sKSCluster:SKSCluster example eb556678-ec59-4be6-8c54-0406ae0f6da6@de-fra-1
        ```

         [cni]https://www.cni.dev/ [exo-ccm]https://github.com/exoscale/exoscale-cloud-controller-manager [k8s-ms]https://github.com/kubernetes-sigs/metrics-server [r-sks_nodepool]sks_nodepool.html [sks-doc]https://community.exoscale.com/documentation/sks/ [zone]https://www.exoscale.com/datacenters/

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] auto_upgrade: Enable automatic upgrading of the SKS cluster control plane Kubernetes version (default: `false`).
        :param pulumi.Input[str] cni: The Kubernetes [CNI][cni] plugin to be deployed in the SKS cluster control plane (default: `"calico"`). Can only be set during creation.
        :param pulumi.Input[str] description: The description of the SKS cluster.
        :param pulumi.Input[bool] exoscale_ccm: Deploy the Exoscale [Cloud Controller Manager][exo-ccm] in the SKS cluster control plane (default: `true`). Can only be set during creation.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: A map of key/value labels.
        :param pulumi.Input[bool] metrics_server: Deploy the [Kubernetes Metrics Server][k8s-ms] in the SKS cluster control plane (default: `true`). Can only be set during creation.
        :param pulumi.Input[str] name: The name of the SKS cluster.
        :param pulumi.Input[pulumi.InputType['SKSClusterOidcArgs']] oidc: An OpenID Connect configuration to provide to the Kubernetes API server. Can only be set during creation. Structure is documented below.
        :param pulumi.Input[str] service_level: The service level of the SKS cluster control plane (default: `"pro"`). Can only be set during creation.
        :param pulumi.Input[str] version: The Kubernetes version of the SKS cluster control plane (default: latest version available from the API). Can only be set during creation.
        :param pulumi.Input[str] zone: The name of the [zone][zone] to deploy the SKS cluster into.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SKSClusterArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides an Exoscale [SKS][sks-doc] cluster resource. This can be used to create, modify, and delete SKS clusters.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_exoscale as exoscale

        zone = "de-fra-1"
        prod = exoscale.SKSCluster("prod",
            zone=zone,
            version="1.20.2",
            labels={
                "env": "prod",
            })
        pulumi.export("sksEndpoint", prod.endpoint)
        ```

        ## Import

        An existing SKS cluster can be imported as a resource by specifying `ID@ZONE`console

        ```sh
         $ pulumi import exoscale:index/sKSCluster:SKSCluster example eb556678-ec59-4be6-8c54-0406ae0f6da6@de-fra-1
        ```

         [cni]https://www.cni.dev/ [exo-ccm]https://github.com/exoscale/exoscale-cloud-controller-manager [k8s-ms]https://github.com/kubernetes-sigs/metrics-server [r-sks_nodepool]sks_nodepool.html [sks-doc]https://community.exoscale.com/documentation/sks/ [zone]https://www.exoscale.com/datacenters/

        :param str resource_name: The name of the resource.
        :param SKSClusterArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SKSClusterArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 addons: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 auto_upgrade: Optional[pulumi.Input[bool]] = None,
                 cni: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 exoscale_ccm: Optional[pulumi.Input[bool]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 metrics_server: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 oidc: Optional[pulumi.Input[pulumi.InputType['SKSClusterOidcArgs']]] = None,
                 service_level: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None,
                 zone: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SKSClusterArgs.__new__(SKSClusterArgs)

            if addons is not None and not opts.urn:
                warnings.warn("""This attribute has been replaced by `exoscale_ccm`/`metrics_server` attributes, it will be removed in a future release.""", DeprecationWarning)
                pulumi.log.warn("""addons is deprecated: This attribute has been replaced by `exoscale_ccm`/`metrics_server` attributes, it will be removed in a future release.""")
            __props__.__dict__["addons"] = addons
            __props__.__dict__["auto_upgrade"] = auto_upgrade
            __props__.__dict__["cni"] = cni
            __props__.__dict__["description"] = description
            __props__.__dict__["exoscale_ccm"] = exoscale_ccm
            __props__.__dict__["labels"] = labels
            __props__.__dict__["metrics_server"] = metrics_server
            __props__.__dict__["name"] = name
            __props__.__dict__["oidc"] = oidc
            __props__.__dict__["service_level"] = service_level
            __props__.__dict__["version"] = version
            if zone is None and not opts.urn:
                raise TypeError("Missing required property 'zone'")
            __props__.__dict__["zone"] = zone
            __props__.__dict__["created_at"] = None
            __props__.__dict__["endpoint"] = None
            __props__.__dict__["nodepools"] = None
            __props__.__dict__["state"] = None
        super(SKSCluster, __self__).__init__(
            'exoscale:index/sKSCluster:SKSCluster',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            addons: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            auto_upgrade: Optional[pulumi.Input[bool]] = None,
            cni: Optional[pulumi.Input[str]] = None,
            created_at: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            endpoint: Optional[pulumi.Input[str]] = None,
            exoscale_ccm: Optional[pulumi.Input[bool]] = None,
            labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            metrics_server: Optional[pulumi.Input[bool]] = None,
            name: Optional[pulumi.Input[str]] = None,
            nodepools: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            oidc: Optional[pulumi.Input[pulumi.InputType['SKSClusterOidcArgs']]] = None,
            service_level: Optional[pulumi.Input[str]] = None,
            state: Optional[pulumi.Input[str]] = None,
            version: Optional[pulumi.Input[str]] = None,
            zone: Optional[pulumi.Input[str]] = None) -> 'SKSCluster':
        """
        Get an existing SKSCluster resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] auto_upgrade: Enable automatic upgrading of the SKS cluster control plane Kubernetes version (default: `false`).
        :param pulumi.Input[str] cni: The Kubernetes [CNI][cni] plugin to be deployed in the SKS cluster control plane (default: `"calico"`). Can only be set during creation.
        :param pulumi.Input[str] created_at: The creation date of the SKS cluster.
        :param pulumi.Input[str] description: The description of the SKS cluster.
        :param pulumi.Input[str] endpoint: The Kubernetes public API endpoint of the SKS cluster.
        :param pulumi.Input[bool] exoscale_ccm: Deploy the Exoscale [Cloud Controller Manager][exo-ccm] in the SKS cluster control plane (default: `true`). Can only be set during creation.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: A map of key/value labels.
        :param pulumi.Input[bool] metrics_server: Deploy the [Kubernetes Metrics Server][k8s-ms] in the SKS cluster control plane (default: `true`). Can only be set during creation.
        :param pulumi.Input[str] name: The name of the SKS cluster.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] nodepools: The list of [SKS Nodepools][r-sks_nodepool] (IDs) attached to the SKS cluster.
        :param pulumi.Input[pulumi.InputType['SKSClusterOidcArgs']] oidc: An OpenID Connect configuration to provide to the Kubernetes API server. Can only be set during creation. Structure is documented below.
        :param pulumi.Input[str] service_level: The service level of the SKS cluster control plane (default: `"pro"`). Can only be set during creation.
        :param pulumi.Input[str] state: The current state of the SKS cluster.
        :param pulumi.Input[str] version: The Kubernetes version of the SKS cluster control plane (default: latest version available from the API). Can only be set during creation.
        :param pulumi.Input[str] zone: The name of the [zone][zone] to deploy the SKS cluster into.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SKSClusterState.__new__(_SKSClusterState)

        __props__.__dict__["addons"] = addons
        __props__.__dict__["auto_upgrade"] = auto_upgrade
        __props__.__dict__["cni"] = cni
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["description"] = description
        __props__.__dict__["endpoint"] = endpoint
        __props__.__dict__["exoscale_ccm"] = exoscale_ccm
        __props__.__dict__["labels"] = labels
        __props__.__dict__["metrics_server"] = metrics_server
        __props__.__dict__["name"] = name
        __props__.__dict__["nodepools"] = nodepools
        __props__.__dict__["oidc"] = oidc
        __props__.__dict__["service_level"] = service_level
        __props__.__dict__["state"] = state
        __props__.__dict__["version"] = version
        __props__.__dict__["zone"] = zone
        return SKSCluster(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def addons(self) -> pulumi.Output[Sequence[str]]:
        return pulumi.get(self, "addons")

    @property
    @pulumi.getter(name="autoUpgrade")
    def auto_upgrade(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable automatic upgrading of the SKS cluster control plane Kubernetes version (default: `false`).
        """
        return pulumi.get(self, "auto_upgrade")

    @property
    @pulumi.getter
    def cni(self) -> pulumi.Output[Optional[str]]:
        """
        The Kubernetes [CNI][cni] plugin to be deployed in the SKS cluster control plane (default: `"calico"`). Can only be set during creation.
        """
        return pulumi.get(self, "cni")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[str]:
        """
        The creation date of the SKS cluster.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        The description of the SKS cluster.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def endpoint(self) -> pulumi.Output[str]:
        """
        The Kubernetes public API endpoint of the SKS cluster.
        """
        return pulumi.get(self, "endpoint")

    @property
    @pulumi.getter(name="exoscaleCcm")
    def exoscale_ccm(self) -> pulumi.Output[Optional[bool]]:
        """
        Deploy the Exoscale [Cloud Controller Manager][exo-ccm] in the SKS cluster control plane (default: `true`). Can only be set during creation.
        """
        return pulumi.get(self, "exoscale_ccm")

    @property
    @pulumi.getter
    def labels(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        A map of key/value labels.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="metricsServer")
    def metrics_server(self) -> pulumi.Output[Optional[bool]]:
        """
        Deploy the [Kubernetes Metrics Server][k8s-ms] in the SKS cluster control plane (default: `true`). Can only be set during creation.
        """
        return pulumi.get(self, "metrics_server")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the SKS cluster.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def nodepools(self) -> pulumi.Output[Sequence[str]]:
        """
        The list of [SKS Nodepools][r-sks_nodepool] (IDs) attached to the SKS cluster.
        """
        return pulumi.get(self, "nodepools")

    @property
    @pulumi.getter
    def oidc(self) -> pulumi.Output['outputs.SKSClusterOidc']:
        """
        An OpenID Connect configuration to provide to the Kubernetes API server. Can only be set during creation. Structure is documented below.
        """
        return pulumi.get(self, "oidc")

    @property
    @pulumi.getter(name="serviceLevel")
    def service_level(self) -> pulumi.Output[Optional[str]]:
        """
        The service level of the SKS cluster control plane (default: `"pro"`). Can only be set during creation.
        """
        return pulumi.get(self, "service_level")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[str]:
        """
        The current state of the SKS cluster.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def version(self) -> pulumi.Output[str]:
        """
        The Kubernetes version of the SKS cluster control plane (default: latest version available from the API). Can only be set during creation.
        """
        return pulumi.get(self, "version")

    @property
    @pulumi.getter
    def zone(self) -> pulumi.Output[str]:
        """
        The name of the [zone][zone] to deploy the SKS cluster into.
        """
        return pulumi.get(self, "zone")

