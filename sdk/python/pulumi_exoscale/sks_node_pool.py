# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['SKSNodePoolArgs', 'SKSNodePool']

@pulumi.input_type
class SKSNodePoolArgs:
    def __init__(__self__, *,
                 cluster_id: pulumi.Input[str],
                 instance_type: pulumi.Input[str],
                 size: pulumi.Input[int],
                 zone: pulumi.Input[str],
                 anti_affinity_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 deploy_target_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 disk_size: Optional[pulumi.Input[int]] = None,
                 instance_prefix: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 private_network_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 taints: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a SKSNodePool resource.
        :param pulumi.Input[str] cluster_id: The ID of the parent SKS cluster.
        :param pulumi.Input[str] instance_type: The [type][type] of Compute instances managed by the SKS Nodepool (format: `FAMILY.SIZE`, e.g. `standard.medium`, `memory.huge`).
        :param pulumi.Input[int] size: The number of Compute instances the SKS Nodepool manages.
        :param pulumi.Input[str] zone: The name of the [zone][zone] to deploy the SKS Nodepool into.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] anti_affinity_group_ids: The list of Anti-Affinity Groups (IDs) the Compute instances managed by the SKS Nodepool are member of.
        :param pulumi.Input[str] deploy_target_id: A Deploy Target ID to deploy managed Compute instances to.
        :param pulumi.Input[str] description: The description of the SKS Nodepool.
        :param pulumi.Input[int] disk_size: The disk size of the Compute instances managed by the SKS Nodepool (default: `50`).
        :param pulumi.Input[str] instance_prefix: The string to add as prefix to managed Compute instances name (default `pool`).
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: A map of key/value labels.
        :param pulumi.Input[str] name: The name of the SKS Nodepool.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] private_network_ids: The list of Private Networks (IDs) to be attached to the Compute instances managed by the SKS Nodepool.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_ids: The list of Security Groups (IDs) the Compute instances managed by the SKS Nodepool are member of.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] taints: A map of key/value [Kubernetes taints][k8s-taints] (value format: `VALUE:EFFECT`).
        """
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "instance_type", instance_type)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "zone", zone)
        if anti_affinity_group_ids is not None:
            pulumi.set(__self__, "anti_affinity_group_ids", anti_affinity_group_ids)
        if deploy_target_id is not None:
            pulumi.set(__self__, "deploy_target_id", deploy_target_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if disk_size is not None:
            pulumi.set(__self__, "disk_size", disk_size)
        if instance_prefix is not None:
            pulumi.set(__self__, "instance_prefix", instance_prefix)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if private_network_ids is not None:
            pulumi.set(__self__, "private_network_ids", private_network_ids)
        if security_group_ids is not None:
            pulumi.set(__self__, "security_group_ids", security_group_ids)
        if taints is not None:
            pulumi.set(__self__, "taints", taints)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Input[str]:
        """
        The ID of the parent SKS cluster.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input[str]:
        """
        The [type][type] of Compute instances managed by the SKS Nodepool (format: `FAMILY.SIZE`, e.g. `standard.medium`, `memory.huge`).
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter
    def size(self) -> pulumi.Input[int]:
        """
        The number of Compute instances the SKS Nodepool manages.
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: pulumi.Input[int]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter
    def zone(self) -> pulumi.Input[str]:
        """
        The name of the [zone][zone] to deploy the SKS Nodepool into.
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: pulumi.Input[str]):
        pulumi.set(self, "zone", value)

    @property
    @pulumi.getter(name="antiAffinityGroupIds")
    def anti_affinity_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The list of Anti-Affinity Groups (IDs) the Compute instances managed by the SKS Nodepool are member of.
        """
        return pulumi.get(self, "anti_affinity_group_ids")

    @anti_affinity_group_ids.setter
    def anti_affinity_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "anti_affinity_group_ids", value)

    @property
    @pulumi.getter(name="deployTargetId")
    def deploy_target_id(self) -> Optional[pulumi.Input[str]]:
        """
        A Deploy Target ID to deploy managed Compute instances to.
        """
        return pulumi.get(self, "deploy_target_id")

    @deploy_target_id.setter
    def deploy_target_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deploy_target_id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the SKS Nodepool.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> Optional[pulumi.Input[int]]:
        """
        The disk size of the Compute instances managed by the SKS Nodepool (default: `50`).
        """
        return pulumi.get(self, "disk_size")

    @disk_size.setter
    def disk_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "disk_size", value)

    @property
    @pulumi.getter(name="instancePrefix")
    def instance_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        The string to add as prefix to managed Compute instances name (default `pool`).
        """
        return pulumi.get(self, "instance_prefix")

    @instance_prefix.setter
    def instance_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_prefix", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A map of key/value labels.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the SKS Nodepool.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="privateNetworkIds")
    def private_network_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The list of Private Networks (IDs) to be attached to the Compute instances managed by the SKS Nodepool.
        """
        return pulumi.get(self, "private_network_ids")

    @private_network_ids.setter
    def private_network_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "private_network_ids", value)

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The list of Security Groups (IDs) the Compute instances managed by the SKS Nodepool are member of.
        """
        return pulumi.get(self, "security_group_ids")

    @security_group_ids.setter
    def security_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_group_ids", value)

    @property
    @pulumi.getter
    def taints(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A map of key/value [Kubernetes taints][k8s-taints] (value format: `VALUE:EFFECT`).
        """
        return pulumi.get(self, "taints")

    @taints.setter
    def taints(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "taints", value)


@pulumi.input_type
class _SKSNodePoolState:
    def __init__(__self__, *,
                 anti_affinity_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 created_at: Optional[pulumi.Input[str]] = None,
                 deploy_target_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 disk_size: Optional[pulumi.Input[int]] = None,
                 instance_pool_id: Optional[pulumi.Input[str]] = None,
                 instance_prefix: Optional[pulumi.Input[str]] = None,
                 instance_type: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 private_network_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 size: Optional[pulumi.Input[int]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 taints: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 template_id: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None,
                 zone: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering SKSNodePool resources.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] anti_affinity_group_ids: The list of Anti-Affinity Groups (IDs) the Compute instances managed by the SKS Nodepool are member of.
        :param pulumi.Input[str] cluster_id: The ID of the parent SKS cluster.
        :param pulumi.Input[str] created_at: The creation date of the SKS Nodepool.
        :param pulumi.Input[str] deploy_target_id: A Deploy Target ID to deploy managed Compute instances to.
        :param pulumi.Input[str] description: The description of the SKS Nodepool.
        :param pulumi.Input[int] disk_size: The disk size of the Compute instances managed by the SKS Nodepool (default: `50`).
        :param pulumi.Input[str] instance_pool_id: The ID of the Instance Pool managed by the SKS Nodepool.
        :param pulumi.Input[str] instance_prefix: The string to add as prefix to managed Compute instances name (default `pool`).
        :param pulumi.Input[str] instance_type: The [type][type] of Compute instances managed by the SKS Nodepool (format: `FAMILY.SIZE`, e.g. `standard.medium`, `memory.huge`).
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: A map of key/value labels.
        :param pulumi.Input[str] name: The name of the SKS Nodepool.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] private_network_ids: The list of Private Networks (IDs) to be attached to the Compute instances managed by the SKS Nodepool.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_ids: The list of Security Groups (IDs) the Compute instances managed by the SKS Nodepool are member of.
        :param pulumi.Input[int] size: The number of Compute instances the SKS Nodepool manages.
        :param pulumi.Input[str] state: The current state of the SKS Nodepool.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] taints: A map of key/value [Kubernetes taints][k8s-taints] (value format: `VALUE:EFFECT`).
        :param pulumi.Input[str] template_id: The ID of the Compute instance template used by the SKS Nodepool members.
        :param pulumi.Input[str] version: The Kubernetes version of the SKS Nodepool members.
        :param pulumi.Input[str] zone: The name of the [zone][zone] to deploy the SKS Nodepool into.
        """
        if anti_affinity_group_ids is not None:
            pulumi.set(__self__, "anti_affinity_group_ids", anti_affinity_group_ids)
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if deploy_target_id is not None:
            pulumi.set(__self__, "deploy_target_id", deploy_target_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if disk_size is not None:
            pulumi.set(__self__, "disk_size", disk_size)
        if instance_pool_id is not None:
            pulumi.set(__self__, "instance_pool_id", instance_pool_id)
        if instance_prefix is not None:
            pulumi.set(__self__, "instance_prefix", instance_prefix)
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if private_network_ids is not None:
            pulumi.set(__self__, "private_network_ids", private_network_ids)
        if security_group_ids is not None:
            pulumi.set(__self__, "security_group_ids", security_group_ids)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if taints is not None:
            pulumi.set(__self__, "taints", taints)
        if template_id is not None:
            pulumi.set(__self__, "template_id", template_id)
        if version is not None:
            pulumi.set(__self__, "version", version)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="antiAffinityGroupIds")
    def anti_affinity_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The list of Anti-Affinity Groups (IDs) the Compute instances managed by the SKS Nodepool are member of.
        """
        return pulumi.get(self, "anti_affinity_group_ids")

    @anti_affinity_group_ids.setter
    def anti_affinity_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "anti_affinity_group_ids", value)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the parent SKS cluster.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[str]]:
        """
        The creation date of the SKS Nodepool.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter(name="deployTargetId")
    def deploy_target_id(self) -> Optional[pulumi.Input[str]]:
        """
        A Deploy Target ID to deploy managed Compute instances to.
        """
        return pulumi.get(self, "deploy_target_id")

    @deploy_target_id.setter
    def deploy_target_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deploy_target_id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the SKS Nodepool.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> Optional[pulumi.Input[int]]:
        """
        The disk size of the Compute instances managed by the SKS Nodepool (default: `50`).
        """
        return pulumi.get(self, "disk_size")

    @disk_size.setter
    def disk_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "disk_size", value)

    @property
    @pulumi.getter(name="instancePoolId")
    def instance_pool_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the Instance Pool managed by the SKS Nodepool.
        """
        return pulumi.get(self, "instance_pool_id")

    @instance_pool_id.setter
    def instance_pool_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_pool_id", value)

    @property
    @pulumi.getter(name="instancePrefix")
    def instance_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        The string to add as prefix to managed Compute instances name (default `pool`).
        """
        return pulumi.get(self, "instance_prefix")

    @instance_prefix.setter
    def instance_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_prefix", value)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[pulumi.Input[str]]:
        """
        The [type][type] of Compute instances managed by the SKS Nodepool (format: `FAMILY.SIZE`, e.g. `standard.medium`, `memory.huge`).
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A map of key/value labels.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the SKS Nodepool.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="privateNetworkIds")
    def private_network_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The list of Private Networks (IDs) to be attached to the Compute instances managed by the SKS Nodepool.
        """
        return pulumi.get(self, "private_network_ids")

    @private_network_ids.setter
    def private_network_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "private_network_ids", value)

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The list of Security Groups (IDs) the Compute instances managed by the SKS Nodepool are member of.
        """
        return pulumi.get(self, "security_group_ids")

    @security_group_ids.setter
    def security_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_group_ids", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[int]]:
        """
        The number of Compute instances the SKS Nodepool manages.
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        """
        The current state of the SKS Nodepool.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter
    def taints(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A map of key/value [Kubernetes taints][k8s-taints] (value format: `VALUE:EFFECT`).
        """
        return pulumi.get(self, "taints")

    @taints.setter
    def taints(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "taints", value)

    @property
    @pulumi.getter(name="templateId")
    def template_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the Compute instance template used by the SKS Nodepool members.
        """
        return pulumi.get(self, "template_id")

    @template_id.setter
    def template_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "template_id", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        The Kubernetes version of the SKS Nodepool members.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)

    @property
    @pulumi.getter
    def zone(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the [zone][zone] to deploy the SKS Nodepool into.
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone", value)


class SKSNodePool(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 anti_affinity_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 deploy_target_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 disk_size: Optional[pulumi.Input[int]] = None,
                 instance_prefix: Optional[pulumi.Input[str]] = None,
                 instance_type: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 private_network_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 size: Optional[pulumi.Input[int]] = None,
                 taints: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 zone: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides an Exoscale [SKS][sks-doc] Nodepool resource. This can be used to create, modify, and delete SKS Nodepools.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_exoscale as exoscale

        zone = "de-fra-1"
        sks_security_group = exoscale.SecurityGroup("sksSecurityGroup")
        sks_security_group_rules = exoscale.SecurityGroupRules("sksSecurityGroupRules",
            security_group=sks_security_group.name,
            ingresses=[
                exoscale.SecurityGroupRulesIngressArgs(
                    description="Calico traffic",
                    protocol="UDP",
                    ports=["4789"],
                    user_security_group_lists=[sks_security_group.name],
                ),
                exoscale.SecurityGroupRulesIngressArgs(
                    description="Nodes logs/exec",
                    protocol="TCP",
                    ports=["10250"],
                    cidr_lists=[
                        "0.0.0.0/0",
                        "::/0",
                    ],
                ),
                exoscale.SecurityGroupRulesIngressArgs(
                    description="NodePort services",
                    protocol="TCP",
                    cidr_lists=[
                        "0.0.0.0/0",
                        "::/0",
                    ],
                    ports=["30000-32767"],
                ),
            ])
        prod = exoscale.SKSCluster("prod",
            zone=zone,
            version="1.20.3")
        ci_builders = exoscale.SKSNodePool("ci-builders",
            zone=zone,
            cluster_id=prod.id,
            instance_type="standard.medium",
            size=3,
            security_group_ids=[sks_security_group.id],
            labels={
                "role": "ci-builders",
            },
            taints={
                "ci": "ci:NoSchedule",
            })
        ```

        ## Import

        An existing SKS Nodepool can be imported as a resource by `<CLUSTER-ID>/<NODEPOOL-ID>@<ZONE>`console

        ```sh
         $ pulumi import exoscale:index/sKSNodePool:SKSNodePool ci-builders eb556678-ec59-4be6-8c54-0406ae0f6da6/8c08b92a-e673-47c7-866e-dc009f620a82@de-fra-1
        ```

         [k8s-taints]https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/ [r-sks_cluster]sks_cluster.html [sks-doc]https://community.exoscale.com/documentation/sks/ [type]https://www.exoscale.com/pricing/#/compute/ [zone]https://www.exoscale.com/datacenters/

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] anti_affinity_group_ids: The list of Anti-Affinity Groups (IDs) the Compute instances managed by the SKS Nodepool are member of.
        :param pulumi.Input[str] cluster_id: The ID of the parent SKS cluster.
        :param pulumi.Input[str] deploy_target_id: A Deploy Target ID to deploy managed Compute instances to.
        :param pulumi.Input[str] description: The description of the SKS Nodepool.
        :param pulumi.Input[int] disk_size: The disk size of the Compute instances managed by the SKS Nodepool (default: `50`).
        :param pulumi.Input[str] instance_prefix: The string to add as prefix to managed Compute instances name (default `pool`).
        :param pulumi.Input[str] instance_type: The [type][type] of Compute instances managed by the SKS Nodepool (format: `FAMILY.SIZE`, e.g. `standard.medium`, `memory.huge`).
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: A map of key/value labels.
        :param pulumi.Input[str] name: The name of the SKS Nodepool.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] private_network_ids: The list of Private Networks (IDs) to be attached to the Compute instances managed by the SKS Nodepool.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_ids: The list of Security Groups (IDs) the Compute instances managed by the SKS Nodepool are member of.
        :param pulumi.Input[int] size: The number of Compute instances the SKS Nodepool manages.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] taints: A map of key/value [Kubernetes taints][k8s-taints] (value format: `VALUE:EFFECT`).
        :param pulumi.Input[str] zone: The name of the [zone][zone] to deploy the SKS Nodepool into.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SKSNodePoolArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides an Exoscale [SKS][sks-doc] Nodepool resource. This can be used to create, modify, and delete SKS Nodepools.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_exoscale as exoscale

        zone = "de-fra-1"
        sks_security_group = exoscale.SecurityGroup("sksSecurityGroup")
        sks_security_group_rules = exoscale.SecurityGroupRules("sksSecurityGroupRules",
            security_group=sks_security_group.name,
            ingresses=[
                exoscale.SecurityGroupRulesIngressArgs(
                    description="Calico traffic",
                    protocol="UDP",
                    ports=["4789"],
                    user_security_group_lists=[sks_security_group.name],
                ),
                exoscale.SecurityGroupRulesIngressArgs(
                    description="Nodes logs/exec",
                    protocol="TCP",
                    ports=["10250"],
                    cidr_lists=[
                        "0.0.0.0/0",
                        "::/0",
                    ],
                ),
                exoscale.SecurityGroupRulesIngressArgs(
                    description="NodePort services",
                    protocol="TCP",
                    cidr_lists=[
                        "0.0.0.0/0",
                        "::/0",
                    ],
                    ports=["30000-32767"],
                ),
            ])
        prod = exoscale.SKSCluster("prod",
            zone=zone,
            version="1.20.3")
        ci_builders = exoscale.SKSNodePool("ci-builders",
            zone=zone,
            cluster_id=prod.id,
            instance_type="standard.medium",
            size=3,
            security_group_ids=[sks_security_group.id],
            labels={
                "role": "ci-builders",
            },
            taints={
                "ci": "ci:NoSchedule",
            })
        ```

        ## Import

        An existing SKS Nodepool can be imported as a resource by `<CLUSTER-ID>/<NODEPOOL-ID>@<ZONE>`console

        ```sh
         $ pulumi import exoscale:index/sKSNodePool:SKSNodePool ci-builders eb556678-ec59-4be6-8c54-0406ae0f6da6/8c08b92a-e673-47c7-866e-dc009f620a82@de-fra-1
        ```

         [k8s-taints]https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/ [r-sks_cluster]sks_cluster.html [sks-doc]https://community.exoscale.com/documentation/sks/ [type]https://www.exoscale.com/pricing/#/compute/ [zone]https://www.exoscale.com/datacenters/

        :param str resource_name: The name of the resource.
        :param SKSNodePoolArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SKSNodePoolArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 anti_affinity_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 deploy_target_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 disk_size: Optional[pulumi.Input[int]] = None,
                 instance_prefix: Optional[pulumi.Input[str]] = None,
                 instance_type: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 private_network_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 size: Optional[pulumi.Input[int]] = None,
                 taints: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 zone: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SKSNodePoolArgs.__new__(SKSNodePoolArgs)

            __props__.__dict__["anti_affinity_group_ids"] = anti_affinity_group_ids
            if cluster_id is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_id'")
            __props__.__dict__["cluster_id"] = cluster_id
            __props__.__dict__["deploy_target_id"] = deploy_target_id
            __props__.__dict__["description"] = description
            __props__.__dict__["disk_size"] = disk_size
            __props__.__dict__["instance_prefix"] = instance_prefix
            if instance_type is None and not opts.urn:
                raise TypeError("Missing required property 'instance_type'")
            __props__.__dict__["instance_type"] = instance_type
            __props__.__dict__["labels"] = labels
            __props__.__dict__["name"] = name
            __props__.__dict__["private_network_ids"] = private_network_ids
            __props__.__dict__["security_group_ids"] = security_group_ids
            if size is None and not opts.urn:
                raise TypeError("Missing required property 'size'")
            __props__.__dict__["size"] = size
            __props__.__dict__["taints"] = taints
            if zone is None and not opts.urn:
                raise TypeError("Missing required property 'zone'")
            __props__.__dict__["zone"] = zone
            __props__.__dict__["created_at"] = None
            __props__.__dict__["instance_pool_id"] = None
            __props__.__dict__["state"] = None
            __props__.__dict__["template_id"] = None
            __props__.__dict__["version"] = None
        super(SKSNodePool, __self__).__init__(
            'exoscale:index/sKSNodePool:SKSNodePool',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            anti_affinity_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            cluster_id: Optional[pulumi.Input[str]] = None,
            created_at: Optional[pulumi.Input[str]] = None,
            deploy_target_id: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            disk_size: Optional[pulumi.Input[int]] = None,
            instance_pool_id: Optional[pulumi.Input[str]] = None,
            instance_prefix: Optional[pulumi.Input[str]] = None,
            instance_type: Optional[pulumi.Input[str]] = None,
            labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            private_network_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            size: Optional[pulumi.Input[int]] = None,
            state: Optional[pulumi.Input[str]] = None,
            taints: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            template_id: Optional[pulumi.Input[str]] = None,
            version: Optional[pulumi.Input[str]] = None,
            zone: Optional[pulumi.Input[str]] = None) -> 'SKSNodePool':
        """
        Get an existing SKSNodePool resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] anti_affinity_group_ids: The list of Anti-Affinity Groups (IDs) the Compute instances managed by the SKS Nodepool are member of.
        :param pulumi.Input[str] cluster_id: The ID of the parent SKS cluster.
        :param pulumi.Input[str] created_at: The creation date of the SKS Nodepool.
        :param pulumi.Input[str] deploy_target_id: A Deploy Target ID to deploy managed Compute instances to.
        :param pulumi.Input[str] description: The description of the SKS Nodepool.
        :param pulumi.Input[int] disk_size: The disk size of the Compute instances managed by the SKS Nodepool (default: `50`).
        :param pulumi.Input[str] instance_pool_id: The ID of the Instance Pool managed by the SKS Nodepool.
        :param pulumi.Input[str] instance_prefix: The string to add as prefix to managed Compute instances name (default `pool`).
        :param pulumi.Input[str] instance_type: The [type][type] of Compute instances managed by the SKS Nodepool (format: `FAMILY.SIZE`, e.g. `standard.medium`, `memory.huge`).
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: A map of key/value labels.
        :param pulumi.Input[str] name: The name of the SKS Nodepool.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] private_network_ids: The list of Private Networks (IDs) to be attached to the Compute instances managed by the SKS Nodepool.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_ids: The list of Security Groups (IDs) the Compute instances managed by the SKS Nodepool are member of.
        :param pulumi.Input[int] size: The number of Compute instances the SKS Nodepool manages.
        :param pulumi.Input[str] state: The current state of the SKS Nodepool.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] taints: A map of key/value [Kubernetes taints][k8s-taints] (value format: `VALUE:EFFECT`).
        :param pulumi.Input[str] template_id: The ID of the Compute instance template used by the SKS Nodepool members.
        :param pulumi.Input[str] version: The Kubernetes version of the SKS Nodepool members.
        :param pulumi.Input[str] zone: The name of the [zone][zone] to deploy the SKS Nodepool into.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SKSNodePoolState.__new__(_SKSNodePoolState)

        __props__.__dict__["anti_affinity_group_ids"] = anti_affinity_group_ids
        __props__.__dict__["cluster_id"] = cluster_id
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["deploy_target_id"] = deploy_target_id
        __props__.__dict__["description"] = description
        __props__.__dict__["disk_size"] = disk_size
        __props__.__dict__["instance_pool_id"] = instance_pool_id
        __props__.__dict__["instance_prefix"] = instance_prefix
        __props__.__dict__["instance_type"] = instance_type
        __props__.__dict__["labels"] = labels
        __props__.__dict__["name"] = name
        __props__.__dict__["private_network_ids"] = private_network_ids
        __props__.__dict__["security_group_ids"] = security_group_ids
        __props__.__dict__["size"] = size
        __props__.__dict__["state"] = state
        __props__.__dict__["taints"] = taints
        __props__.__dict__["template_id"] = template_id
        __props__.__dict__["version"] = version
        __props__.__dict__["zone"] = zone
        return SKSNodePool(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="antiAffinityGroupIds")
    def anti_affinity_group_ids(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        The list of Anti-Affinity Groups (IDs) the Compute instances managed by the SKS Nodepool are member of.
        """
        return pulumi.get(self, "anti_affinity_group_ids")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Output[str]:
        """
        The ID of the parent SKS cluster.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[str]:
        """
        The creation date of the SKS Nodepool.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="deployTargetId")
    def deploy_target_id(self) -> pulumi.Output[Optional[str]]:
        """
        A Deploy Target ID to deploy managed Compute instances to.
        """
        return pulumi.get(self, "deploy_target_id")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        The description of the SKS Nodepool.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> pulumi.Output[Optional[int]]:
        """
        The disk size of the Compute instances managed by the SKS Nodepool (default: `50`).
        """
        return pulumi.get(self, "disk_size")

    @property
    @pulumi.getter(name="instancePoolId")
    def instance_pool_id(self) -> pulumi.Output[str]:
        """
        The ID of the Instance Pool managed by the SKS Nodepool.
        """
        return pulumi.get(self, "instance_pool_id")

    @property
    @pulumi.getter(name="instancePrefix")
    def instance_prefix(self) -> pulumi.Output[Optional[str]]:
        """
        The string to add as prefix to managed Compute instances name (default `pool`).
        """
        return pulumi.get(self, "instance_prefix")

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Output[str]:
        """
        The [type][type] of Compute instances managed by the SKS Nodepool (format: `FAMILY.SIZE`, e.g. `standard.medium`, `memory.huge`).
        """
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter
    def labels(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        A map of key/value labels.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the SKS Nodepool.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="privateNetworkIds")
    def private_network_ids(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        The list of Private Networks (IDs) to be attached to the Compute instances managed by the SKS Nodepool.
        """
        return pulumi.get(self, "private_network_ids")

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        The list of Security Groups (IDs) the Compute instances managed by the SKS Nodepool are member of.
        """
        return pulumi.get(self, "security_group_ids")

    @property
    @pulumi.getter
    def size(self) -> pulumi.Output[int]:
        """
        The number of Compute instances the SKS Nodepool manages.
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[str]:
        """
        The current state of the SKS Nodepool.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def taints(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        A map of key/value [Kubernetes taints][k8s-taints] (value format: `VALUE:EFFECT`).
        """
        return pulumi.get(self, "taints")

    @property
    @pulumi.getter(name="templateId")
    def template_id(self) -> pulumi.Output[str]:
        """
        The ID of the Compute instance template used by the SKS Nodepool members.
        """
        return pulumi.get(self, "template_id")

    @property
    @pulumi.getter
    def version(self) -> pulumi.Output[str]:
        """
        The Kubernetes version of the SKS Nodepool members.
        """
        return pulumi.get(self, "version")

    @property
    @pulumi.getter
    def zone(self) -> pulumi.Output[str]:
        """
        The name of the [zone][zone] to deploy the SKS Nodepool into.
        """
        return pulumi.get(self, "zone")

