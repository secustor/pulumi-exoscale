# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetDomainRecordResult',
    'AwaitableGetDomainRecordResult',
    'get_domain_record',
    'get_domain_record_output',
]

@pulumi.output_type
class GetDomainRecordResult:
    """
    A collection of values returned by getDomainRecord.
    """
    def __init__(__self__, domain=None, filter=None, id=None, records=None):
        if domain and not isinstance(domain, str):
            raise TypeError("Expected argument 'domain' to be a str")
        pulumi.set(__self__, "domain", domain)
        if filter and not isinstance(filter, dict):
            raise TypeError("Expected argument 'filter' to be a dict")
        pulumi.set(__self__, "filter", filter)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if records and not isinstance(records, list):
            raise TypeError("Expected argument 'records' to be a list")
        pulumi.set(__self__, "records", records)

    @property
    @pulumi.getter
    def domain(self) -> str:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def filter(self) -> 'outputs.GetDomainRecordFilterResult':
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def records(self) -> Sequence['outputs.GetDomainRecordRecordResult']:
        return pulumi.get(self, "records")


class AwaitableGetDomainRecordResult(GetDomainRecordResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDomainRecordResult(
            domain=self.domain,
            filter=self.filter,
            id=self.id,
            records=self.records)


def get_domain_record(domain: Optional[str] = None,
                      filter: Optional[pulumi.InputType['GetDomainRecordFilterArgs']] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDomainRecordResult:
    """
    Provides information on [domain records][r-domain_record] hosted on [Exoscale DNS][exo-dns].

    ## Example Usage

    The example below matches all domain records that match with name `mailserver` and Record type `MX`.

    ```python
    import pulumi
    import pulumi_exoscale as exoscale

    mycompany = exoscale.get_domain(name=my_company["com"])
    mycompany_mailservers = exoscale.get_domain_record(domain=mycompany.name,
        filter=exoscale.GetDomainRecordFilterArgs(
            name="mailserver",
            recorde_type="MX",
        ))
    mycompany_nameservers = exoscale.get_domain_record(domain=mycompany.name,
        filter=exoscale.GetDomainRecordFilterArgs(
            content_regex="ns.*",
        ))
    pulumi.export("firstDomainRecordName", mycompany_mailservers.records[0].name)
    pulumi.export("firstDomainRecordContent", mycompany_nameservers.records[0].content)
    ```


    :param str domain: The name of the [domain][r-domain] where to look for domain records.
    :param pulumi.InputType['GetDomainRecordFilterArgs'] filter: Filter to apply when looking up domain records.
    """
    __args__ = dict()
    __args__['domain'] = domain
    __args__['filter'] = filter
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('exoscale:index/getDomainRecord:getDomainRecord', __args__, opts=opts, typ=GetDomainRecordResult).value

    return AwaitableGetDomainRecordResult(
        domain=__ret__.domain,
        filter=__ret__.filter,
        id=__ret__.id,
        records=__ret__.records)


@_utilities.lift_output_func(get_domain_record)
def get_domain_record_output(domain: Optional[pulumi.Input[str]] = None,
                             filter: Optional[pulumi.Input[pulumi.InputType['GetDomainRecordFilterArgs']]] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetDomainRecordResult]:
    """
    Provides information on [domain records][r-domain_record] hosted on [Exoscale DNS][exo-dns].

    ## Example Usage

    The example below matches all domain records that match with name `mailserver` and Record type `MX`.

    ```python
    import pulumi
    import pulumi_exoscale as exoscale

    mycompany = exoscale.get_domain(name=my_company["com"])
    mycompany_mailservers = exoscale.get_domain_record(domain=mycompany.name,
        filter=exoscale.GetDomainRecordFilterArgs(
            name="mailserver",
            recorde_type="MX",
        ))
    mycompany_nameservers = exoscale.get_domain_record(domain=mycompany.name,
        filter=exoscale.GetDomainRecordFilterArgs(
            content_regex="ns.*",
        ))
    pulumi.export("firstDomainRecordName", mycompany_mailservers.records[0].name)
    pulumi.export("firstDomainRecordContent", mycompany_nameservers.records[0].content)
    ```


    :param str domain: The name of the [domain][r-domain] where to look for domain records.
    :param pulumi.InputType['GetDomainRecordFilterArgs'] filter: Filter to apply when looking up domain records.
    """
    ...
