# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetNLBResult',
    'AwaitableGetNLBResult',
    'get_nlb',
    'get_nlb_output',
]

@pulumi.output_type
class GetNLBResult:
    """
    A collection of values returned by getNLB.
    """
    def __init__(__self__, created_at=None, description=None, id=None, ip_address=None, name=None, state=None, zone=None):
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ip_address and not isinstance(ip_address, str):
            raise TypeError("Expected argument 'ip_address' to be a str")
        pulumi.set(__self__, "ip_address", ip_address)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if zone and not isinstance(zone, str):
            raise TypeError("Expected argument 'zone' to be a str")
        pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        """
        The creation date of the NLB.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the NLB.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> str:
        """
        The public IP address of the NLB.
        """
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The current state of the NLB.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def zone(self) -> str:
        return pulumi.get(self, "zone")


class AwaitableGetNLBResult(GetNLBResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNLBResult(
            created_at=self.created_at,
            description=self.description,
            id=self.id,
            ip_address=self.ip_address,
            name=self.name,
            state=self.state,
            zone=self.zone)


def get_nlb(id: Optional[str] = None,
            name: Optional[str] = None,
            zone: Optional[str] = None,
            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNLBResult:
    """
    Provides information on a [Network Load Balancer][nlb-doc] (NLB) instance for use in other resources such as a [`NLBService`][r-nlb_service] resource.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_exoscale as exoscale

    prod = exoscale.get_nlb(zone="ch-gva-2",
        name="prod")
    pulumi.export("nlbProdIpAddress", prod.ip_address)
    ```


    :param str id: The ID of the NLB (conflicts with `name`).
    :param str name: The name of NLB (conflicts with `id`).
    :param str zone: The [zone][zone] of the NLB.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    __args__['zone'] = zone
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('exoscale:index/getNLB:getNLB', __args__, opts=opts, typ=GetNLBResult).value

    return AwaitableGetNLBResult(
        created_at=__ret__.created_at,
        description=__ret__.description,
        id=__ret__.id,
        ip_address=__ret__.ip_address,
        name=__ret__.name,
        state=__ret__.state,
        zone=__ret__.zone)


@_utilities.lift_output_func(get_nlb)
def get_nlb_output(id: Optional[pulumi.Input[Optional[str]]] = None,
                   name: Optional[pulumi.Input[Optional[str]]] = None,
                   zone: Optional[pulumi.Input[str]] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetNLBResult]:
    """
    Provides information on a [Network Load Balancer][nlb-doc] (NLB) instance for use in other resources such as a [`NLBService`][r-nlb_service] resource.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_exoscale as exoscale

    prod = exoscale.get_nlb(zone="ch-gva-2",
        name="prod")
    pulumi.export("nlbProdIpAddress", prod.ip_address)
    ```


    :param str id: The ID of the NLB (conflicts with `name`).
    :param str name: The name of NLB (conflicts with `id`).
    :param str zone: The [zone][zone] of the NLB.
    """
    ...
