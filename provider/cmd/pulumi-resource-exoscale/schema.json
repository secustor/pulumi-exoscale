{
    "name": "exoscale",
    "displayName": "Exoscale",
    "description": "A Pulumi package for creating and managing exoscale cloud resources.",
    "keywords": [
        "pulumi",
        "exoscale",
        "category/cloud"
    ],
    "homepage": "https://www.pulumi.com",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`exoscale` Terraform Provider](https://github.com/exoscale/terraform-provider-exoscale).",
    "repository": "https://github.com/secustor/pulumi-exoscale",
    "publisher": "secustor",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "config": {
        "variables": {
            "computeEndpoint": {
                "type": "string",
                "description": "Exoscale CloudStack API endpoint (by default: https://api.exoscale.com/v1)\n"
            },
            "config": {
                "type": "string",
                "description": "CloudStack ini configuration filename (by default: cloudstack.ini)\n"
            },
            "delay": {
                "type": "integer",
                "deprecationMessage": "Does nothing"
            },
            "dnsEndpoint": {
                "type": "string",
                "description": "Exoscale DNS API endpoint (by default: https://api.exoscale.com/dns)\n"
            },
            "environment": {
                "type": "string"
            },
            "gzipUserData": {
                "type": "boolean",
                "description": "Defines if the user-data of compute instances should be gzipped (by default: true)\n"
            },
            "key": {
                "type": "string",
                "description": "Exoscale API key\n"
            },
            "profile": {
                "type": "string",
                "deprecationMessage": "Use region instead"
            },
            "region": {
                "type": "string",
                "description": "CloudStack ini configuration section name (by default: cloudstack)\n"
            },
            "secret": {
                "type": "string",
                "description": "Exoscale API secret\n"
            },
            "timeout": {
                "type": "number",
                "description": "Timeout in seconds for waiting on compute resources to become available (by default: 300)\n"
            },
            "token": {
                "type": "string",
                "deprecationMessage": "Use key instead"
            }
        },
        "defaults": [
            "dnsEndpoint",
            "timeout"
        ]
    },
    "types": {
        "exoscale:index/DatabaseKafka:DatabaseKafka": {
            "properties": {
                "enableCertAuth": {
                    "type": "boolean",
                    "description": "Enable certificate-based authentication method.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enableKafkaConnect": {
                    "type": "boolean",
                    "description": "Enable Kafka Connect.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enableKafkaRest": {
                    "type": "boolean",
                    "description": "Enable Kafka REST.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enableSaslAuth": {
                    "type": "boolean",
                    "description": "Enable SASL-based authentication method.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enableSchemaRegistry": {
                    "type": "boolean",
                    "description": "Enable Schema Registry.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipFilters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of CIDR blocks to allow incoming connections from.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kafkaConnectSettings": {
                    "type": "string",
                    "description": "Kafka Connect configuration settings in JSON format (`exo dbaas type show kafka --settings=kafka-connect` for reference).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kafkaRestSettings": {
                    "type": "string",
                    "description": "Kafka REST configuration settings in JSON format (`exo dbaas type show kafka --settings=kafka-rest` for reference).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kafkaSettings": {
                    "type": "string",
                    "description": "Kafka configuration settings in JSON format (`exo dbaas type show kafka --settings=kafka` for reference).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "schemaRegistrySettings": {
                    "type": "string",
                    "description": "Schema Registry configuration settings in JSON format (`exo dbaas type show kafka --settings=schema-registry` for reference)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "version": {
                    "type": "string",
                    "description": "PostgreSQL major version (`exo dbaas type show pg` for reference). Can only be set during creation.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enableCertAuth",
                        "enableSaslAuth",
                        "ipFilters",
                        "kafkaConnectSettings",
                        "kafkaRestSettings",
                        "kafkaSettings",
                        "schemaRegistrySettings",
                        "version"
                    ]
                }
            }
        },
        "exoscale:index/DatabaseMysql:DatabaseMysql": {
            "properties": {
                "adminPassword": {
                    "type": "string",
                    "description": "A custom administrator account password. Can only be set during creation.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "adminUsername": {
                    "type": "string",
                    "description": "A custom administrator account username. Can only be set during creation.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "backupSchedule": {
                    "type": "string",
                    "description": "The automated backup schedule (format: HH:MM).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipFilters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of CIDR blocks to allow incoming connections from.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mysqlSettings": {
                    "type": "string",
                    "description": "MySQL configuration settings in JSON format (`exo dbaas type show mysql --settings=mysql` for reference).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "version": {
                    "type": "string",
                    "description": "PostgreSQL major version (`exo dbaas type show pg` for reference). Can only be set during creation.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "adminPassword",
                        "adminUsername",
                        "backupSchedule",
                        "ipFilters",
                        "mysqlSettings",
                        "version"
                    ]
                }
            }
        },
        "exoscale:index/DatabasePg:DatabasePg": {
            "properties": {
                "adminPassword": {
                    "type": "string",
                    "description": "A custom administrator account password. Can only be set during creation.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "adminUsername": {
                    "type": "string",
                    "description": "A custom administrator account username. Can only be set during creation.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "backupSchedule": {
                    "type": "string",
                    "description": "The automated backup schedule (format: HH:MM).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipFilters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of CIDR blocks to allow incoming connections from.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pgSettings": {
                    "type": "string",
                    "description": "PostgreSQL configuration settings in JSON format (`exo dbaas type show pg --settings=pg` for reference).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pgbouncerSettings": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pglookoutSettings": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "version": {
                    "type": "string",
                    "description": "PostgreSQL major version (`exo dbaas type show pg` for reference). Can only be set during creation.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "adminPassword",
                        "adminUsername",
                        "backupSchedule",
                        "ipFilters",
                        "pgSettings",
                        "pgbouncerSettings",
                        "pglookoutSettings",
                        "version"
                    ]
                }
            }
        },
        "exoscale:index/DatabaseRedis:DatabaseRedis": {
            "properties": {
                "ipFilters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of CIDR blocks to allow incoming connections from.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "redisSettings": {
                    "type": "string",
                    "description": "Redis configuration settings in JSON format (`exo dbaas type show redis --settings=redis` for reference).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "ipFilters",
                        "redisSettings"
                    ]
                }
            }
        },
        "exoscale:index/ElasticIPHealthcheck:ElasticIPHealthcheck": {
            "properties": {
                "interval": {
                    "type": "integer",
                    "description": "The health checking interval in seconds (must be between `5` and `300`; default: `10`).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mode": {
                    "type": "string",
                    "description": "The health checking mode (`supported values: `tcp`, `http`, `https`).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "integer",
                    "description": "The health checking port (must be between `1` and `65535`).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "strikesFail": {
                    "type": "integer",
                    "description": "The number of failed attempts before considering a managed Elastic IP target unhealthy (must be between `1` and `20`).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "strikesOk": {
                    "type": "integer",
                    "description": "The number of successful attempts before considering a managed Elastic IP target healthy (must be between `1` and `20`).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timeout": {
                    "type": "integer",
                    "description": "The time in seconds before considering a healthcheck probing failed (must be between `2` and `60`; default: `3`).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tlsSkipVerify": {
                    "type": "boolean",
                    "description": "Disable TLS certificate verification for health checking in `https` mode.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tlsSni": {
                    "type": "string",
                    "description": "The health checking server name to present with SNI in `https` mode.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uri": {
                    "type": "string",
                    "description": "The health checking URI (required in `http(s)` modes).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "mode",
                "port"
            ]
        },
        "exoscale:index/NLBServiceHealthcheck:NLBServiceHealthcheck": {
            "properties": {
                "interval": {
                    "type": "integer",
                    "description": "The healthcheck interval in seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mode": {
                    "type": "string",
                    "description": "The healthcheck mode (`tcp`|`http`|`https`).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "integer",
                    "description": "The healthcheck port.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "retries": {
                    "type": "integer",
                    "description": "The healthcheck retries.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timeout": {
                    "type": "integer",
                    "description": "The healthcheck timeout in seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tlsSni": {
                    "type": "string",
                    "description": "The healthcheck TLS SNI server name, only if `mode` is `https`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uri": {
                    "type": "string",
                    "description": "The healthcheck URI, must be set only if `mode` is `http(s)`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "port"
            ]
        },
        "exoscale:index/SKSClusterOidc:SKSClusterOidc": {
            "properties": {
                "clientId": {
                    "type": "string",
                    "description": "The OpenID client ID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "groupsClaim": {
                    "type": "string",
                    "description": "An OpenID JWT claim to use as the user's group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "groupsPrefix": {
                    "type": "string",
                    "description": "An OpenID prefix prepended to group claims.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "issuerUrl": {
                    "type": "string",
                    "description": "The OpenID provider URL.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "requiredClaim": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of key/value pairs that describes a required claim in the OpenID Token.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "usernameClaim": {
                    "type": "string",
                    "description": "An OpenID JWT claim to use as the user name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "usernamePrefix": {
                    "type": "string",
                    "description": "An OpenID prefix prepended to username claims.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "clientId",
                "issuerUrl"
            ]
        },
        "exoscale:index/SecurityGroupRulesEgress:SecurityGroupRulesEgress": {
            "properties": {
                "cidrLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of source (for ingress)/destination (for egress) IP subnet (in [CIDR notation][cidr]) to match.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "A free-form text describing the Security Group rule purpose.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "icmpCode": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "icmpType": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ports": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of ports or port ranges (`start_port-end_port`).\n* `icmp_type`/`icmp_code` - An ICMP/ICMPv6 [type/code][icmp] to match.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocol": {
                    "type": "string",
                    "description": "The network protocol to match. Supported values are: `TCP`, `UDP`, `ICMP`, `ICMPv6`, `AH`, `ESP`, `GRE`, `IPIP` and `ALL`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userSecurityGroupLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A source (for ingress)/destination (for egress) of the traffic identified by a Security Group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "ids"
                    ]
                }
            }
        },
        "exoscale:index/SecurityGroupRulesIngress:SecurityGroupRulesIngress": {
            "properties": {
                "cidrLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of source (for ingress)/destination (for egress) IP subnet (in [CIDR notation][cidr]) to match.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "A free-form text describing the Security Group rule purpose.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "icmpCode": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "icmpType": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ports": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of ports or port ranges (`start_port-end_port`).\n* `icmp_type`/`icmp_code` - An ICMP/ICMPv6 [type/code][icmp] to match.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocol": {
                    "type": "string",
                    "description": "The network protocol to match. Supported values are: `TCP`, `UDP`, `ICMP`, `ICMPv6`, `AH`, `ESP`, `GRE`, `IPIP` and `ALL`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userSecurityGroupLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A source (for ingress)/destination (for egress) of the traffic identified by a Security Group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "ids"
                    ]
                }
            }
        },
        "exoscale:index/getDomainRecordFilter:getDomainRecordFilter": {
            "properties": {
                "contentRegex": {
                    "type": "string",
                    "description": "A regular expression matching the domain record content to lookup.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "The ID matching the domain record ID to lookup.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name matching the domain record name to lookup.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "recordType": {
                    "type": "string",
                    "description": "The record type matching the domain record type to lookup.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "exoscale:index/getDomainRecordRecord:getDomainRecordRecord": {
            "properties": {
                "content": {
                    "type": "string",
                    "description": "The content of the domain record.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "domain": {
                    "type": "string",
                    "description": "The name of the [domain][r-domain] where to look for domain records.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "The ID matching the domain record ID to lookup.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name matching the domain record name to lookup.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "prio": {
                    "type": "integer",
                    "description": "The priority of the domain record.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "recordType": {
                    "type": "string",
                    "description": "The record type matching the domain record type to lookup.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "exoscale:index/getElasticIPHealthcheck:getElasticIPHealthcheck": {
            "properties": {
                "interval": {
                    "type": "integer",
                    "description": "The health checking interval in seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mode": {
                    "type": "string",
                    "description": "(Required) The health checking mode.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "integer",
                    "description": "(Required) The health checking port.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "strikesFail": {
                    "type": "integer",
                    "description": "The number of failed attempts before considering a managed Elastic IP target unhealthy.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "strikesOk": {
                    "type": "integer",
                    "description": "The number of successful attempts before considering a managed Elastic IP target healthy.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timeout": {
                    "type": "integer",
                    "description": "The time in seconds before considering a healthcheck probing failed.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tlsSkipVerify": {
                    "type": "boolean",
                    "description": "Disable TLS certificate verification for health checking in `https` mode.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tlsSni": {
                    "type": "string",
                    "description": "The health checking server name to present with SNI in `https` mode.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uri": {
                    "type": "string",
                    "description": "The health checking URI.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "interval",
                "mode",
                "port",
                "strikesFail",
                "strikesOk",
                "timeout",
                "tlsSkipVerify",
                "tlsSni",
                "uri"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        }
    },
    "provider": {
        "description": "The provider type for the exoscale package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "computeEndpoint": {
                "type": "string",
                "description": "Exoscale CloudStack API endpoint (by default: https://api.exoscale.com/v1)\n"
            },
            "config": {
                "type": "string",
                "description": "CloudStack ini configuration filename (by default: cloudstack.ini)\n"
            },
            "delay": {
                "type": "integer",
                "deprecationMessage": "Does nothing"
            },
            "dnsEndpoint": {
                "type": "string",
                "description": "Exoscale DNS API endpoint (by default: https://api.exoscale.com/dns)\n"
            },
            "environment": {
                "type": "string"
            },
            "gzipUserData": {
                "type": "boolean",
                "description": "Defines if the user-data of compute instances should be gzipped (by default: true)\n"
            },
            "key": {
                "type": "string",
                "description": "Exoscale API key\n"
            },
            "profile": {
                "type": "string",
                "deprecationMessage": "Use region instead"
            },
            "region": {
                "type": "string",
                "description": "CloudStack ini configuration section name (by default: cloudstack)\n"
            },
            "secret": {
                "type": "string",
                "description": "Exoscale API secret\n"
            },
            "timeout": {
                "type": "number",
                "description": "Timeout in seconds for waiting on compute resources to become available (by default: 300)\n"
            },
            "token": {
                "type": "string",
                "deprecationMessage": "Use key instead"
            }
        },
        "required": [
            "dnsEndpoint",
            "timeout"
        ],
        "inputProperties": {
            "computeEndpoint": {
                "type": "string",
                "description": "Exoscale CloudStack API endpoint (by default: https://api.exoscale.com/v1)\n"
            },
            "config": {
                "type": "string",
                "description": "CloudStack ini configuration filename (by default: cloudstack.ini)\n"
            },
            "delay": {
                "type": "integer",
                "deprecationMessage": "Does nothing"
            },
            "dnsEndpoint": {
                "type": "string",
                "description": "Exoscale DNS API endpoint (by default: https://api.exoscale.com/dns)\n"
            },
            "environment": {
                "type": "string"
            },
            "gzipUserData": {
                "type": "boolean",
                "description": "Defines if the user-data of compute instances should be gzipped (by default: true)\n"
            },
            "key": {
                "type": "string",
                "description": "Exoscale API key\n"
            },
            "profile": {
                "type": "string",
                "deprecationMessage": "Use region instead"
            },
            "region": {
                "type": "string",
                "description": "CloudStack ini configuration section name (by default: cloudstack)\n"
            },
            "secret": {
                "type": "string",
                "description": "Exoscale API secret\n"
            },
            "timeout": {
                "type": "number",
                "description": "Timeout in seconds for waiting on compute resources to become available (by default: 300)\n"
            },
            "token": {
                "type": "string",
                "deprecationMessage": "Use key instead"
            }
        },
        "requiredInputs": [
            "dnsEndpoint",
            "timeout"
        ]
    },
    "resources": {
        "exoscale:index/affinity:Affinity": {
            "description": "Provides an Exoscale [Anti-Affinity Group][aag-doc] resource. This can be used to create and delete Anti-Affinity Groups.\n\n!\u003e **WARNING:** This resource is deprecated and will be removed in the next major version.\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as exoscale from \"@pulumi/exoscale\";\n\nconst cluster = new exoscale.Affinity(\"cluster\", {\n    description: \"HA Cluster\",\n    type: \"host anti-affinity\",\n});\n```\n```python\nimport pulumi\nimport pulumi_exoscale as exoscale\n\ncluster = exoscale.Affinity(\"cluster\",\n    description=\"HA Cluster\",\n    type=\"host anti-affinity\")\n```\n```csharp\nusing Pulumi;\nusing Exoscale = Pulumi.Exoscale;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var cluster = new Exoscale.Affinity(\"cluster\", new Exoscale.AffinityArgs\n        {\n            Description = \"HA Cluster\",\n            Type = \"host anti-affinity\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-exoscale/sdk/go/exoscale\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := exoscale.NewAffinity(ctx, \"cluster\", \u0026exoscale.AffinityArgs{\n\t\t\tDescription: pulumi.String(\"HA Cluster\"),\n\t\t\tType:        pulumi.String(\"host anti-affinity\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nAn existing Anti-Affinity Group can be imported as a resource by name or IDconsole # By name\n\n```sh\n $ pulumi import exoscale:index/affinity:Affinity mygroup mygroup\n```\n\n # By ID\n\n```sh\n $ pulumi import exoscale:index/affinity:Affinity mygroup eb556678-ec59-4be6-8c54-0406ae0f6da6\n```\n\n [aag-doc]https://community.exoscale.com/documentation/compute/anti-affinity-groups/ ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "A free-form text describing the Anti-Affinity Group purpose.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Anti-Affinity Group.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the Anti-Affinity Group (`host anti-affinity` is the only supported value).\n"
                },
                "virtualMachineIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The IDs of the Compute instance resources member of the Anti-Affinity Group.\n"
                }
            },
            "required": [
                "name",
                "virtualMachineIds"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "A free-form text describing the Anti-Affinity Group purpose.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Anti-Affinity Group.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the Anti-Affinity Group (`host anti-affinity` is the only supported value).\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Affinity resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "A free-form text describing the Anti-Affinity Group purpose.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Anti-Affinity Group.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the Anti-Affinity Group (`host anti-affinity` is the only supported value).\n"
                    },
                    "virtualMachineIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The IDs of the Compute instance resources member of the Anti-Affinity Group.\n"
                    }
                },
                "type": "object"
            }
        },
        "exoscale:index/antiAffinityGroup:AntiAffinityGroup": {
            "description": "Provides an Exoscale [Anti-Affinity Group][aag-doc] resource. This can be used to create and delete Anti-Affinity Groups.\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as exoscale from \"@pulumi/exoscale\";\n\nconst example = new exoscale.AntiAffinityGroup(\"example\", {\n    description: \"HA Cluster\",\n});\n```\n```python\nimport pulumi\nimport pulumi_exoscale as exoscale\n\nexample = exoscale.AntiAffinityGroup(\"example\", description=\"HA Cluster\")\n```\n```csharp\nusing Pulumi;\nusing Exoscale = Pulumi.Exoscale;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = new Exoscale.AntiAffinityGroup(\"example\", new Exoscale.AntiAffinityGroupArgs\n        {\n            Description = \"HA Cluster\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-exoscale/sdk/go/exoscale\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := exoscale.NewAntiAffinityGroup(ctx, \"example\", \u0026exoscale.AntiAffinityGroupArgs{\n\t\t\tDescription: pulumi.String(\"HA Cluster\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nAn existing Anti-Affinity Group can be imported as a resource its IDconsole\n\n```sh\n $ pulumi import exoscale:index/antiAffinityGroup:AntiAffinityGroup my-group eb556678-ec59-4be6-8c54-0406ae0f6da6\n```\n\n [aag-doc]https://community.exoscale.com/documentation/compute/anti-affinity-groups/ ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "An Anti-Affinity Group description.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Anti-Affinity Group.\n"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "An Anti-Affinity Group description.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Anti-Affinity Group.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AntiAffinityGroup resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "An Anti-Affinity Group description.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Anti-Affinity Group.\n"
                    }
                },
                "type": "object"
            }
        },
        "exoscale:index/compute:Compute": {
            "description": "Provides an Exoscale [Compute instance][compute-doc] resource. This can be used to create, modify, and delete Compute instances.\n\n!\u003e **WARNING:** This resource is deprecated and will be removed in the next major version.\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as exoscale from \"@pulumi/exoscale\";\n\nconst ubuntu = exoscale.getComputeTemplate({\n    zone: \"ch-gva-2\",\n    name: \"Linux Ubuntu 18.04 LTS 64-bit\",\n});\nconst mymachine = new exoscale.Compute(\"mymachine\", {\n    zone: \"ch-gva-2\",\n    displayName: \"mymachine\",\n    templateId: ubuntu.then(ubuntu =\u003e ubuntu.id),\n    size: \"Medium\",\n    diskSize: 10,\n    keyPair: \"me@mymachine\",\n    state: \"Running\",\n    reverseDns: \"mymachine.com.\",\n    affinityGroups: [],\n    securityGroups: [\"default\"],\n    ip6: false,\n    userData: `#cloud-config\nmanage_etc_hosts: localhost\n`,\n    tags: {\n        production: \"true\",\n    },\n    timeouts: [{\n        create: \"60m\",\n        \"delete\": \"2h\",\n    }],\n});\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nAn existing Compute instance can be imported as a resource by name or IDconsole # By name\n\n```sh\n $ pulumi import exoscale:index/compute:Compute vm1 vm1\n```\n\n # By ID\n\n```sh\n $ pulumi import exoscale:index/compute:Compute vm1 eb556678-ec59-4be6-8c54-0406ae0f6da6\n```\n\n [cloudinit]http://cloudinit.readthedocs.io/en/latest/ [compute-doc]https://community.exoscale.com/documentation/compute/ [d-compute_template]../d/compute_template.html [r-affinity]affinity.html [r-nic]nic.html [r-secondary_ipaddress]secondary_ipaddress.html [r-security_group]security_group.html [remote-exec]https://www.terraform.io/docs/provisioners/remote-exec.html [size]https://www.exoscale.com/pricing/#/compute/ [sshkeypair-doc]https://community.exoscale.com/documentation/compute/ssh-keypairs/ [template]https://www.exoscale.com/templates/ [zone]https://www.exoscale.com/datacenters/ ",
            "properties": {
                "affinityGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of [Anti-Affinity Group][r-affinity] IDs (at creation time only; conflicts with `affinity_groups`).\n"
                },
                "affinityGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of [Anti-Affinity Group][r-affinity] names (at creation time only; conflicts with `affinity_group_ids`).\n"
                },
                "diskSize": {
                    "type": "integer",
                    "description": "The Compute instance root disk size in GiB (at least `10`).\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The displayed name of the Compute instance. Note: if the `hostname` attribute is not set, this attribute is also used to set the OS' *hostname* during creation, so the value must contain only alphanumeric and hyphen (\"-\") characters; it can be changed to any character during a later update. If neither `display_name` or `hostname` attributes are set, a random value will be generated automatically server-side.\n"
                },
                "gateway": {
                    "type": "string"
                },
                "hostname": {
                    "type": "string",
                    "description": "The Compute instance hostname, must contain only alphanumeric and hyphen (\"-\") characters. If neither `display_name` or `hostname` attributes are set, a random value will be generated automatically server-side. Note: updating this attribute's value requires to reboot the instance.\n"
                },
                "ip4": {
                    "type": "boolean",
                    "description": "Boolean controlling if IPv4 is enabled (only supported value is `true`).\n"
                },
                "ip6": {
                    "type": "boolean",
                    "description": "Boolean controlling if IPv6 is enabled.\n"
                },
                "ip6Address": {
                    "type": "string",
                    "description": "The IPv6 address of the Compute instance main network interface.\n"
                },
                "ip6Cidr": {
                    "type": "string"
                },
                "ipAddress": {
                    "type": "string",
                    "description": "The IP address of the Compute instance main network interface.\n"
                },
                "keyPair": {
                    "type": "string",
                    "description": "The name of the [SSH key pair][sshkeypair-doc] to be installed.\n"
                },
                "keyboard": {
                    "type": "string",
                    "description": "The keyboard layout configuration (at creation time only). Supported values are: `de`, `de-ch`, `es`, `fi`, `fr`, `fr-be`, `fr-ch`, `is`, `it`, `jp`, `nl-be`, `no`, `pt`, `uk`, `us`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "**Deprecated** The Compute instance *hostname*. Use the `hostname` attribute instead.\n",
                    "deprecationMessage": "use `hostname` attribute instead"
                },
                "password": {
                    "type": "string",
                    "description": "The initial Compute instance password and/or encrypted password.\n"
                },
                "reverseDns": {
                    "type": "string",
                    "description": "The reverse DNS record of the Compute instance (must end with a `.`, e.g: `my-server.example.net.`).\n"
                },
                "securityGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of [Security Group][r-security_group] IDs (conflicts with `security_groups`).\n"
                },
                "securityGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of [Security Group][r-security_group] names (conflicts with `security_group_ids`).\n"
                },
                "size": {
                    "type": "string",
                    "description": "The Compute instance [size][size], e.g. `Tiny`, `Small`, `Medium`, `Large` etc.\n"
                },
                "state": {
                    "type": "string",
                    "description": "The state of the Compute instance, e.g. `Running` or `Stopped`\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A dictionary of tags (key/value). To remove all tags, set `tags = {}`.\n"
                },
                "template": {
                    "type": "string",
                    "description": "The name of the Compute instance [template][template]. Only *featured* templates are available, if you want to reference *custom templates* use the `template_id` attribute instead.\n"
                },
                "templateId": {
                    "type": "string",
                    "description": "The ID of the Compute instance [template][template]. Usage of the [`compute_template`][d-compute_template] data source is recommended.\n"
                },
                "userData": {
                    "type": "string",
                    "description": "A [cloud-init][cloudinit] configuration. Whenever possible don't base64-encode neither gzip it yourself, as this will be automatically taken care of on your behalf by the provider.\n"
                },
                "userDataBase64": {
                    "type": "boolean",
                    "description": "was the cloud-init configuration base64 encoded\n"
                },
                "username": {
                    "type": "string",
                    "description": "The user to use to connect to the Compute instance with SSH. If you've referenced a *custom template* in the resource, use the [`compute_template`][d-compute_template] data source `username` attribute instead.\n",
                    "deprecationMessage": "broken, use `compute_template` data source `username` attribute"
                },
                "zone": {
                    "type": "string",
                    "description": "The name of the [zone][zone] to deploy the Compute instance into.\n"
                }
            },
            "required": [
                "affinityGroupIds",
                "affinityGroups",
                "diskSize",
                "displayName",
                "gateway",
                "hostname",
                "ip6Address",
                "ip6Cidr",
                "ipAddress",
                "name",
                "password",
                "securityGroupIds",
                "securityGroups",
                "state",
                "tags",
                "template",
                "templateId",
                "userDataBase64",
                "username",
                "zone"
            ],
            "inputProperties": {
                "affinityGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of [Anti-Affinity Group][r-affinity] IDs (at creation time only; conflicts with `affinity_groups`).\n"
                },
                "affinityGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of [Anti-Affinity Group][r-affinity] names (at creation time only; conflicts with `affinity_group_ids`).\n"
                },
                "diskSize": {
                    "type": "integer",
                    "description": "The Compute instance root disk size in GiB (at least `10`).\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The displayed name of the Compute instance. Note: if the `hostname` attribute is not set, this attribute is also used to set the OS' *hostname* during creation, so the value must contain only alphanumeric and hyphen (\"-\") characters; it can be changed to any character during a later update. If neither `display_name` or `hostname` attributes are set, a random value will be generated automatically server-side.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The Compute instance hostname, must contain only alphanumeric and hyphen (\"-\") characters. If neither `display_name` or `hostname` attributes are set, a random value will be generated automatically server-side. Note: updating this attribute's value requires to reboot the instance.\n"
                },
                "ip4": {
                    "type": "boolean",
                    "description": "Boolean controlling if IPv4 is enabled (only supported value is `true`).\n"
                },
                "ip6": {
                    "type": "boolean",
                    "description": "Boolean controlling if IPv6 is enabled.\n"
                },
                "keyPair": {
                    "type": "string",
                    "description": "The name of the [SSH key pair][sshkeypair-doc] to be installed.\n"
                },
                "keyboard": {
                    "type": "string",
                    "description": "The keyboard layout configuration (at creation time only). Supported values are: `de`, `de-ch`, `es`, `fi`, `fr`, `fr-be`, `fr-ch`, `is`, `it`, `jp`, `nl-be`, `no`, `pt`, `uk`, `us`.\n"
                },
                "reverseDns": {
                    "type": "string",
                    "description": "The reverse DNS record of the Compute instance (must end with a `.`, e.g: `my-server.example.net.`).\n"
                },
                "securityGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of [Security Group][r-security_group] IDs (conflicts with `security_groups`).\n"
                },
                "securityGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of [Security Group][r-security_group] names (conflicts with `security_group_ids`).\n"
                },
                "size": {
                    "type": "string",
                    "description": "The Compute instance [size][size], e.g. `Tiny`, `Small`, `Medium`, `Large` etc.\n"
                },
                "state": {
                    "type": "string",
                    "description": "The state of the Compute instance, e.g. `Running` or `Stopped`\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A dictionary of tags (key/value). To remove all tags, set `tags = {}`.\n"
                },
                "template": {
                    "type": "string",
                    "description": "The name of the Compute instance [template][template]. Only *featured* templates are available, if you want to reference *custom templates* use the `template_id` attribute instead.\n"
                },
                "templateId": {
                    "type": "string",
                    "description": "The ID of the Compute instance [template][template]. Usage of the [`compute_template`][d-compute_template] data source is recommended.\n"
                },
                "userData": {
                    "type": "string",
                    "description": "A [cloud-init][cloudinit] configuration. Whenever possible don't base64-encode neither gzip it yourself, as this will be automatically taken care of on your behalf by the provider.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The name of the [zone][zone] to deploy the Compute instance into.\n"
                }
            },
            "requiredInputs": [
                "diskSize",
                "zone"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Compute resources.\n",
                "properties": {
                    "affinityGroupIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of [Anti-Affinity Group][r-affinity] IDs (at creation time only; conflicts with `affinity_groups`).\n"
                    },
                    "affinityGroups": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of [Anti-Affinity Group][r-affinity] names (at creation time only; conflicts with `affinity_group_ids`).\n"
                    },
                    "diskSize": {
                        "type": "integer",
                        "description": "The Compute instance root disk size in GiB (at least `10`).\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The displayed name of the Compute instance. Note: if the `hostname` attribute is not set, this attribute is also used to set the OS' *hostname* during creation, so the value must contain only alphanumeric and hyphen (\"-\") characters; it can be changed to any character during a later update. If neither `display_name` or `hostname` attributes are set, a random value will be generated automatically server-side.\n"
                    },
                    "gateway": {
                        "type": "string"
                    },
                    "hostname": {
                        "type": "string",
                        "description": "The Compute instance hostname, must contain only alphanumeric and hyphen (\"-\") characters. If neither `display_name` or `hostname` attributes are set, a random value will be generated automatically server-side. Note: updating this attribute's value requires to reboot the instance.\n"
                    },
                    "ip4": {
                        "type": "boolean",
                        "description": "Boolean controlling if IPv4 is enabled (only supported value is `true`).\n"
                    },
                    "ip6": {
                        "type": "boolean",
                        "description": "Boolean controlling if IPv6 is enabled.\n"
                    },
                    "ip6Address": {
                        "type": "string",
                        "description": "The IPv6 address of the Compute instance main network interface.\n"
                    },
                    "ip6Cidr": {
                        "type": "string"
                    },
                    "ipAddress": {
                        "type": "string",
                        "description": "The IP address of the Compute instance main network interface.\n"
                    },
                    "keyPair": {
                        "type": "string",
                        "description": "The name of the [SSH key pair][sshkeypair-doc] to be installed.\n"
                    },
                    "keyboard": {
                        "type": "string",
                        "description": "The keyboard layout configuration (at creation time only). Supported values are: `de`, `de-ch`, `es`, `fi`, `fr`, `fr-be`, `fr-ch`, `is`, `it`, `jp`, `nl-be`, `no`, `pt`, `uk`, `us`.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "**Deprecated** The Compute instance *hostname*. Use the `hostname` attribute instead.\n",
                        "deprecationMessage": "use `hostname` attribute instead"
                    },
                    "password": {
                        "type": "string",
                        "description": "The initial Compute instance password and/or encrypted password.\n"
                    },
                    "reverseDns": {
                        "type": "string",
                        "description": "The reverse DNS record of the Compute instance (must end with a `.`, e.g: `my-server.example.net.`).\n"
                    },
                    "securityGroupIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of [Security Group][r-security_group] IDs (conflicts with `security_groups`).\n"
                    },
                    "securityGroups": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of [Security Group][r-security_group] names (conflicts with `security_group_ids`).\n"
                    },
                    "size": {
                        "type": "string",
                        "description": "The Compute instance [size][size], e.g. `Tiny`, `Small`, `Medium`, `Large` etc.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "The state of the Compute instance, e.g. `Running` or `Stopped`\n"
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A dictionary of tags (key/value). To remove all tags, set `tags = {}`.\n"
                    },
                    "template": {
                        "type": "string",
                        "description": "The name of the Compute instance [template][template]. Only *featured* templates are available, if you want to reference *custom templates* use the `template_id` attribute instead.\n"
                    },
                    "templateId": {
                        "type": "string",
                        "description": "The ID of the Compute instance [template][template]. Usage of the [`compute_template`][d-compute_template] data source is recommended.\n"
                    },
                    "userData": {
                        "type": "string",
                        "description": "A [cloud-init][cloudinit] configuration. Whenever possible don't base64-encode neither gzip it yourself, as this will be automatically taken care of on your behalf by the provider.\n"
                    },
                    "userDataBase64": {
                        "type": "boolean",
                        "description": "was the cloud-init configuration base64 encoded\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "The user to use to connect to the Compute instance with SSH. If you've referenced a *custom template* in the resource, use the [`compute_template`][d-compute_template] data source `username` attribute instead.\n",
                        "deprecationMessage": "broken, use `compute_template` data source `username` attribute"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The name of the [zone][zone] to deploy the Compute instance into.\n"
                    }
                },
                "type": "object"
            }
        },
        "exoscale:index/computeInstance:ComputeInstance": {
            "description": "Provides an Exoscale [Compute instance][compute-doc] resource. This can be used to create, modify, and delete Compute instances.\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as exoscale from \"@pulumi/exoscale\";\n\nconst zone = \"ch-gva-2\";\nconst ubuntu = exoscale.getComputeTemplate({\n    zone: zone,\n    name: \"Linux Ubuntu 20.04 LTS 64-bit\",\n});\nconst web = new exoscale.SecurityGroup(\"web\", {});\nconst default = exoscale.getSecurityGroup({\n    name: \"default\",\n});\nconst example = new exoscale.ComputeInstance(\"example\", {\n    zone: zone,\n    type: \"standard.medium\",\n    templateId: ubuntu.then(ubuntu =\u003e ubuntu.id),\n    diskSize: 10,\n    securityGroupIds: [\n        _default.then(_default =\u003e _default.id),\n        web.id,\n    ],\n    sshKey: \"my-key\",\n    userData: `#cloud-config\nmanage_etc_hosts: localhost\n`,\n});\n```\n```python\nimport pulumi\nimport pulumi_exoscale as exoscale\n\nzone = \"ch-gva-2\"\nubuntu = exoscale.get_compute_template(zone=zone,\n    name=\"Linux Ubuntu 20.04 LTS 64-bit\")\nweb = exoscale.SecurityGroup(\"web\")\ndefault = exoscale.get_security_group(name=\"default\")\nexample = exoscale.ComputeInstance(\"example\",\n    zone=zone,\n    type=\"standard.medium\",\n    template_id=ubuntu.id,\n    disk_size=10,\n    security_group_ids=[\n        default.id,\n        web.id,\n    ],\n    ssh_key=\"my-key\",\n    user_data=\"\"\"#cloud-config\nmanage_etc_hosts: localhost\n\"\"\")\n```\n```csharp\nusing Pulumi;\nusing Exoscale = Pulumi.Exoscale;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var zone = \"ch-gva-2\";\n        var ubuntu = Output.Create(Exoscale.GetComputeTemplate.InvokeAsync(new Exoscale.GetComputeTemplateArgs\n        {\n            Zone = zone,\n            Name = \"Linux Ubuntu 20.04 LTS 64-bit\",\n        }));\n        var web = new Exoscale.SecurityGroup(\"web\", new Exoscale.SecurityGroupArgs\n        {\n        });\n        var @default = Output.Create(Exoscale.GetSecurityGroup.InvokeAsync(new Exoscale.GetSecurityGroupArgs\n        {\n            Name = \"default\",\n        }));\n        var example = new Exoscale.ComputeInstance(\"example\", new Exoscale.ComputeInstanceArgs\n        {\n            Zone = zone,\n            Type = \"standard.medium\",\n            TemplateId = ubuntu.Apply(ubuntu =\u003e ubuntu.Id),\n            DiskSize = 10,\n            SecurityGroupIds = \n            {\n                @default.Apply(@default =\u003e @default.Id),\n                web.Id,\n            },\n            SshKey = \"my-key\",\n            UserData = @\"#cloud-config\nmanage_etc_hosts: localhost\n\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-exoscale/sdk/go/exoscale\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tzone := \"ch-gva-2\"\n\t\topt0 := \"Linux Ubuntu 20.04 LTS 64-bit\"\n\t\tubuntu, err := exoscale.GetComputeTemplate(ctx, \u0026GetComputeTemplateArgs{\n\t\t\tZone: zone,\n\t\t\tName: \u0026opt0,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tweb, err := exoscale.NewSecurityGroup(ctx, \"web\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\topt1 := \"default\"\n\t\t_default, err := exoscale.LookupSecurityGroup(ctx, \u0026GetSecurityGroupArgs{\n\t\t\tName: \u0026opt1,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = exoscale.NewComputeInstance(ctx, \"example\", \u0026exoscale.ComputeInstanceArgs{\n\t\t\tZone:       pulumi.String(zone),\n\t\t\tType:       pulumi.String(\"standard.medium\"),\n\t\t\tTemplateId: pulumi.String(ubuntu.Id),\n\t\t\tDiskSize:   pulumi.Int(10),\n\t\t\tSecurityGroupIds: pulumi.StringArray{\n\t\t\t\tpulumi.String(_default.Id),\n\t\t\t\tweb.ID(),\n\t\t\t},\n\t\t\tSshKey:   pulumi.String(\"my-key\"),\n\t\t\tUserData: pulumi.String(fmt.Sprintf(\"%v%v\", \"#cloud-config\\n\", \"manage_etc_hosts: localhost\\n\")),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nAn existing Compute instance can be imported as a resource by `\u003cID\u003e@\u003cZONE\u003e`console\n\n```sh\n $ pulumi import exoscale:index/computeInstance:ComputeInstance my-instance eb556678-ec59-4be6-8c54-0406ae0f6da6@ch-gva-2\n```\n\n [cloudinit]http://cloudinit.readthedocs.io/en/latest/ [compute-doc]https://community.exoscale.com/documentation/compute/ [d-anti_affinity_group]../d/anti_affinity_group.html [d-compute_template]../d/compute_template.html [d-elastic_ip]../d/elastic_ip.html [d-private_network]../d/private_network.html [d-security_group]../d/security_group.html [r-anti_affinity_group]anti_affinity_group.html [r-elastic_ip]../r/elastic_ip.html [r-private_network]../r/private_network.html [r-security_group]security_group.html [remote-exec]https://www.terraform.io/docs/provisioners/remote-exec.html [sshkeypair-doc]https://community.exoscale.com/documentation/compute/ssh-keypairs/ [template]https://www.exoscale.com/templates/ [type]https://www.exoscale.com/pricing/#/compute/ [zone]https://www.exoscale.com/datacenters/ ",
            "properties": {
                "antiAffinityGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of [Anti-Affinity Group][r-anti_affinity_group] IDs (at creation time only) to assign the Compute instance. Usage of the [`exoscale.AntiAffinityGroup`][d-anti_affinity_group] data source is recommended.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "The creation date of the Compute instance.\n"
                },
                "deployTargetId": {
                    "type": "string",
                    "description": "A Deploy Target ID.\n"
                },
                "diskSize": {
                    "type": "integer",
                    "description": "The Compute instance disk size in GiB (at least `10`). **WARNING**: updating this attribute stops/restarts the Compute instance.\n"
                },
                "elasticIpIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of [Elastic IP][r-elastic_ip] IDs to attach to the Compute instance. Usage of the [`exoscale.ElasticIP`][d-elastic_ip] data source is recommended.\n"
                },
                "ipv6": {
                    "type": "boolean",
                    "description": "Enable IPv6 on the Compute instance (default: `false`).\n"
                },
                "ipv6Address": {
                    "type": "string",
                    "description": "The IPv6 address of the Compute instance main network interface.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of key/value labels.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Compute instance.\n"
                },
                "privateNetworkIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of [Private Network][r-private_network] IDs to attach to the Compute instance. Usage of the [`exoscale.PrivateNetwork`][d-private_network] data source is recommended.\n"
                },
                "publicIpAddress": {
                    "type": "string",
                    "description": "The IPv4 address of the Compute instance's main network interface.\n"
                },
                "securityGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of [Security Group][r-security_group] IDs to attach to the Compute instance. Usage of the [`exoscale.SecurityGroup`][d-security_group] data source is recommended.\n"
                },
                "sshKey": {
                    "type": "string",
                    "description": "The name of the [SSH key pair][sshkeypair] to install to the Compute instance's user account during creation.\n"
                },
                "state": {
                    "type": "string",
                    "description": "The state of the Compute instance (supported values: `started`, `stopped`).\n"
                },
                "templateId": {
                    "type": "string",
                    "description": "The ID of the instance [template][template] to use when creating the Compute instance. Usage of the [`exoscale.getComputeTemplate`][d-compute_template] data source is recommended.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The Compute instance [type][type] (format: `FAMILY.SIZE`, e.g. `standard.medium`, `memory.huge`).  **WARNING**: updating this attribute stops/restarts the Compute instance.\n"
                },
                "userData": {
                    "type": "string",
                    "description": "A [cloud-init][cloudinit] configuration.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The name of the [zone][zone] to deploy the Compute instance into.\n"
                }
            },
            "required": [
                "createdAt",
                "diskSize",
                "ipv6Address",
                "name",
                "publicIpAddress",
                "state",
                "templateId",
                "type",
                "zone"
            ],
            "inputProperties": {
                "antiAffinityGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of [Anti-Affinity Group][r-anti_affinity_group] IDs (at creation time only) to assign the Compute instance. Usage of the [`exoscale.AntiAffinityGroup`][d-anti_affinity_group] data source is recommended.\n"
                },
                "deployTargetId": {
                    "type": "string",
                    "description": "A Deploy Target ID.\n"
                },
                "diskSize": {
                    "type": "integer",
                    "description": "The Compute instance disk size in GiB (at least `10`). **WARNING**: updating this attribute stops/restarts the Compute instance.\n"
                },
                "elasticIpIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of [Elastic IP][r-elastic_ip] IDs to attach to the Compute instance. Usage of the [`exoscale.ElasticIP`][d-elastic_ip] data source is recommended.\n"
                },
                "ipv6": {
                    "type": "boolean",
                    "description": "Enable IPv6 on the Compute instance (default: `false`).\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of key/value labels.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Compute instance.\n"
                },
                "privateNetworkIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of [Private Network][r-private_network] IDs to attach to the Compute instance. Usage of the [`exoscale.PrivateNetwork`][d-private_network] data source is recommended.\n"
                },
                "securityGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of [Security Group][r-security_group] IDs to attach to the Compute instance. Usage of the [`exoscale.SecurityGroup`][d-security_group] data source is recommended.\n"
                },
                "sshKey": {
                    "type": "string",
                    "description": "The name of the [SSH key pair][sshkeypair] to install to the Compute instance's user account during creation.\n"
                },
                "state": {
                    "type": "string",
                    "description": "The state of the Compute instance (supported values: `started`, `stopped`).\n"
                },
                "templateId": {
                    "type": "string",
                    "description": "The ID of the instance [template][template] to use when creating the Compute instance. Usage of the [`exoscale.getComputeTemplate`][d-compute_template] data source is recommended.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The Compute instance [type][type] (format: `FAMILY.SIZE`, e.g. `standard.medium`, `memory.huge`).  **WARNING**: updating this attribute stops/restarts the Compute instance.\n"
                },
                "userData": {
                    "type": "string",
                    "description": "A [cloud-init][cloudinit] configuration.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The name of the [zone][zone] to deploy the Compute instance into.\n"
                }
            },
            "requiredInputs": [
                "templateId",
                "type",
                "zone"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ComputeInstance resources.\n",
                "properties": {
                    "antiAffinityGroupIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of [Anti-Affinity Group][r-anti_affinity_group] IDs (at creation time only) to assign the Compute instance. Usage of the [`exoscale.AntiAffinityGroup`][d-anti_affinity_group] data source is recommended.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "The creation date of the Compute instance.\n"
                    },
                    "deployTargetId": {
                        "type": "string",
                        "description": "A Deploy Target ID.\n"
                    },
                    "diskSize": {
                        "type": "integer",
                        "description": "The Compute instance disk size in GiB (at least `10`). **WARNING**: updating this attribute stops/restarts the Compute instance.\n"
                    },
                    "elasticIpIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of [Elastic IP][r-elastic_ip] IDs to attach to the Compute instance. Usage of the [`exoscale.ElasticIP`][d-elastic_ip] data source is recommended.\n"
                    },
                    "ipv6": {
                        "type": "boolean",
                        "description": "Enable IPv6 on the Compute instance (default: `false`).\n"
                    },
                    "ipv6Address": {
                        "type": "string",
                        "description": "The IPv6 address of the Compute instance main network interface.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A map of key/value labels.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Compute instance.\n"
                    },
                    "privateNetworkIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of [Private Network][r-private_network] IDs to attach to the Compute instance. Usage of the [`exoscale.PrivateNetwork`][d-private_network] data source is recommended.\n"
                    },
                    "publicIpAddress": {
                        "type": "string",
                        "description": "The IPv4 address of the Compute instance's main network interface.\n"
                    },
                    "securityGroupIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of [Security Group][r-security_group] IDs to attach to the Compute instance. Usage of the [`exoscale.SecurityGroup`][d-security_group] data source is recommended.\n"
                    },
                    "sshKey": {
                        "type": "string",
                        "description": "The name of the [SSH key pair][sshkeypair] to install to the Compute instance's user account during creation.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "The state of the Compute instance (supported values: `started`, `stopped`).\n"
                    },
                    "templateId": {
                        "type": "string",
                        "description": "The ID of the instance [template][template] to use when creating the Compute instance. Usage of the [`exoscale.getComputeTemplate`][d-compute_template] data source is recommended.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The Compute instance [type][type] (format: `FAMILY.SIZE`, e.g. `standard.medium`, `memory.huge`).  **WARNING**: updating this attribute stops/restarts the Compute instance.\n"
                    },
                    "userData": {
                        "type": "string",
                        "description": "A [cloud-init][cloudinit] configuration.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The name of the [zone][zone] to deploy the Compute instance into.\n"
                    }
                },
                "type": "object"
            }
        },
        "exoscale:index/database:Database": {
            "description": "Provides an Exoscale [DBaaS][dbaas-doc] service resource. This can be used to create, modify, and delete database services.\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as exoscale from \"@pulumi/exoscale\";\n\nconst zone = \"ch-dk-2\";\nconst pgProd = new exoscale.Database(\"pgProd\", {\n    zone: zone,\n    type: \"pg\",\n    plan: \"startup-4\",\n    maintenanceDow: \"sunday\",\n    maintenanceTime: \"23:00:00\",\n    terminationProtection: true,\n    pg: {\n        version: \"13\",\n        backupSchedule: \"04:00\",\n        ipFilters: [\n            \"1.2.3.4/32\",\n            \"5.6.7.8/32\",\n        ],\n        pgSettings: JSON.stringify({\n            timezone: \"Europe/Zurich\",\n        }),\n    },\n});\nexport const databaseUri = pgProd.uri;\n```\n```python\nimport pulumi\nimport json\nimport pulumi_exoscale as exoscale\n\nzone = \"ch-dk-2\"\npg_prod = exoscale.Database(\"pgProd\",\n    zone=zone,\n    type=\"pg\",\n    plan=\"startup-4\",\n    maintenance_dow=\"sunday\",\n    maintenance_time=\"23:00:00\",\n    termination_protection=True,\n    pg=exoscale.DatabasePgArgs(\n        version=\"13\",\n        backup_schedule=\"04:00\",\n        ip_filters=[\n            \"1.2.3.4/32\",\n            \"5.6.7.8/32\",\n        ],\n        pg_settings=json.dumps({\n            \"timezone\": \"Europe/Zurich\",\n        }),\n    ))\npulumi.export(\"databaseUri\", pg_prod.uri)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Text.Json;\nusing Pulumi;\nusing Exoscale = Pulumi.Exoscale;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var zone = \"ch-dk-2\";\n        var pgProd = new Exoscale.Database(\"pgProd\", new Exoscale.DatabaseArgs\n        {\n            Zone = zone,\n            Type = \"pg\",\n            Plan = \"startup-4\",\n            MaintenanceDow = \"sunday\",\n            MaintenanceTime = \"23:00:00\",\n            TerminationProtection = true,\n            Pg = new Exoscale.Inputs.DatabasePgArgs\n            {\n                Version = \"13\",\n                BackupSchedule = \"04:00\",\n                IpFilters = \n                {\n                    \"1.2.3.4/32\",\n                    \"5.6.7.8/32\",\n                },\n                PgSettings = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n                {\n                    { \"timezone\", \"Europe/Zurich\" },\n                }),\n            },\n        });\n        this.DatabaseUri = pgProd.Uri;\n    }\n\n    [Output(\"databaseUri\")]\n    public Output\u003cstring\u003e DatabaseUri { get; set; }\n}\n```\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\n\t\"github.com/pulumi/pulumi-exoscale/sdk/go/exoscale\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tzone := \"ch-dk-2\"\n\t\ttmpJSON0, err := json.Marshal(map[string]interface{}{\n\t\t\t\"timezone\": \"Europe/Zurich\",\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson0 := string(tmpJSON0)\n\t\tpgProd, err := exoscale.NewDatabase(ctx, \"pgProd\", \u0026exoscale.DatabaseArgs{\n\t\t\tZone:                  pulumi.String(zone),\n\t\t\tType:                  pulumi.String(\"pg\"),\n\t\t\tPlan:                  pulumi.String(\"startup-4\"),\n\t\t\tMaintenanceDow:        pulumi.String(\"sunday\"),\n\t\t\tMaintenanceTime:       pulumi.String(\"23:00:00\"),\n\t\t\tTerminationProtection: pulumi.Bool(true),\n\t\t\tPg: \u0026DatabasePgArgs{\n\t\t\t\tVersion:        pulumi.String(\"13\"),\n\t\t\t\tBackupSchedule: pulumi.String(\"04:00\"),\n\t\t\t\tIpFilters: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"1.2.3.4/32\"),\n\t\t\t\t\tpulumi.String(\"5.6.7.8/32\"),\n\t\t\t\t},\n\t\t\t\tPgSettings: pulumi.String(json0),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"databaseUri\", pgProd.Uri)\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nAn existing database service can be imported as a resource by specifying `NAME@ZONE`console\n\n```sh\n $ pulumi import exoscale:index/database:Database example my-database@de-fra-1\n```\n\n [dbaas-doc]https://community.exoscale.com/documentation/dbaas/ [zone]https://www.exoscale.com/datacenters/ ",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "The creation date of the database service.\n"
                },
                "diskSize": {
                    "type": "integer",
                    "description": "The disk size of the database service.\n"
                },
                "kafka": {
                    "$ref": "#/types/exoscale:index/DatabaseKafka:DatabaseKafka",
                    "description": "*kafka* database service type specific arguments. Structure is documented below.\n"
                },
                "maintenanceDow": {
                    "type": "string",
                    "description": "The day of week to perform the automated database service maintenance (accepted values: `never`, `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`, `sunday`).\n"
                },
                "maintenanceTime": {
                    "type": "string",
                    "description": "The time of day to perform the automated database service maintenance (format: `HH:MM:SS`)\n"
                },
                "mysql": {
                    "$ref": "#/types/exoscale:index/DatabaseMysql:DatabaseMysql",
                    "description": "*mysql* database service type specific arguments. Structure is documented below.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the database service.\n"
                },
                "nodeCpus": {
                    "type": "integer",
                    "description": "The number of CPUs of the database service.\n"
                },
                "nodeMemory": {
                    "type": "integer",
                    "description": "The amount of memory of the database service.\n"
                },
                "nodes": {
                    "type": "integer",
                    "description": "The number of nodes of the database service.\n"
                },
                "pg": {
                    "$ref": "#/types/exoscale:index/DatabasePg:DatabasePg",
                    "description": "*pg* database service type specific arguments. Structure is documented below.\n"
                },
                "plan": {
                    "type": "string",
                    "description": "The plan of the database service (`exo dbaas type show \u003cTYPE\u003e` for reference).\n"
                },
                "redis": {
                    "$ref": "#/types/exoscale:index/DatabaseRedis:DatabaseRedis",
                    "description": "*redis* database service type specific arguments.Structure is documented below.\n"
                },
                "state": {
                    "type": "string",
                    "description": "The current state of the database service.\n"
                },
                "terminationProtection": {
                    "type": "boolean",
                    "description": "The database service protection boolean flag against termination/power-off.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the database service (accepted values: `kafka`, `mysql`, `pg`, `redis`).\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The date of the latest database service update.\n"
                },
                "uri": {
                    "type": "string",
                    "description": "The database service connection URI.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The name of the [zone][zone] to deploy the database service into.\n"
                }
            },
            "required": [
                "createdAt",
                "diskSize",
                "maintenanceDow",
                "maintenanceTime",
                "name",
                "nodeCpus",
                "nodeMemory",
                "nodes",
                "plan",
                "state",
                "type",
                "updatedAt",
                "uri",
                "zone"
            ],
            "inputProperties": {
                "kafka": {
                    "$ref": "#/types/exoscale:index/DatabaseKafka:DatabaseKafka",
                    "description": "*kafka* database service type specific arguments. Structure is documented below.\n"
                },
                "maintenanceDow": {
                    "type": "string",
                    "description": "The day of week to perform the automated database service maintenance (accepted values: `never`, `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`, `sunday`).\n"
                },
                "maintenanceTime": {
                    "type": "string",
                    "description": "The time of day to perform the automated database service maintenance (format: `HH:MM:SS`)\n"
                },
                "mysql": {
                    "$ref": "#/types/exoscale:index/DatabaseMysql:DatabaseMysql",
                    "description": "*mysql* database service type specific arguments. Structure is documented below.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the database service.\n"
                },
                "pg": {
                    "$ref": "#/types/exoscale:index/DatabasePg:DatabasePg",
                    "description": "*pg* database service type specific arguments. Structure is documented below.\n"
                },
                "plan": {
                    "type": "string",
                    "description": "The plan of the database service (`exo dbaas type show \u003cTYPE\u003e` for reference).\n"
                },
                "redis": {
                    "$ref": "#/types/exoscale:index/DatabaseRedis:DatabaseRedis",
                    "description": "*redis* database service type specific arguments.Structure is documented below.\n"
                },
                "terminationProtection": {
                    "type": "boolean",
                    "description": "The database service protection boolean flag against termination/power-off.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the database service (accepted values: `kafka`, `mysql`, `pg`, `redis`).\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The name of the [zone][zone] to deploy the database service into.\n"
                }
            },
            "requiredInputs": [
                "plan",
                "type",
                "zone"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Database resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "The creation date of the database service.\n"
                    },
                    "diskSize": {
                        "type": "integer",
                        "description": "The disk size of the database service.\n"
                    },
                    "kafka": {
                        "$ref": "#/types/exoscale:index/DatabaseKafka:DatabaseKafka",
                        "description": "*kafka* database service type specific arguments. Structure is documented below.\n"
                    },
                    "maintenanceDow": {
                        "type": "string",
                        "description": "The day of week to perform the automated database service maintenance (accepted values: `never`, `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`, `sunday`).\n"
                    },
                    "maintenanceTime": {
                        "type": "string",
                        "description": "The time of day to perform the automated database service maintenance (format: `HH:MM:SS`)\n"
                    },
                    "mysql": {
                        "$ref": "#/types/exoscale:index/DatabaseMysql:DatabaseMysql",
                        "description": "*mysql* database service type specific arguments. Structure is documented below.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the database service.\n"
                    },
                    "nodeCpus": {
                        "type": "integer",
                        "description": "The number of CPUs of the database service.\n"
                    },
                    "nodeMemory": {
                        "type": "integer",
                        "description": "The amount of memory of the database service.\n"
                    },
                    "nodes": {
                        "type": "integer",
                        "description": "The number of nodes of the database service.\n"
                    },
                    "pg": {
                        "$ref": "#/types/exoscale:index/DatabasePg:DatabasePg",
                        "description": "*pg* database service type specific arguments. Structure is documented below.\n"
                    },
                    "plan": {
                        "type": "string",
                        "description": "The plan of the database service (`exo dbaas type show \u003cTYPE\u003e` for reference).\n"
                    },
                    "redis": {
                        "$ref": "#/types/exoscale:index/DatabaseRedis:DatabaseRedis",
                        "description": "*redis* database service type specific arguments.Structure is documented below.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "The current state of the database service.\n"
                    },
                    "terminationProtection": {
                        "type": "boolean",
                        "description": "The database service protection boolean flag against termination/power-off.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the database service (accepted values: `kafka`, `mysql`, `pg`, `redis`).\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The date of the latest database service update.\n"
                    },
                    "uri": {
                        "type": "string",
                        "description": "The database service connection URI.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The name of the [zone][zone] to deploy the database service into.\n"
                    }
                },
                "type": "object"
            }
        },
        "exoscale:index/domain:Domain": {
            "description": "Provides an Exoscale [DNS][dns-doc] Domain resource. This can be used to create and delete DNS Domains.\n\n\n## Usage example\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as exoscale from \"@pulumi/exoscale\";\n\nconst example = new exoscale.Domain(\"example\", {});\n```\n```python\nimport pulumi\nimport pulumi_exoscale as exoscale\n\nexample = exoscale.Domain(\"example\")\n```\n```csharp\nusing Pulumi;\nusing Exoscale = Pulumi.Exoscale;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = new Exoscale.Domain(\"example\", new Exoscale.DomainArgs\n        {\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-exoscale/sdk/go/exoscale\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := exoscale.NewDomain(ctx, \"example\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\n\n## Import\n\nAn existing DNS Domain can be imported as a resource by nameconsole\n\n```sh\n $ pulumi import exoscale:index/domain:Domain example example.net\n```\n\n [dns-doc]https://community.exoscale.com/documentation/dns/ [r-domain_record]domain_record.html ",
            "properties": {
                "autoRenew": {
                    "type": "boolean",
                    "description": "Boolean indicating that the DNS Domain has automatic renewal enabled.\n"
                },
                "expiresOn": {
                    "type": "string",
                    "description": "The date of expiration of the DNS Domain, if known.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the DNS Domain.\n"
                },
                "state": {
                    "type": "string",
                    "description": "The state of the DNS Domain.\n"
                },
                "token": {
                    "type": "string",
                    "description": "A security token that can be used as an alternative way to manage DNS Domains via the Exoscale API.\n"
                }
            },
            "required": [
                "autoRenew",
                "expiresOn",
                "name",
                "state",
                "token"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The name of the DNS Domain.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Domain resources.\n",
                "properties": {
                    "autoRenew": {
                        "type": "boolean",
                        "description": "Boolean indicating that the DNS Domain has automatic renewal enabled.\n"
                    },
                    "expiresOn": {
                        "type": "string",
                        "description": "The date of expiration of the DNS Domain, if known.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the DNS Domain.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "The state of the DNS Domain.\n"
                    },
                    "token": {
                        "type": "string",
                        "description": "A security token that can be used as an alternative way to manage DNS Domains via the Exoscale API.\n"
                    }
                },
                "type": "object"
            }
        },
        "exoscale:index/domainRecord:DomainRecord": {
            "description": "Provides an Exoscale [DNS][dns-doc] domain record resource. This can be used to create, modify, and delete DNS domain records.\n\n\n## Usage example\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as exoscale from \"@pulumi/exoscale\";\n\nconst example = new exoscale.Domain(\"example\", {});\nconst myserver = new exoscale.DomainRecord(\"myserver\", {\n    domain: example.id,\n    recordType: \"A\",\n    content: \"1.2.3.4\",\n});\nconst myserverAlias = new exoscale.DomainRecord(\"myserverAlias\", {\n    domain: example.id,\n    recordType: \"CNAME\",\n    content: myserver.hostname,\n});\n```\n```python\nimport pulumi\nimport pulumi_exoscale as exoscale\n\nexample = exoscale.Domain(\"example\")\nmyserver = exoscale.DomainRecord(\"myserver\",\n    domain=example.id,\n    record_type=\"A\",\n    content=\"1.2.3.4\")\nmyserver_alias = exoscale.DomainRecord(\"myserverAlias\",\n    domain=example.id,\n    record_type=\"CNAME\",\n    content=myserver.hostname)\n```\n```csharp\nusing Pulumi;\nusing Exoscale = Pulumi.Exoscale;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = new Exoscale.Domain(\"example\", new Exoscale.DomainArgs\n        {\n        });\n        var myserver = new Exoscale.DomainRecord(\"myserver\", new Exoscale.DomainRecordArgs\n        {\n            Domain = example.Id,\n            RecordType = \"A\",\n            Content = \"1.2.3.4\",\n        });\n        var myserverAlias = new Exoscale.DomainRecord(\"myserverAlias\", new Exoscale.DomainRecordArgs\n        {\n            Domain = example.Id,\n            RecordType = \"CNAME\",\n            Content = myserver.Hostname,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-exoscale/sdk/go/exoscale\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := exoscale.NewDomain(ctx, \"example\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmyserver, err := exoscale.NewDomainRecord(ctx, \"myserver\", \u0026exoscale.DomainRecordArgs{\n\t\t\tDomain:     example.ID(),\n\t\t\tRecordType: pulumi.String(\"A\"),\n\t\t\tContent:    pulumi.String(\"1.2.3.4\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = exoscale.NewDomainRecord(ctx, \"myserverAlias\", \u0026exoscale.DomainRecordArgs{\n\t\t\tDomain:     example.ID(),\n\t\t\tRecordType: pulumi.String(\"CNAME\"),\n\t\t\tContent:    myserver.Hostname,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\n\n## Import\n\nAn existing DNS domain record can be imported as a resource by IDconsole\n\n```sh\n $ pulumi import exoscale:index/domainRecord:DomainRecord www 12480484\n```\n\n [dns-doc]https://community.exoscale.com/documentation/dns/ [r-domain]domain.html [ttl]https://en.wikipedia.org/wiki/Time_to_live ",
            "properties": {
                "content": {
                    "type": "string",
                    "description": "The value of the domain record.\n"
                },
                "domain": {
                    "type": "string",
                    "description": "The name of the [`exoscale.Domain`][r-domain] to create the record into.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The DNS domain record's *Fully Qualified Domain Name* (FQDN), useful for linking `A` records into `CNAME`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the domain record; leave blank (`\"\"`) to create a root record (similar to using `@` in a DNS zone file).\n"
                },
                "prio": {
                    "type": "integer",
                    "description": "The priority of the DNS domain record (for types that support it).\n"
                },
                "recordType": {
                    "type": "string",
                    "description": "The type of the domain record. Supported values are: `A`, `AAAA`, `ALIAS`, `CAA`, `CNAME`, `HINFO`, `MX`, `NAPTR`, `NS`, `POOL`, `SPF`, `SRV`, `SSHFP`, `TXT`, `URL`.\n"
                },
                "ttl": {
                    "type": "integer",
                    "description": "The [Time To Live][ttl] of the domain record.\n"
                }
            },
            "required": [
                "content",
                "domain",
                "hostname",
                "name",
                "prio",
                "recordType",
                "ttl"
            ],
            "inputProperties": {
                "content": {
                    "type": "string",
                    "description": "The value of the domain record.\n"
                },
                "domain": {
                    "type": "string",
                    "description": "The name of the [`exoscale.Domain`][r-domain] to create the record into.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the domain record; leave blank (`\"\"`) to create a root record (similar to using `@` in a DNS zone file).\n"
                },
                "prio": {
                    "type": "integer",
                    "description": "The priority of the DNS domain record (for types that support it).\n"
                },
                "recordType": {
                    "type": "string",
                    "description": "The type of the domain record. Supported values are: `A`, `AAAA`, `ALIAS`, `CAA`, `CNAME`, `HINFO`, `MX`, `NAPTR`, `NS`, `POOL`, `SPF`, `SRV`, `SSHFP`, `TXT`, `URL`.\n"
                },
                "ttl": {
                    "type": "integer",
                    "description": "The [Time To Live][ttl] of the domain record.\n"
                }
            },
            "requiredInputs": [
                "content",
                "domain",
                "recordType"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DomainRecord resources.\n",
                "properties": {
                    "content": {
                        "type": "string",
                        "description": "The value of the domain record.\n"
                    },
                    "domain": {
                        "type": "string",
                        "description": "The name of the [`exoscale.Domain`][r-domain] to create the record into.\n"
                    },
                    "hostname": {
                        "type": "string",
                        "description": "The DNS domain record's *Fully Qualified Domain Name* (FQDN), useful for linking `A` records into `CNAME`.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the domain record; leave blank (`\"\"`) to create a root record (similar to using `@` in a DNS zone file).\n"
                    },
                    "prio": {
                        "type": "integer",
                        "description": "The priority of the DNS domain record (for types that support it).\n"
                    },
                    "recordType": {
                        "type": "string",
                        "description": "The type of the domain record. Supported values are: `A`, `AAAA`, `ALIAS`, `CAA`, `CNAME`, `HINFO`, `MX`, `NAPTR`, `NS`, `POOL`, `SPF`, `SRV`, `SSHFP`, `TXT`, `URL`.\n"
                    },
                    "ttl": {
                        "type": "integer",
                        "description": "The [Time To Live][ttl] of the domain record.\n"
                    }
                },
                "type": "object"
            }
        },
        "exoscale:index/elasticIP:ElasticIP": {
            "description": "Provides an Exoscale [Elastic IP address][eip-doc] resource. This can be used to create, update and delete Elastic IPs.\n\n\n## Import\n\nAn existing Elastic IP can be imported as a resource by specifying `ID@ZONE`console\n\n```sh\n $ pulumi import exoscale:index/elasticIP:ElasticIP web eb556678-ec59-4be6-8c54-0406ae0f6da6@ch-dk-2\n```\n\n [eip-doc]https://community.exoscale.com/documentation/compute/eip/ [zone]https://www.exoscale.com/datacenters/ ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the Elastic IP.\n"
                },
                "healthcheck": {
                    "$ref": "#/types/exoscale:index/ElasticIPHealthcheck:ElasticIPHealthcheck",
                    "description": "A health checking configuration for managed Elastic IPs. Structure is documented below.\n"
                },
                "ipAddress": {
                    "type": "string",
                    "description": "The Elastic IP address.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The name of the [zone][zone] to create the Elastic IP into.\n"
                }
            },
            "required": [
                "healthcheck",
                "ipAddress",
                "zone"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the Elastic IP.\n"
                },
                "healthcheck": {
                    "$ref": "#/types/exoscale:index/ElasticIPHealthcheck:ElasticIPHealthcheck",
                    "description": "A health checking configuration for managed Elastic IPs. Structure is documented below.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The name of the [zone][zone] to create the Elastic IP into.\n"
                }
            },
            "requiredInputs": [
                "zone"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ElasticIP resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the Elastic IP.\n"
                    },
                    "healthcheck": {
                        "$ref": "#/types/exoscale:index/ElasticIPHealthcheck:ElasticIPHealthcheck",
                        "description": "A health checking configuration for managed Elastic IPs. Structure is documented below.\n"
                    },
                    "ipAddress": {
                        "type": "string",
                        "description": "The Elastic IP address.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The name of the [zone][zone] to create the Elastic IP into.\n"
                    }
                },
                "type": "object"
            }
        },
        "exoscale:index/iPAddress:IPAddress": {
            "description": "Provides an Exoscale [Elastic IP address][eip-doc] resource. This can be used to create, update and delete Elastic IPs.\n\nSee [`exoscale.SecondaryIPAddress`][r-secondary_ipaddress] for usage with Compute instances.\n\n!\u003e **WARNING:** This resource is deprecated and will be removed in the next major version.\n\n\n## Import\n\nAn existing Elastic IP can be imported as a resource by address or IDconsole # By address\n\n```sh\n $ pulumi import exoscale:index/iPAddress:IPAddress myip 159.100.251.224\n```\n\n # By ID\n\n```sh\n $ pulumi import exoscale:index/iPAddress:IPAddress myip eb556678-ec59-4be6-8c54-0406ae0f6da6\n```\n\n [eip-doc]https://community.exoscale.com/documentation/compute/eip/ [r-secondary_ipaddress]secondary_ipaddress.html [zone]https://www.exoscale.com/datacenters/ ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the Elastic IP.\n"
                },
                "healthcheckInterval": {
                    "type": "integer",
                    "description": "The healthcheck probing interval in seconds (must be between `5` and `300`).\n"
                },
                "healthcheckMode": {
                    "type": "string",
                    "description": "The healthcheck probing mode (must be `tcp`, `http` or `https`).\n"
                },
                "healthcheckPath": {
                    "type": "string",
                    "description": "The healthcheck probe HTTP request path (must be specified in `http`/`https` modes).\n"
                },
                "healthcheckPort": {
                    "type": "integer",
                    "description": "The healthcheck service port to probe (must be between `1` and `65535`).\n"
                },
                "healthcheckStrikesFail": {
                    "type": "integer",
                    "description": "The number of unsuccessful healthcheck probes before considering the target unhealthy (must be between `1` and `20`).\n"
                },
                "healthcheckStrikesOk": {
                    "type": "integer",
                    "description": "The number of successful healthcheck probes before considering the target healthy (must be between `1` and `20`).\n"
                },
                "healthcheckTimeout": {
                    "type": "integer",
                    "description": "The time in seconds before considering a healthcheck probing failed (must be between `2` and `60`).\n"
                },
                "healthcheckTlsSkipVerify": {
                    "type": "boolean",
                    "description": "Disable TLS certificate validation in `https` mode. Note: this parameter can only be changed to `true`, it cannot be reset to `false` later on (requires a resource re-creation).\n"
                },
                "healthcheckTlsSni": {
                    "type": "string",
                    "description": "The healthcheck TLS server name to specify in `https` mode. Note: this parameter can only be changed to a non-empty value, it cannot be reset to its default empty value later on (requires a resource re-creation).\n"
                },
                "ipAddress": {
                    "type": "string",
                    "description": "The Elastic IP address.\n"
                },
                "reverseDns": {
                    "type": "string",
                    "description": "A reverse DNS record to set for the Elastic IP.\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A dictionary of tags (key/value). To remove all tags, set `tags = {}`.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The name of the [zone][zone] to create the Elastic IP into.\n"
                }
            },
            "required": [
                "ipAddress",
                "tags",
                "zone"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the Elastic IP.\n"
                },
                "healthcheckInterval": {
                    "type": "integer",
                    "description": "The healthcheck probing interval in seconds (must be between `5` and `300`).\n"
                },
                "healthcheckMode": {
                    "type": "string",
                    "description": "The healthcheck probing mode (must be `tcp`, `http` or `https`).\n"
                },
                "healthcheckPath": {
                    "type": "string",
                    "description": "The healthcheck probe HTTP request path (must be specified in `http`/`https` modes).\n"
                },
                "healthcheckPort": {
                    "type": "integer",
                    "description": "The healthcheck service port to probe (must be between `1` and `65535`).\n"
                },
                "healthcheckStrikesFail": {
                    "type": "integer",
                    "description": "The number of unsuccessful healthcheck probes before considering the target unhealthy (must be between `1` and `20`).\n"
                },
                "healthcheckStrikesOk": {
                    "type": "integer",
                    "description": "The number of successful healthcheck probes before considering the target healthy (must be between `1` and `20`).\n"
                },
                "healthcheckTimeout": {
                    "type": "integer",
                    "description": "The time in seconds before considering a healthcheck probing failed (must be between `2` and `60`).\n"
                },
                "healthcheckTlsSkipVerify": {
                    "type": "boolean",
                    "description": "Disable TLS certificate validation in `https` mode. Note: this parameter can only be changed to `true`, it cannot be reset to `false` later on (requires a resource re-creation).\n"
                },
                "healthcheckTlsSni": {
                    "type": "string",
                    "description": "The healthcheck TLS server name to specify in `https` mode. Note: this parameter can only be changed to a non-empty value, it cannot be reset to its default empty value later on (requires a resource re-creation).\n"
                },
                "reverseDns": {
                    "type": "string",
                    "description": "A reverse DNS record to set for the Elastic IP.\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A dictionary of tags (key/value). To remove all tags, set `tags = {}`.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The name of the [zone][zone] to create the Elastic IP into.\n"
                }
            },
            "requiredInputs": [
                "zone"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IPAddress resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the Elastic IP.\n"
                    },
                    "healthcheckInterval": {
                        "type": "integer",
                        "description": "The healthcheck probing interval in seconds (must be between `5` and `300`).\n"
                    },
                    "healthcheckMode": {
                        "type": "string",
                        "description": "The healthcheck probing mode (must be `tcp`, `http` or `https`).\n"
                    },
                    "healthcheckPath": {
                        "type": "string",
                        "description": "The healthcheck probe HTTP request path (must be specified in `http`/`https` modes).\n"
                    },
                    "healthcheckPort": {
                        "type": "integer",
                        "description": "The healthcheck service port to probe (must be between `1` and `65535`).\n"
                    },
                    "healthcheckStrikesFail": {
                        "type": "integer",
                        "description": "The number of unsuccessful healthcheck probes before considering the target unhealthy (must be between `1` and `20`).\n"
                    },
                    "healthcheckStrikesOk": {
                        "type": "integer",
                        "description": "The number of successful healthcheck probes before considering the target healthy (must be between `1` and `20`).\n"
                    },
                    "healthcheckTimeout": {
                        "type": "integer",
                        "description": "The time in seconds before considering a healthcheck probing failed (must be between `2` and `60`).\n"
                    },
                    "healthcheckTlsSkipVerify": {
                        "type": "boolean",
                        "description": "Disable TLS certificate validation in `https` mode. Note: this parameter can only be changed to `true`, it cannot be reset to `false` later on (requires a resource re-creation).\n"
                    },
                    "healthcheckTlsSni": {
                        "type": "string",
                        "description": "The healthcheck TLS server name to specify in `https` mode. Note: this parameter can only be changed to a non-empty value, it cannot be reset to its default empty value later on (requires a resource re-creation).\n"
                    },
                    "ipAddress": {
                        "type": "string",
                        "description": "The Elastic IP address.\n"
                    },
                    "reverseDns": {
                        "type": "string",
                        "description": "A reverse DNS record to set for the Elastic IP.\n"
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A dictionary of tags (key/value). To remove all tags, set `tags = {}`.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The name of the [zone][zone] to create the Elastic IP into.\n"
                    }
                },
                "type": "object"
            }
        },
        "exoscale:index/instancePool:InstancePool": {
            "description": "Provides an Exoscale Instance Pool resource. This can be used to create, modify, and delete Instance Pools.\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as exoscale from \"@pulumi/exoscale\";\n\nconst config = new pulumi.Config();\nconst zone = config.get(\"zone\") || \"de-fra-1\";\nconst webappSSHKey = new exoscale.SSHKey(\"webappSSHKey\", {});\nconst webappSecurityGroup = new exoscale.SecurityGroup(\"webappSecurityGroup\", {description: \"my-web-app\"});\nconst webappPrivateNetwork = new exoscale.PrivateNetwork(\"webappPrivateNetwork\", {zone: zone});\nconst webappElasticIP = new exoscale.ElasticIP(\"webappElasticIP\", {zone: zone});\nconst webappComputeTemplate = exoscale.getComputeTemplate({\n    zone: zone,\n    name: \"my-web-app\",\n    filter: \"mine\",\n});\nconst webappInstancePool = new exoscale.InstancePool(\"webappInstancePool\", {\n    zone: zone,\n    size: 3,\n    templateId: webappComputeTemplate.then(webappComputeTemplate =\u003e webappComputeTemplate.id),\n    instanceType: \"standard.medium\",\n    diskSize: 50,\n    keyPair: webappSSHKey.name,\n    instancePrefix: \"my-web-app\",\n    securityGroupIds: [webappSecurityGroup.id],\n    elasticIpIds: [exoscale_ipaddress.webapp.id],\n    networkIds: [webappPrivateNetwork.id],\n    userData: `#cloud-config\npackage_upgrade: true\n`,\n    labels: {\n        app: \"webapp\",\n        env: \"prod\",\n    },\n    timeouts: [{\n        \"delete\": \"10m\",\n    }],\n});\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nAn existing Instance Pool can be imported as a resource by `\u003cID\u003e@\u003cZONE\u003e`console\n\n```sh\n $ pulumi import exoscale:index/instancePool:InstancePool example eb556678-ec59-4be6-8c54-0406ae0f6da6@de-fra-1\n```\n\n [cloudinit]http://cloudinit.readthedocs.io/en/latest/ [d-compute_template]../d/compute_template.html [eip-doc]https://community.exoscale.com/documentation/compute/eip/ [privnet-doc]https://community.exoscale.com/documentation/compute/private-networks/ [r-affinity]affinity.html [r-security_group]security_group.html [sshkeypair]https://community.exoscale.com/documentation/compute/ssh-keypairs/ [template]https://www.exoscale.com/templates/ [type]https://www.exoscale.com/pricing/#/compute/ [zone]https://www.exoscale.com/datacenters/ ",
            "properties": {
                "affinityGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of [Anti-Affinity Group][r-affinity] IDs (at creation time only).\n"
                },
                "deployTargetId": {
                    "type": "string",
                    "description": "A Deploy Target ID.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the Instance Pool.\n"
                },
                "diskSize": {
                    "type": "integer",
                    "description": "The managed Compute instances disk size.\n"
                },
                "elasticIpIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of [Elastic IP][eip-doc] IDs.\n"
                },
                "instancePrefix": {
                    "type": "string",
                    "description": "The string to add as prefix to managed Compute instances name (default: `pool`).\n"
                },
                "instanceType": {
                    "type": "string",
                    "description": "The managed Compute instances [type][type] (format: `FAMILY.SIZE`, e.g. `standard.medium`, `memory.huge`).\n"
                },
                "ipv6": {
                    "type": "boolean",
                    "description": "Enable IPv6 on managed Compute instances (default: `false`).\n"
                },
                "keyPair": {
                    "type": "string",
                    "description": "The name of the [SSH key pair][sshkeypair] to install when creating Compute instances.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of key/value labels.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Instance Pool.\n"
                },
                "networkIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of [Private Network][privnet-doc] IDs.\n"
                },
                "securityGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of [Security Group][r-security_group] IDs (at creation time only).\n"
                },
                "serviceOffering": {
                    "type": "string",
                    "description": "**Deprecated** The managed Compute instances size. Replaced by `instance_type`.\n",
                    "deprecationMessage": "This attribute has been replaced by \"instance_type\"."
                },
                "size": {
                    "type": "integer",
                    "description": "The number of Compute instance members the Instance Pool manages.\n"
                },
                "state": {
                    "type": "string"
                },
                "templateId": {
                    "type": "string",
                    "description": "The ID of the instance [template][template] to use when creating Compute instances. Usage of the [`compute_template`][d-compute_template] data source is recommended.\n"
                },
                "userData": {
                    "type": "string",
                    "description": "A [cloud-init][cloudinit] configuration to apply when creating Compute instances. Whenever possible don't base64-encode neither gzip it yourself, as this will be automatically taken care of on your behalf by the provider.\n"
                },
                "virtualMachines": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of Instance Pool members (Compute instance IDs).\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The name of the [zone][zone] to deploy the Instance Pool into.\n"
                }
            },
            "required": [
                "diskSize",
                "instanceType",
                "name",
                "serviceOffering",
                "size",
                "state",
                "templateId",
                "virtualMachines",
                "zone"
            ],
            "inputProperties": {
                "affinityGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of [Anti-Affinity Group][r-affinity] IDs (at creation time only).\n"
                },
                "deployTargetId": {
                    "type": "string",
                    "description": "A Deploy Target ID.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the Instance Pool.\n"
                },
                "diskSize": {
                    "type": "integer",
                    "description": "The managed Compute instances disk size.\n"
                },
                "elasticIpIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of [Elastic IP][eip-doc] IDs.\n"
                },
                "instancePrefix": {
                    "type": "string",
                    "description": "The string to add as prefix to managed Compute instances name (default: `pool`).\n"
                },
                "instanceType": {
                    "type": "string",
                    "description": "The managed Compute instances [type][type] (format: `FAMILY.SIZE`, e.g. `standard.medium`, `memory.huge`).\n"
                },
                "ipv6": {
                    "type": "boolean",
                    "description": "Enable IPv6 on managed Compute instances (default: `false`).\n"
                },
                "keyPair": {
                    "type": "string",
                    "description": "The name of the [SSH key pair][sshkeypair] to install when creating Compute instances.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of key/value labels.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Instance Pool.\n"
                },
                "networkIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of [Private Network][privnet-doc] IDs.\n"
                },
                "securityGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of [Security Group][r-security_group] IDs (at creation time only).\n"
                },
                "serviceOffering": {
                    "type": "string",
                    "description": "**Deprecated** The managed Compute instances size. Replaced by `instance_type`.\n",
                    "deprecationMessage": "This attribute has been replaced by \"instance_type\"."
                },
                "size": {
                    "type": "integer",
                    "description": "The number of Compute instance members the Instance Pool manages.\n"
                },
                "state": {
                    "type": "string"
                },
                "templateId": {
                    "type": "string",
                    "description": "The ID of the instance [template][template] to use when creating Compute instances. Usage of the [`compute_template`][d-compute_template] data source is recommended.\n"
                },
                "userData": {
                    "type": "string",
                    "description": "A [cloud-init][cloudinit] configuration to apply when creating Compute instances. Whenever possible don't base64-encode neither gzip it yourself, as this will be automatically taken care of on your behalf by the provider.\n"
                },
                "virtualMachines": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of Instance Pool members (Compute instance IDs).\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The name of the [zone][zone] to deploy the Instance Pool into.\n"
                }
            },
            "requiredInputs": [
                "size",
                "templateId",
                "zone"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering InstancePool resources.\n",
                "properties": {
                    "affinityGroupIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of [Anti-Affinity Group][r-affinity] IDs (at creation time only).\n"
                    },
                    "deployTargetId": {
                        "type": "string",
                        "description": "A Deploy Target ID.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the Instance Pool.\n"
                    },
                    "diskSize": {
                        "type": "integer",
                        "description": "The managed Compute instances disk size.\n"
                    },
                    "elasticIpIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of [Elastic IP][eip-doc] IDs.\n"
                    },
                    "instancePrefix": {
                        "type": "string",
                        "description": "The string to add as prefix to managed Compute instances name (default: `pool`).\n"
                    },
                    "instanceType": {
                        "type": "string",
                        "description": "The managed Compute instances [type][type] (format: `FAMILY.SIZE`, e.g. `standard.medium`, `memory.huge`).\n"
                    },
                    "ipv6": {
                        "type": "boolean",
                        "description": "Enable IPv6 on managed Compute instances (default: `false`).\n"
                    },
                    "keyPair": {
                        "type": "string",
                        "description": "The name of the [SSH key pair][sshkeypair] to install when creating Compute instances.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A map of key/value labels.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Instance Pool.\n"
                    },
                    "networkIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of [Private Network][privnet-doc] IDs.\n"
                    },
                    "securityGroupIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of [Security Group][r-security_group] IDs (at creation time only).\n"
                    },
                    "serviceOffering": {
                        "type": "string",
                        "description": "**Deprecated** The managed Compute instances size. Replaced by `instance_type`.\n",
                        "deprecationMessage": "This attribute has been replaced by \"instance_type\"."
                    },
                    "size": {
                        "type": "integer",
                        "description": "The number of Compute instance members the Instance Pool manages.\n"
                    },
                    "state": {
                        "type": "string"
                    },
                    "templateId": {
                        "type": "string",
                        "description": "The ID of the instance [template][template] to use when creating Compute instances. Usage of the [`compute_template`][d-compute_template] data source is recommended.\n"
                    },
                    "userData": {
                        "type": "string",
                        "description": "A [cloud-init][cloudinit] configuration to apply when creating Compute instances. Whenever possible don't base64-encode neither gzip it yourself, as this will be automatically taken care of on your behalf by the provider.\n"
                    },
                    "virtualMachines": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of Instance Pool members (Compute instance IDs).\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The name of the [zone][zone] to deploy the Instance Pool into.\n"
                    }
                },
                "type": "object"
            }
        },
        "exoscale:index/nIC:NIC": {
            "description": "Provides an Exoscale Compute instance [Private Network][privnet-doc] Interface (NIC) resource. This can be used to create, update and delete Compute instance NICs.\n\n!\u003e **WARNING:** This resource is deprecated and will be removed in the next major version.\n\n## Usage\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as exoscale from \"@pulumi/exoscale\";\n\nconst vm1 = new exoscale.Compute(\"vm1\", {});\n// ...\nconst oobNetwork = new exoscale.Network(\"oobNetwork\", {});\n// ...\nconst oobNIC = new exoscale.NIC(\"oobNIC\", {\n    computeId: vm1.id,\n    networkId: oobNetwork.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_exoscale as exoscale\n\nvm1 = exoscale.Compute(\"vm1\")\n# ...\noob_network = exoscale.Network(\"oobNetwork\")\n# ...\noob_nic = exoscale.NIC(\"oobNIC\",\n    compute_id=vm1.id,\n    network_id=oob_network.id)\n```\n```csharp\nusing Pulumi;\nusing Exoscale = Pulumi.Exoscale;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var vm1 = new Exoscale.Compute(\"vm1\", new Exoscale.ComputeArgs\n        {\n        });\n        // ...\n        var oobNetwork = new Exoscale.Network(\"oobNetwork\", new Exoscale.NetworkArgs\n        {\n        });\n        // ...\n        var oobNIC = new Exoscale.NIC(\"oobNIC\", new Exoscale.NICArgs\n        {\n            ComputeId = vm1.Id,\n            NetworkId = oobNetwork.Id,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-exoscale/sdk/go/exoscale\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tvm1, err := exoscale.NewCompute(ctx, \"vm1\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\toobNetwork, err := exoscale.NewNetwork(ctx, \"oobNetwork\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = exoscale.NewNIC(ctx, \"oobNIC\", \u0026exoscale.NICArgs{\n\t\t\tComputeId: vm1.ID(),\n\t\t\tNetworkId: oobNetwork.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\n\n## Import\n\nThis resource is automatically imported when importing an `exoscale_compute` resource. [privnet-doc]https://community.exoscale.com/documentation/compute/private-networks/ [r-compute]compute.html [r-network]network.html ",
            "properties": {
                "computeId": {
                    "type": "string",
                    "description": "The [Compute instance][r-compute] ID.\n"
                },
                "gateway": {
                    "type": "string"
                },
                "ipAddress": {
                    "type": "string",
                    "description": "The IP address to request as static DHCP lease if the NIC is attached to a *managed* Private Network (see the [`exoscale.Network`][r-network] resource).\n"
                },
                "macAddress": {
                    "type": "string",
                    "description": "The physical address (MAC) of the Compute instance NIC.\n"
                },
                "netmask": {
                    "type": "string"
                },
                "networkId": {
                    "type": "string",
                    "description": "The [Private Network][r-network] ID.\n"
                }
            },
            "required": [
                "computeId",
                "gateway",
                "ipAddress",
                "macAddress",
                "netmask",
                "networkId"
            ],
            "inputProperties": {
                "computeId": {
                    "type": "string",
                    "description": "The [Compute instance][r-compute] ID.\n"
                },
                "ipAddress": {
                    "type": "string",
                    "description": "The IP address to request as static DHCP lease if the NIC is attached to a *managed* Private Network (see the [`exoscale.Network`][r-network] resource).\n"
                },
                "networkId": {
                    "type": "string",
                    "description": "The [Private Network][r-network] ID.\n"
                }
            },
            "requiredInputs": [
                "computeId",
                "networkId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NIC resources.\n",
                "properties": {
                    "computeId": {
                        "type": "string",
                        "description": "The [Compute instance][r-compute] ID.\n"
                    },
                    "gateway": {
                        "type": "string"
                    },
                    "ipAddress": {
                        "type": "string",
                        "description": "The IP address to request as static DHCP lease if the NIC is attached to a *managed* Private Network (see the [`exoscale.Network`][r-network] resource).\n"
                    },
                    "macAddress": {
                        "type": "string",
                        "description": "The physical address (MAC) of the Compute instance NIC.\n"
                    },
                    "netmask": {
                        "type": "string"
                    },
                    "networkId": {
                        "type": "string",
                        "description": "The [Private Network][r-network] ID.\n"
                    }
                },
                "type": "object"
            }
        },
        "exoscale:index/nLB:NLB": {
            "description": "Provides an Exoscale [Network Load Balancer][nlb-doc] (NLB) resource. This can be used to create, modify, and delete NLBs.\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as exoscale from \"@pulumi/exoscale\";\n\nconst config = new pulumi.Config();\nconst zone = config.get(\"zone\") || \"de-fra-1\";\nconst website = new exoscale.NLB(\"website\", {\n    zone: zone,\n    description: \"This is the Network Load Balancer for my website\",\n    labels: {\n        env: \"prod\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_exoscale as exoscale\n\nconfig = pulumi.Config()\nzone = config.get(\"zone\")\nif zone is None:\n    zone = \"de-fra-1\"\nwebsite = exoscale.NLB(\"website\",\n    zone=zone,\n    description=\"This is the Network Load Balancer for my website\",\n    labels={\n        \"env\": \"prod\",\n    })\n```\n```csharp\nusing Pulumi;\nusing Exoscale = Pulumi.Exoscale;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var config = new Config();\n        var zone = config.Get(\"zone\") ?? \"de-fra-1\";\n        var website = new Exoscale.NLB(\"website\", new Exoscale.NLBArgs\n        {\n            Zone = zone,\n            Description = \"This is the Network Load Balancer for my website\",\n            Labels = \n            {\n                { \"env\", \"prod\" },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-exoscale/sdk/go/exoscale\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcfg := config.New(ctx, \"\")\n\t\tzone := \"de-fra-1\"\n\t\tif param := cfg.Get(\"zone\"); param != \"\" {\n\t\t\tzone = param\n\t\t}\n\t\t_, err := exoscale.NewNLB(ctx, \"website\", \u0026exoscale.NLBArgs{\n\t\t\tZone:        pulumi.String(zone),\n\t\t\tDescription: pulumi.String(\"This is the Network Load Balancer for my website\"),\n\t\t\tLabels: pulumi.StringMap{\n\t\t\t\t\"env\": pulumi.String(\"prod\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nAn existing NLB can be imported as a resource by `\u003cID\u003e@\u003cZONE\u003e`console\n\n```sh\n $ pulumi import exoscale:index/nLB:NLB example eb556678-ec59-4be6-8c54-0406ae0f6da6@de-fra-1\n```\n\n [nlb-doc]https://community.exoscale.com/documentation/compute/network-load-balancer/ [r-nlb_service]nlb_service.html [zone]https://www.exoscale.com/datacenters/ ",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "The creation date of the NLB.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the NLB.\n"
                },
                "ipAddress": {
                    "type": "string",
                    "description": "The public IP address of the NLB.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of key/value labels.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the NLB.\n"
                },
                "services": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of the NLB service names.\n"
                },
                "state": {
                    "type": "string",
                    "description": "The current state of the NLB.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The name of the [zone][zone] to deploy the NLB into.\n"
                }
            },
            "required": [
                "createdAt",
                "ipAddress",
                "name",
                "services",
                "state",
                "zone"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the NLB.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of key/value labels.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the NLB.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The name of the [zone][zone] to deploy the NLB into.\n"
                }
            },
            "requiredInputs": [
                "zone"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NLB resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "The creation date of the NLB.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the NLB.\n"
                    },
                    "ipAddress": {
                        "type": "string",
                        "description": "The public IP address of the NLB.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A map of key/value labels.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the NLB.\n"
                    },
                    "services": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of the NLB service names.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "The current state of the NLB.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The name of the [zone][zone] to deploy the NLB into.\n"
                    }
                },
                "type": "object"
            }
        },
        "exoscale:index/nLBService:NLBService": {
            "description": "Provides an Exoscale Network Load Balancer ([NLB][r-nlb]) service resource. This can be used to create, modify, and delete NLB services.\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as exoscale from \"@pulumi/exoscale\";\n\nconst config = new pulumi.Config();\nconst zone = config.get(\"zone\") || \"de-fra-1\";\nconst template = config.get(\"template\") || \"Linux Ubuntu 20.04 LTS 64-bit\";\nconst websiteComputeTemplate = exoscale.getComputeTemplate({\n    zone: zone,\n    name: template,\n});\nconst websiteInstancePool = new exoscale.InstancePool(\"websiteInstancePool\", {\n    description: \"Instance Pool Website nodes\",\n    templateId: websiteComputeTemplate.then(websiteComputeTemplate =\u003e websiteComputeTemplate.id),\n    serviceOffering: \"medium\",\n    size: 3,\n    zone: zone,\n});\nconst websiteNLB = new exoscale.NLB(\"websiteNLB\", {\n    description: \"This is the Network Load Balancer for my website\",\n    zone: zone,\n});\nconst websiteNLBService = new exoscale.NLBService(\"websiteNLBService\", {\n    zone: websiteNLB.zone,\n    description: \"Website over HTTPS\",\n    nlbId: websiteNLB.id,\n    instancePoolId: websiteInstancePool.id,\n    protocol: \"tcp\",\n    port: 443,\n    targetPort: 8443,\n    strategy: \"round-robin\",\n    healthchecks: [{\n        mode: \"https\",\n        port: 8443,\n        uri: \"/healthz\",\n        tlsSni: \"example.net\",\n        interval: 5,\n        timeout: 3,\n        retries: 1,\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_exoscale as exoscale\n\nconfig = pulumi.Config()\nzone = config.get(\"zone\")\nif zone is None:\n    zone = \"de-fra-1\"\ntemplate = config.get(\"template\")\nif template is None:\n    template = \"Linux Ubuntu 20.04 LTS 64-bit\"\nwebsite_compute_template = exoscale.get_compute_template(zone=zone,\n    name=template)\nwebsite_instance_pool = exoscale.InstancePool(\"websiteInstancePool\",\n    description=\"Instance Pool Website nodes\",\n    template_id=website_compute_template.id,\n    service_offering=\"medium\",\n    size=3,\n    zone=zone)\nwebsite_nlb = exoscale.NLB(\"websiteNLB\",\n    description=\"This is the Network Load Balancer for my website\",\n    zone=zone)\nwebsite_nlb_service = exoscale.NLBService(\"websiteNLBService\",\n    zone=website_nlb.zone,\n    description=\"Website over HTTPS\",\n    nlb_id=website_nlb.id,\n    instance_pool_id=website_instance_pool.id,\n    protocol=\"tcp\",\n    port=443,\n    target_port=8443,\n    strategy=\"round-robin\",\n    healthchecks=[exoscale.NLBServiceHealthcheckArgs(\n        mode=\"https\",\n        port=8443,\n        uri=\"/healthz\",\n        tls_sni=\"example.net\",\n        interval=5,\n        timeout=3,\n        retries=1,\n    )])\n```\n```csharp\nusing Pulumi;\nusing Exoscale = Pulumi.Exoscale;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var config = new Config();\n        var zone = config.Get(\"zone\") ?? \"de-fra-1\";\n        var template = config.Get(\"template\") ?? \"Linux Ubuntu 20.04 LTS 64-bit\";\n        var websiteComputeTemplate = Output.Create(Exoscale.GetComputeTemplate.InvokeAsync(new Exoscale.GetComputeTemplateArgs\n        {\n            Zone = zone,\n            Name = template,\n        }));\n        var websiteInstancePool = new Exoscale.InstancePool(\"websiteInstancePool\", new Exoscale.InstancePoolArgs\n        {\n            Description = \"Instance Pool Website nodes\",\n            TemplateId = websiteComputeTemplate.Apply(websiteComputeTemplate =\u003e websiteComputeTemplate.Id),\n            ServiceOffering = \"medium\",\n            Size = 3,\n            Zone = zone,\n        });\n        var websiteNLB = new Exoscale.NLB(\"websiteNLB\", new Exoscale.NLBArgs\n        {\n            Description = \"This is the Network Load Balancer for my website\",\n            Zone = zone,\n        });\n        var websiteNLBService = new Exoscale.NLBService(\"websiteNLBService\", new Exoscale.NLBServiceArgs\n        {\n            Zone = websiteNLB.Zone,\n            Description = \"Website over HTTPS\",\n            NlbId = websiteNLB.Id,\n            InstancePoolId = websiteInstancePool.Id,\n            Protocol = \"tcp\",\n            Port = 443,\n            TargetPort = 8443,\n            Strategy = \"round-robin\",\n            Healthchecks = \n            {\n                new Exoscale.Inputs.NLBServiceHealthcheckArgs\n                {\n                    Mode = \"https\",\n                    Port = 8443,\n                    Uri = \"/healthz\",\n                    TlsSni = \"example.net\",\n                    Interval = 5,\n                    Timeout = 3,\n                    Retries = 1,\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-exoscale/sdk/go/exoscale\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcfg := config.New(ctx, \"\")\n\t\tzone := \"de-fra-1\"\n\t\tif param := cfg.Get(\"zone\"); param != \"\" {\n\t\t\tzone = param\n\t\t}\n\t\ttemplate := \"Linux Ubuntu 20.04 LTS 64-bit\"\n\t\tif param := cfg.Get(\"template\"); param != \"\" {\n\t\t\ttemplate = param\n\t\t}\n\t\topt0 := template\n\t\twebsiteComputeTemplate, err := exoscale.GetComputeTemplate(ctx, \u0026GetComputeTemplateArgs{\n\t\t\tZone: zone,\n\t\t\tName: \u0026opt0,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\twebsiteInstancePool, err := exoscale.NewInstancePool(ctx, \"websiteInstancePool\", \u0026exoscale.InstancePoolArgs{\n\t\t\tDescription:     pulumi.String(\"Instance Pool Website nodes\"),\n\t\t\tTemplateId:      pulumi.String(websiteComputeTemplate.Id),\n\t\t\tServiceOffering: pulumi.String(\"medium\"),\n\t\t\tSize:            pulumi.Int(3),\n\t\t\tZone:            pulumi.String(zone),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\twebsiteNLB, err := exoscale.NewNLB(ctx, \"websiteNLB\", \u0026exoscale.NLBArgs{\n\t\t\tDescription: pulumi.String(\"This is the Network Load Balancer for my website\"),\n\t\t\tZone:        pulumi.String(zone),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = exoscale.NewNLBService(ctx, \"websiteNLBService\", \u0026exoscale.NLBServiceArgs{\n\t\t\tZone:           websiteNLB.Zone,\n\t\t\tDescription:    pulumi.String(\"Website over HTTPS\"),\n\t\t\tNlbId:          websiteNLB.ID(),\n\t\t\tInstancePoolId: websiteInstancePool.ID(),\n\t\t\tProtocol:       pulumi.String(\"tcp\"),\n\t\t\tPort:           pulumi.Int(443),\n\t\t\tTargetPort:     pulumi.Int(8443),\n\t\t\tStrategy:       pulumi.String(\"round-robin\"),\n\t\t\tHealthchecks: NLBServiceHealthcheckArray{\n\t\t\t\t\u0026NLBServiceHealthcheckArgs{\n\t\t\t\t\tMode:     pulumi.String(\"https\"),\n\t\t\t\t\tPort:     pulumi.Int(8443),\n\t\t\t\t\tUri:      pulumi.String(\"/healthz\"),\n\t\t\t\t\tTlsSni:   pulumi.String(\"example.net\"),\n\t\t\t\t\tInterval: pulumi.Int(5),\n\t\t\t\t\tTimeout:  pulumi.Int(3),\n\t\t\t\t\tRetries:  pulumi.Int(1),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nAn existing NLB service can be imported as a resource by `\u003cNLB-ID\u003e/\u003cSERVICE-ID\u003e@\u003cZONE\u003e`console\n\n```sh\n $ pulumi import exoscale:index/nLBService:NLBService example eb556678-ec59-4be6-8c54-0406ae0f6da6/9ecc6b8b-73d4-4211-8ced-f7f29bb79524@de-fra-1\n```\n\n [r-nlb]nlb.html [zone]https://www.exoscale.com/datacenters/ ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the NLB service.\n"
                },
                "healthchecks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/exoscale:index/NLBServiceHealthcheck:NLBServiceHealthcheck"
                    }
                },
                "instancePoolId": {
                    "type": "string",
                    "description": "The ID of the Instance Pool to forward network traffic to.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the NLB service.\n"
                },
                "nlbId": {
                    "type": "string",
                    "description": "The ID of the NLB to attach the service.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The healthcheck port.\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "The protocol (tcp/udp).\n"
                },
                "state": {
                    "type": "string"
                },
                "strategy": {
                    "type": "string",
                    "description": "The strategy (round-robin/source-hash).\n"
                },
                "targetPort": {
                    "type": "integer",
                    "description": "The port to forward network traffic to on target instances.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The name of the [zone][zone] used by the NLB.\n"
                }
            },
            "required": [
                "healthchecks",
                "instancePoolId",
                "name",
                "nlbId",
                "port",
                "state",
                "targetPort",
                "zone"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the NLB service.\n"
                },
                "healthchecks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/exoscale:index/NLBServiceHealthcheck:NLBServiceHealthcheck"
                    }
                },
                "instancePoolId": {
                    "type": "string",
                    "description": "The ID of the Instance Pool to forward network traffic to.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the NLB service.\n"
                },
                "nlbId": {
                    "type": "string",
                    "description": "The ID of the NLB to attach the service.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The healthcheck port.\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "The protocol (tcp/udp).\n"
                },
                "strategy": {
                    "type": "string",
                    "description": "The strategy (round-robin/source-hash).\n"
                },
                "targetPort": {
                    "type": "integer",
                    "description": "The port to forward network traffic to on target instances.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The name of the [zone][zone] used by the NLB.\n"
                }
            },
            "requiredInputs": [
                "healthchecks",
                "instancePoolId",
                "nlbId",
                "port",
                "targetPort",
                "zone"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NLBService resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the NLB service.\n"
                    },
                    "healthchecks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/exoscale:index/NLBServiceHealthcheck:NLBServiceHealthcheck"
                        }
                    },
                    "instancePoolId": {
                        "type": "string",
                        "description": "The ID of the Instance Pool to forward network traffic to.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the NLB service.\n"
                    },
                    "nlbId": {
                        "type": "string",
                        "description": "The ID of the NLB to attach the service.\n"
                    },
                    "port": {
                        "type": "integer",
                        "description": "The healthcheck port.\n"
                    },
                    "protocol": {
                        "type": "string",
                        "description": "The protocol (tcp/udp).\n"
                    },
                    "state": {
                        "type": "string"
                    },
                    "strategy": {
                        "type": "string",
                        "description": "The strategy (round-robin/source-hash).\n"
                    },
                    "targetPort": {
                        "type": "integer",
                        "description": "The port to forward network traffic to on target instances.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The name of the [zone][zone] used by the NLB.\n"
                    }
                },
                "type": "object"
            }
        },
        "exoscale:index/network:Network": {
            "description": "Provides an Exoscale [Private Network][privnet-doc] resource. This can be used to create, update and delete Private Networks.\n\nSee [`exoscale.NIC`][r-nic] for usage with Compute instances.\n\n!\u003e **WARNING:** This resource is deprecated and will be removed in the next major version.\n\n\n## Usage\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as exoscale from \"@pulumi/exoscale\";\n\nconst unmanaged = new exoscale.Network(\"unmanaged\", {\n    displayText: \"Out-of-band network\",\n    tags: {},\n    zone: \"ch-gva-2\",\n});\n```\n```python\nimport pulumi\nimport pulumi_exoscale as exoscale\n\nunmanaged = exoscale.Network(\"unmanaged\",\n    display_text=\"Out-of-band network\",\n    tags={},\n    zone=\"ch-gva-2\")\n```\n```csharp\nusing Pulumi;\nusing Exoscale = Pulumi.Exoscale;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @unmanaged = new Exoscale.Network(\"unmanaged\", new Exoscale.NetworkArgs\n        {\n            DisplayText = \"Out-of-band network\",\n            Tags = ,\n            Zone = \"ch-gva-2\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-exoscale/sdk/go/exoscale\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := exoscale.NewNetwork(ctx, \"unmanaged\", \u0026exoscale.NetworkArgs{\n\t\t\tDisplayText: pulumi.String(\"Out-of-band network\"),\n\t\t\tTags:        nil,\n\t\t\tZone:        pulumi.String(\"ch-gva-2\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\n*Managed* Private Network:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as exoscale from \"@pulumi/exoscale\";\n\nconst managed = new exoscale.Network(\"managed\", {\n    displayText: \"Out-of-band network with DHCP\",\n    endIp: \"10.0.0.253\",\n    netmask: \"255.255.255.0\",\n    startIp: \"10.0.0.20\",\n    zone: \"ch-gva-2\",\n});\n```\n```python\nimport pulumi\nimport pulumi_exoscale as exoscale\n\nmanaged = exoscale.Network(\"managed\",\n    display_text=\"Out-of-band network with DHCP\",\n    end_ip=\"10.0.0.253\",\n    netmask=\"255.255.255.0\",\n    start_ip=\"10.0.0.20\",\n    zone=\"ch-gva-2\")\n```\n```csharp\nusing Pulumi;\nusing Exoscale = Pulumi.Exoscale;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var managed = new Exoscale.Network(\"managed\", new Exoscale.NetworkArgs\n        {\n            DisplayText = \"Out-of-band network with DHCP\",\n            EndIp = \"10.0.0.253\",\n            Netmask = \"255.255.255.0\",\n            StartIp = \"10.0.0.20\",\n            Zone = \"ch-gva-2\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-exoscale/sdk/go/exoscale\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := exoscale.NewNetwork(ctx, \"managed\", \u0026exoscale.NetworkArgs{\n\t\t\tDisplayText: pulumi.String(\"Out-of-band network with DHCP\"),\n\t\t\tEndIp:       pulumi.String(\"10.0.0.253\"),\n\t\t\tNetmask:     pulumi.String(\"255.255.255.0\"),\n\t\t\tStartIp:     pulumi.String(\"10.0.0.20\"),\n\t\t\tZone:        pulumi.String(\"ch-gva-2\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\n\n## Import\n\nAn existing Private Network can be imported as a resource by name or IDconsole # By name\n\n```sh\n $ pulumi import exoscale:index/network:Network net myprivnet\n```\n\n # By ID\n\n```sh\n $ pulumi import exoscale:index/network:Network net 04fb76a2-6d22-49be-8da7-f2a5a0b902e1\n```\n\n [r-nic]nic.html [privnet-doc]https://community.exoscale.com/documentation/compute/private-networks/ [zone]https://www.exoscale.com/datacenters/ ",
            "properties": {
                "displayText": {
                    "type": "string",
                    "description": "A free-form text describing the Private Network purpose.\n"
                },
                "endIp": {
                    "type": "string",
                    "description": "The last address of the IP range used by the DHCP service. Required for *managed* Private Networks.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Private Network.\n"
                },
                "netmask": {
                    "type": "string",
                    "description": "The netmask defining the IP network allowed for the static lease (see `exoscale.NIC` resource). Required for *managed* Private Networks.\n"
                },
                "networkOffering": {
                    "type": "string",
                    "deprecationMessage": "This attribute is deprecated, please remove it from your configuration."
                },
                "startIp": {
                    "type": "string",
                    "description": "The first address of IP range used by the DHCP service to automatically assign. Required for *managed* Private Networks.\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A dictionary of tags (key/value). To remove all tags, set `tags = {}`.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The name of the [zone][zone] to create the Private Network into.\n"
                }
            },
            "required": [
                "displayText",
                "name",
                "tags",
                "zone"
            ],
            "inputProperties": {
                "displayText": {
                    "type": "string",
                    "description": "A free-form text describing the Private Network purpose.\n"
                },
                "endIp": {
                    "type": "string",
                    "description": "The last address of the IP range used by the DHCP service. Required for *managed* Private Networks.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Private Network.\n"
                },
                "netmask": {
                    "type": "string",
                    "description": "The netmask defining the IP network allowed for the static lease (see `exoscale.NIC` resource). Required for *managed* Private Networks.\n"
                },
                "networkOffering": {
                    "type": "string",
                    "deprecationMessage": "This attribute is deprecated, please remove it from your configuration."
                },
                "startIp": {
                    "type": "string",
                    "description": "The first address of IP range used by the DHCP service to automatically assign. Required for *managed* Private Networks.\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A dictionary of tags (key/value). To remove all tags, set `tags = {}`.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The name of the [zone][zone] to create the Private Network into.\n"
                }
            },
            "requiredInputs": [
                "zone"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Network resources.\n",
                "properties": {
                    "displayText": {
                        "type": "string",
                        "description": "A free-form text describing the Private Network purpose.\n"
                    },
                    "endIp": {
                        "type": "string",
                        "description": "The last address of the IP range used by the DHCP service. Required for *managed* Private Networks.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Private Network.\n"
                    },
                    "netmask": {
                        "type": "string",
                        "description": "The netmask defining the IP network allowed for the static lease (see `exoscale.NIC` resource). Required for *managed* Private Networks.\n"
                    },
                    "networkOffering": {
                        "type": "string",
                        "deprecationMessage": "This attribute is deprecated, please remove it from your configuration."
                    },
                    "startIp": {
                        "type": "string",
                        "description": "The first address of IP range used by the DHCP service to automatically assign. Required for *managed* Private Networks.\n"
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A dictionary of tags (key/value). To remove all tags, set `tags = {}`.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The name of the [zone][zone] to create the Private Network into.\n"
                    }
                },
                "type": "object"
            }
        },
        "exoscale:index/privateNetwork:PrivateNetwork": {
            "description": "Provides an Exoscale [Private Network][privnet-doc] resource. This can be used to create, update and delete Private Networks.\n\n\n## Usage\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as exoscale from \"@pulumi/exoscale\";\n\nconst example = new exoscale.PrivateNetwork(\"example\", {\n    description: \"Out-of-band network\",\n    zone: \"ch-gva-2\",\n});\n```\n```python\nimport pulumi\nimport pulumi_exoscale as exoscale\n\nexample = exoscale.PrivateNetwork(\"example\",\n    description=\"Out-of-band network\",\n    zone=\"ch-gva-2\")\n```\n```csharp\nusing Pulumi;\nusing Exoscale = Pulumi.Exoscale;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = new Exoscale.PrivateNetwork(\"example\", new Exoscale.PrivateNetworkArgs\n        {\n            Description = \"Out-of-band network\",\n            Zone = \"ch-gva-2\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-exoscale/sdk/go/exoscale\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := exoscale.NewPrivateNetwork(ctx, \"example\", \u0026exoscale.PrivateNetworkArgs{\n\t\t\tDescription: pulumi.String(\"Out-of-band network\"),\n\t\t\tZone:        pulumi.String(\"ch-gva-2\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\n*Managed* Private Network:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as exoscale from \"@pulumi/exoscale\";\n\nconst example_managed = new exoscale.PrivateNetwork(\"example-managed\", {\n    description: \"Out-of-band network with DHCP\",\n    endIp: \"10.0.0.253\",\n    netmask: \"255.255.255.0\",\n    startIp: \"10.0.0.20\",\n    zone: \"ch-gva-2\",\n});\n```\n```python\nimport pulumi\nimport pulumi_exoscale as exoscale\n\nexample_managed = exoscale.PrivateNetwork(\"example-managed\",\n    description=\"Out-of-band network with DHCP\",\n    end_ip=\"10.0.0.253\",\n    netmask=\"255.255.255.0\",\n    start_ip=\"10.0.0.20\",\n    zone=\"ch-gva-2\")\n```\n```csharp\nusing Pulumi;\nusing Exoscale = Pulumi.Exoscale;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example_managed = new Exoscale.PrivateNetwork(\"example-managed\", new Exoscale.PrivateNetworkArgs\n        {\n            Description = \"Out-of-band network with DHCP\",\n            EndIp = \"10.0.0.253\",\n            Netmask = \"255.255.255.0\",\n            StartIp = \"10.0.0.20\",\n            Zone = \"ch-gva-2\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-exoscale/sdk/go/exoscale\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := exoscale.NewPrivateNetwork(ctx, \"example-managed\", \u0026exoscale.PrivateNetworkArgs{\n\t\t\tDescription: pulumi.String(\"Out-of-band network with DHCP\"),\n\t\t\tEndIp:       pulumi.String(\"10.0.0.253\"),\n\t\t\tNetmask:     pulumi.String(\"255.255.255.0\"),\n\t\t\tStartIp:     pulumi.String(\"10.0.0.20\"),\n\t\t\tZone:        pulumi.String(\"ch-gva-2\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\n\n## Import\n\nAn existing Private Network can be imported as a resource by specifying `ID@ZONE`console\n\n```sh\n $ pulumi import exoscale:index/privateNetwork:PrivateNetwork net 04fb76a2-6d22-49be-8da7-f2a5a0b902e1@ch-gva-2\n```\n\n [privnet-doc]https://community.exoscale.com/documentation/compute/private-networks/ [zone]https://www.exoscale.com/datacenters/ ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "A description for the Private Network.\n"
                },
                "endIp": {
                    "type": "string",
                    "description": "The last address of the IP range used by the DHCP service. Required for *managed* Private Networks.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Private Network.\n"
                },
                "netmask": {
                    "type": "string",
                    "description": "The netmask defining the IP network allowed for the static lease. Required for *managed* Private Networks.\n"
                },
                "startIp": {
                    "type": "string",
                    "description": "The first address of IP range used by the DHCP service to automatically assign. Required for *managed* Private Networks.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The name of the [zone][zone] to create the Private Network into.\n"
                }
            },
            "required": [
                "name",
                "zone"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "A description for the Private Network.\n"
                },
                "endIp": {
                    "type": "string",
                    "description": "The last address of the IP range used by the DHCP service. Required for *managed* Private Networks.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Private Network.\n"
                },
                "netmask": {
                    "type": "string",
                    "description": "The netmask defining the IP network allowed for the static lease. Required for *managed* Private Networks.\n"
                },
                "startIp": {
                    "type": "string",
                    "description": "The first address of IP range used by the DHCP service to automatically assign. Required for *managed* Private Networks.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The name of the [zone][zone] to create the Private Network into.\n"
                }
            },
            "requiredInputs": [
                "zone"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PrivateNetwork resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "A description for the Private Network.\n"
                    },
                    "endIp": {
                        "type": "string",
                        "description": "The last address of the IP range used by the DHCP service. Required for *managed* Private Networks.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Private Network.\n"
                    },
                    "netmask": {
                        "type": "string",
                        "description": "The netmask defining the IP network allowed for the static lease. Required for *managed* Private Networks.\n"
                    },
                    "startIp": {
                        "type": "string",
                        "description": "The first address of IP range used by the DHCP service to automatically assign. Required for *managed* Private Networks.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The name of the [zone][zone] to create the Private Network into.\n"
                    }
                },
                "type": "object"
            }
        },
        "exoscale:index/sKSCluster:SKSCluster": {
            "description": "Provides an Exoscale [SKS][sks-doc] cluster resource. This can be used to create, modify, and delete SKS clusters.\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as exoscale from \"@pulumi/exoscale\";\n\nconst zone = \"de-fra-1\";\nconst prod = new exoscale.SKSCluster(\"prod\", {\n    zone: zone,\n    version: \"1.20.2\",\n    labels: {\n        env: \"prod\",\n    },\n});\nexport const sksEndpoint = prod.endpoint;\n```\n```python\nimport pulumi\nimport pulumi_exoscale as exoscale\n\nzone = \"de-fra-1\"\nprod = exoscale.SKSCluster(\"prod\",\n    zone=zone,\n    version=\"1.20.2\",\n    labels={\n        \"env\": \"prod\",\n    })\npulumi.export(\"sksEndpoint\", prod.endpoint)\n```\n```csharp\nusing Pulumi;\nusing Exoscale = Pulumi.Exoscale;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var zone = \"de-fra-1\";\n        var prod = new Exoscale.SKSCluster(\"prod\", new Exoscale.SKSClusterArgs\n        {\n            Zone = zone,\n            Version = \"1.20.2\",\n            Labels = \n            {\n                { \"env\", \"prod\" },\n            },\n        });\n        this.SksEndpoint = prod.Endpoint;\n    }\n\n    [Output(\"sksEndpoint\")]\n    public Output\u003cstring\u003e SksEndpoint { get; set; }\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-exoscale/sdk/go/exoscale\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tzone := \"de-fra-1\"\n\t\tprod, err := exoscale.NewSKSCluster(ctx, \"prod\", \u0026exoscale.SKSClusterArgs{\n\t\t\tZone:    pulumi.String(zone),\n\t\t\tVersion: pulumi.String(\"1.20.2\"),\n\t\t\tLabels: pulumi.StringMap{\n\t\t\t\t\"env\": pulumi.String(\"prod\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"sksEndpoint\", prod.Endpoint)\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nAn existing SKS cluster can be imported as a resource by specifying `ID@ZONE`console\n\n```sh\n $ pulumi import exoscale:index/sKSCluster:SKSCluster example eb556678-ec59-4be6-8c54-0406ae0f6da6@de-fra-1\n```\n\n [cni]https://www.cni.dev/ [exo-ccm]https://github.com/exoscale/exoscale-cloud-controller-manager [k8s-ms]https://github.com/kubernetes-sigs/metrics-server [r-sks_nodepool]sks_nodepool.html [sks-doc]https://community.exoscale.com/documentation/sks/ [zone]https://www.exoscale.com/datacenters/ ",
            "properties": {
                "addons": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "deprecationMessage": "This attribute has been replaced by `exoscale_ccm`/`metrics_server` attributes, it will be removed in a future release."
                },
                "autoUpgrade": {
                    "type": "boolean",
                    "description": "Enable automatic upgrading of the SKS cluster control plane Kubernetes version (default: `false`).\n"
                },
                "cni": {
                    "type": "string",
                    "description": "The Kubernetes [CNI][cni] plugin to be deployed in the SKS cluster control plane (default: `\"calico\"`). Can only be set during creation.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "The creation date of the SKS cluster.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the SKS cluster.\n"
                },
                "endpoint": {
                    "type": "string",
                    "description": "The Kubernetes public API endpoint of the SKS cluster.\n"
                },
                "exoscaleCcm": {
                    "type": "boolean",
                    "description": "Deploy the Exoscale [Cloud Controller Manager][exo-ccm] in the SKS cluster control plane (default: `true`). Can only be set during creation.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of key/value labels.\n"
                },
                "metricsServer": {
                    "type": "boolean",
                    "description": "Deploy the [Kubernetes Metrics Server][k8s-ms] in the SKS cluster control plane (default: `true`). Can only be set during creation.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the SKS cluster.\n"
                },
                "nodepools": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of [SKS Nodepools][r-sks_nodepool] (IDs) attached to the SKS cluster.\n"
                },
                "oidc": {
                    "$ref": "#/types/exoscale:index/SKSClusterOidc:SKSClusterOidc",
                    "description": "An OpenID Connect configuration to provide to the Kubernetes API server. Can only be set during creation. Structure is documented below.\n"
                },
                "serviceLevel": {
                    "type": "string",
                    "description": "The service level of the SKS cluster control plane (default: `\"pro\"`). Can only be set during creation.\n"
                },
                "state": {
                    "type": "string",
                    "description": "The current state of the SKS cluster.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The Kubernetes version of the SKS cluster control plane (default: latest version available from the API). Can only be set during creation.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The name of the [zone][zone] to deploy the SKS cluster into.\n"
                }
            },
            "required": [
                "addons",
                "createdAt",
                "endpoint",
                "name",
                "nodepools",
                "oidc",
                "state",
                "version",
                "zone"
            ],
            "inputProperties": {
                "addons": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "deprecationMessage": "This attribute has been replaced by `exoscale_ccm`/`metrics_server` attributes, it will be removed in a future release."
                },
                "autoUpgrade": {
                    "type": "boolean",
                    "description": "Enable automatic upgrading of the SKS cluster control plane Kubernetes version (default: `false`).\n"
                },
                "cni": {
                    "type": "string",
                    "description": "The Kubernetes [CNI][cni] plugin to be deployed in the SKS cluster control plane (default: `\"calico\"`). Can only be set during creation.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the SKS cluster.\n"
                },
                "exoscaleCcm": {
                    "type": "boolean",
                    "description": "Deploy the Exoscale [Cloud Controller Manager][exo-ccm] in the SKS cluster control plane (default: `true`). Can only be set during creation.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of key/value labels.\n"
                },
                "metricsServer": {
                    "type": "boolean",
                    "description": "Deploy the [Kubernetes Metrics Server][k8s-ms] in the SKS cluster control plane (default: `true`). Can only be set during creation.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the SKS cluster.\n"
                },
                "oidc": {
                    "$ref": "#/types/exoscale:index/SKSClusterOidc:SKSClusterOidc",
                    "description": "An OpenID Connect configuration to provide to the Kubernetes API server. Can only be set during creation. Structure is documented below.\n"
                },
                "serviceLevel": {
                    "type": "string",
                    "description": "The service level of the SKS cluster control plane (default: `\"pro\"`). Can only be set during creation.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The Kubernetes version of the SKS cluster control plane (default: latest version available from the API). Can only be set during creation.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The name of the [zone][zone] to deploy the SKS cluster into.\n"
                }
            },
            "requiredInputs": [
                "zone"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SKSCluster resources.\n",
                "properties": {
                    "addons": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "deprecationMessage": "This attribute has been replaced by `exoscale_ccm`/`metrics_server` attributes, it will be removed in a future release."
                    },
                    "autoUpgrade": {
                        "type": "boolean",
                        "description": "Enable automatic upgrading of the SKS cluster control plane Kubernetes version (default: `false`).\n"
                    },
                    "cni": {
                        "type": "string",
                        "description": "The Kubernetes [CNI][cni] plugin to be deployed in the SKS cluster control plane (default: `\"calico\"`). Can only be set during creation.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "The creation date of the SKS cluster.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the SKS cluster.\n"
                    },
                    "endpoint": {
                        "type": "string",
                        "description": "The Kubernetes public API endpoint of the SKS cluster.\n"
                    },
                    "exoscaleCcm": {
                        "type": "boolean",
                        "description": "Deploy the Exoscale [Cloud Controller Manager][exo-ccm] in the SKS cluster control plane (default: `true`). Can only be set during creation.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A map of key/value labels.\n"
                    },
                    "metricsServer": {
                        "type": "boolean",
                        "description": "Deploy the [Kubernetes Metrics Server][k8s-ms] in the SKS cluster control plane (default: `true`). Can only be set during creation.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the SKS cluster.\n"
                    },
                    "nodepools": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of [SKS Nodepools][r-sks_nodepool] (IDs) attached to the SKS cluster.\n"
                    },
                    "oidc": {
                        "$ref": "#/types/exoscale:index/SKSClusterOidc:SKSClusterOidc",
                        "description": "An OpenID Connect configuration to provide to the Kubernetes API server. Can only be set during creation. Structure is documented below.\n"
                    },
                    "serviceLevel": {
                        "type": "string",
                        "description": "The service level of the SKS cluster control plane (default: `\"pro\"`). Can only be set during creation.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "The current state of the SKS cluster.\n"
                    },
                    "version": {
                        "type": "string",
                        "description": "The Kubernetes version of the SKS cluster control plane (default: latest version available from the API). Can only be set during creation.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The name of the [zone][zone] to deploy the SKS cluster into.\n"
                    }
                },
                "type": "object"
            }
        },
        "exoscale:index/sKSNodePool:SKSNodePool": {
            "description": "Provides an Exoscale [SKS][sks-doc] Nodepool resource. This can be used to create, modify, and delete SKS Nodepools.\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as exoscale from \"@pulumi/exoscale\";\n\nconst zone = \"de-fra-1\";\nconst sksSecurityGroup = new exoscale.SecurityGroup(\"sksSecurityGroup\", {});\nconst sksSecurityGroupRules = new exoscale.SecurityGroupRules(\"sksSecurityGroupRules\", {\n    securityGroup: sksSecurityGroup.name,\n    ingresses: [\n        {\n            description: \"Calico traffic\",\n            protocol: \"UDP\",\n            ports: [\"4789\"],\n            userSecurityGroupLists: [sksSecurityGroup.name],\n        },\n        {\n            description: \"Nodes logs/exec\",\n            protocol: \"TCP\",\n            ports: [\"10250\"],\n            cidrLists: [\n                \"0.0.0.0/0\",\n                \"::/0\",\n            ],\n        },\n        {\n            description: \"NodePort services\",\n            protocol: \"TCP\",\n            cidrLists: [\n                \"0.0.0.0/0\",\n                \"::/0\",\n            ],\n            ports: [\"30000-32767\"],\n        },\n    ],\n});\nconst prod = new exoscale.SKSCluster(\"prod\", {\n    zone: zone,\n    version: \"1.20.3\",\n});\nconst ci_builders = new exoscale.SKSNodePool(\"ci-builders\", {\n    zone: zone,\n    clusterId: prod.id,\n    instanceType: \"standard.medium\",\n    size: 3,\n    securityGroupIds: [sksSecurityGroup.id],\n    labels: {\n        role: \"ci-builders\",\n    },\n    taints: {\n        ci: \"ci:NoSchedule\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_exoscale as exoscale\n\nzone = \"de-fra-1\"\nsks_security_group = exoscale.SecurityGroup(\"sksSecurityGroup\")\nsks_security_group_rules = exoscale.SecurityGroupRules(\"sksSecurityGroupRules\",\n    security_group=sks_security_group.name,\n    ingresses=[\n        exoscale.SecurityGroupRulesIngressArgs(\n            description=\"Calico traffic\",\n            protocol=\"UDP\",\n            ports=[\"4789\"],\n            user_security_group_lists=[sks_security_group.name],\n        ),\n        exoscale.SecurityGroupRulesIngressArgs(\n            description=\"Nodes logs/exec\",\n            protocol=\"TCP\",\n            ports=[\"10250\"],\n            cidr_lists=[\n                \"0.0.0.0/0\",\n                \"::/0\",\n            ],\n        ),\n        exoscale.SecurityGroupRulesIngressArgs(\n            description=\"NodePort services\",\n            protocol=\"TCP\",\n            cidr_lists=[\n                \"0.0.0.0/0\",\n                \"::/0\",\n            ],\n            ports=[\"30000-32767\"],\n        ),\n    ])\nprod = exoscale.SKSCluster(\"prod\",\n    zone=zone,\n    version=\"1.20.3\")\nci_builders = exoscale.SKSNodePool(\"ci-builders\",\n    zone=zone,\n    cluster_id=prod.id,\n    instance_type=\"standard.medium\",\n    size=3,\n    security_group_ids=[sks_security_group.id],\n    labels={\n        \"role\": \"ci-builders\",\n    },\n    taints={\n        \"ci\": \"ci:NoSchedule\",\n    })\n```\n```csharp\nusing Pulumi;\nusing Exoscale = Pulumi.Exoscale;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var zone = \"de-fra-1\";\n        var sksSecurityGroup = new Exoscale.SecurityGroup(\"sksSecurityGroup\", new Exoscale.SecurityGroupArgs\n        {\n        });\n        var sksSecurityGroupRules = new Exoscale.SecurityGroupRules(\"sksSecurityGroupRules\", new Exoscale.SecurityGroupRulesArgs\n        {\n            SecurityGroup = sksSecurityGroup.Name,\n            Ingresses = \n            {\n                new Exoscale.Inputs.SecurityGroupRulesIngressArgs\n                {\n                    Description = \"Calico traffic\",\n                    Protocol = \"UDP\",\n                    Ports = \n                    {\n                        \"4789\",\n                    },\n                    UserSecurityGroupLists = \n                    {\n                        sksSecurityGroup.Name,\n                    },\n                },\n                new Exoscale.Inputs.SecurityGroupRulesIngressArgs\n                {\n                    Description = \"Nodes logs/exec\",\n                    Protocol = \"TCP\",\n                    Ports = \n                    {\n                        \"10250\",\n                    },\n                    CidrLists = \n                    {\n                        \"0.0.0.0/0\",\n                        \"::/0\",\n                    },\n                },\n                new Exoscale.Inputs.SecurityGroupRulesIngressArgs\n                {\n                    Description = \"NodePort services\",\n                    Protocol = \"TCP\",\n                    CidrLists = \n                    {\n                        \"0.0.0.0/0\",\n                        \"::/0\",\n                    },\n                    Ports = \n                    {\n                        \"30000-32767\",\n                    },\n                },\n            },\n        });\n        var prod = new Exoscale.SKSCluster(\"prod\", new Exoscale.SKSClusterArgs\n        {\n            Zone = zone,\n            Version = \"1.20.3\",\n        });\n        var ci_builders = new Exoscale.SKSNodePool(\"ci-builders\", new Exoscale.SKSNodePoolArgs\n        {\n            Zone = zone,\n            ClusterId = prod.Id,\n            InstanceType = \"standard.medium\",\n            Size = 3,\n            SecurityGroupIds = \n            {\n                sksSecurityGroup.Id,\n            },\n            Labels = \n            {\n                { \"role\", \"ci-builders\" },\n            },\n            Taints = \n            {\n                { \"ci\", \"ci:NoSchedule\" },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-exoscale/sdk/go/exoscale\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tzone := \"de-fra-1\"\n\t\tsksSecurityGroup, err := exoscale.NewSecurityGroup(ctx, \"sksSecurityGroup\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = exoscale.NewSecurityGroupRules(ctx, \"sksSecurityGroupRules\", \u0026exoscale.SecurityGroupRulesArgs{\n\t\t\tSecurityGroup: sksSecurityGroup.Name,\n\t\t\tIngresses: SecurityGroupRulesIngressArray{\n\t\t\t\t\u0026SecurityGroupRulesIngressArgs{\n\t\t\t\t\tDescription: pulumi.String(\"Calico traffic\"),\n\t\t\t\t\tProtocol:    pulumi.String(\"UDP\"),\n\t\t\t\t\tPorts: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"4789\"),\n\t\t\t\t\t},\n\t\t\t\t\tUserSecurityGroupLists: pulumi.StringArray{\n\t\t\t\t\t\tsksSecurityGroup.Name,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\u0026SecurityGroupRulesIngressArgs{\n\t\t\t\t\tDescription: pulumi.String(\"Nodes logs/exec\"),\n\t\t\t\t\tProtocol:    pulumi.String(\"TCP\"),\n\t\t\t\t\tPorts: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"10250\"),\n\t\t\t\t\t},\n\t\t\t\t\tCidrLists: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"0.0.0.0/0\"),\n\t\t\t\t\t\tpulumi.String(\"::/0\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\u0026SecurityGroupRulesIngressArgs{\n\t\t\t\t\tDescription: pulumi.String(\"NodePort services\"),\n\t\t\t\t\tProtocol:    pulumi.String(\"TCP\"),\n\t\t\t\t\tCidrLists: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"0.0.0.0/0\"),\n\t\t\t\t\t\tpulumi.String(\"::/0\"),\n\t\t\t\t\t},\n\t\t\t\t\tPorts: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"30000-32767\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tprod, err := exoscale.NewSKSCluster(ctx, \"prod\", \u0026exoscale.SKSClusterArgs{\n\t\t\tZone:    pulumi.String(zone),\n\t\t\tVersion: pulumi.String(\"1.20.3\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = exoscale.NewSKSNodePool(ctx, \"ci-builders\", \u0026exoscale.SKSNodePoolArgs{\n\t\t\tZone:         pulumi.String(zone),\n\t\t\tClusterId:    prod.ID(),\n\t\t\tInstanceType: pulumi.String(\"standard.medium\"),\n\t\t\tSize:         pulumi.Int(3),\n\t\t\tSecurityGroupIds: pulumi.StringArray{\n\t\t\t\tsksSecurityGroup.ID(),\n\t\t\t},\n\t\t\tLabels: pulumi.StringMap{\n\t\t\t\t\"role\": pulumi.String(\"ci-builders\"),\n\t\t\t},\n\t\t\tTaints: pulumi.StringMap{\n\t\t\t\t\"ci\": pulumi.String(\"ci:NoSchedule\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nAn existing SKS Nodepool can be imported as a resource by `\u003cCLUSTER-ID\u003e/\u003cNODEPOOL-ID\u003e@\u003cZONE\u003e`console\n\n```sh\n $ pulumi import exoscale:index/sKSNodePool:SKSNodePool ci-builders eb556678-ec59-4be6-8c54-0406ae0f6da6/8c08b92a-e673-47c7-866e-dc009f620a82@de-fra-1\n```\n\n [k8s-taints]https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/ [r-sks_cluster]sks_cluster.html [sks-doc]https://community.exoscale.com/documentation/sks/ [type]https://www.exoscale.com/pricing/#/compute/ [zone]https://www.exoscale.com/datacenters/ ",
            "properties": {
                "antiAffinityGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of Anti-Affinity Groups (IDs) the Compute instances managed by the SKS Nodepool are member of.\n"
                },
                "clusterId": {
                    "type": "string",
                    "description": "The ID of the parent SKS cluster.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "The creation date of the SKS Nodepool.\n"
                },
                "deployTargetId": {
                    "type": "string",
                    "description": "A Deploy Target ID to deploy managed Compute instances to.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the SKS Nodepool.\n"
                },
                "diskSize": {
                    "type": "integer",
                    "description": "The disk size of the Compute instances managed by the SKS Nodepool (default: `50`).\n"
                },
                "instancePoolId": {
                    "type": "string",
                    "description": "The ID of the Instance Pool managed by the SKS Nodepool.\n"
                },
                "instancePrefix": {
                    "type": "string",
                    "description": "The string to add as prefix to managed Compute instances name (default `pool`).\n"
                },
                "instanceType": {
                    "type": "string",
                    "description": "The [type][type] of Compute instances managed by the SKS Nodepool (format: `FAMILY.SIZE`, e.g. `standard.medium`, `memory.huge`).\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of key/value labels.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the SKS Nodepool.\n"
                },
                "privateNetworkIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of Private Networks (IDs) to be attached to the Compute instances managed by the SKS Nodepool.\n"
                },
                "securityGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of Security Groups (IDs) the Compute instances managed by the SKS Nodepool are member of.\n"
                },
                "size": {
                    "type": "integer",
                    "description": "The number of Compute instances the SKS Nodepool manages.\n"
                },
                "state": {
                    "type": "string",
                    "description": "The current state of the SKS Nodepool.\n"
                },
                "taints": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of key/value [Kubernetes taints][k8s-taints] (value format: `VALUE:EFFECT`).\n"
                },
                "templateId": {
                    "type": "string",
                    "description": "The ID of the Compute instance template used by the SKS Nodepool members.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The Kubernetes version of the SKS Nodepool members.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The name of the [zone][zone] to deploy the SKS Nodepool into.\n"
                }
            },
            "required": [
                "clusterId",
                "createdAt",
                "instancePoolId",
                "instanceType",
                "name",
                "size",
                "state",
                "templateId",
                "version",
                "zone"
            ],
            "inputProperties": {
                "antiAffinityGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of Anti-Affinity Groups (IDs) the Compute instances managed by the SKS Nodepool are member of.\n"
                },
                "clusterId": {
                    "type": "string",
                    "description": "The ID of the parent SKS cluster.\n"
                },
                "deployTargetId": {
                    "type": "string",
                    "description": "A Deploy Target ID to deploy managed Compute instances to.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the SKS Nodepool.\n"
                },
                "diskSize": {
                    "type": "integer",
                    "description": "The disk size of the Compute instances managed by the SKS Nodepool (default: `50`).\n"
                },
                "instancePrefix": {
                    "type": "string",
                    "description": "The string to add as prefix to managed Compute instances name (default `pool`).\n"
                },
                "instanceType": {
                    "type": "string",
                    "description": "The [type][type] of Compute instances managed by the SKS Nodepool (format: `FAMILY.SIZE`, e.g. `standard.medium`, `memory.huge`).\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of key/value labels.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the SKS Nodepool.\n"
                },
                "privateNetworkIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of Private Networks (IDs) to be attached to the Compute instances managed by the SKS Nodepool.\n"
                },
                "securityGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of Security Groups (IDs) the Compute instances managed by the SKS Nodepool are member of.\n"
                },
                "size": {
                    "type": "integer",
                    "description": "The number of Compute instances the SKS Nodepool manages.\n"
                },
                "taints": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of key/value [Kubernetes taints][k8s-taints] (value format: `VALUE:EFFECT`).\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The name of the [zone][zone] to deploy the SKS Nodepool into.\n"
                }
            },
            "requiredInputs": [
                "clusterId",
                "instanceType",
                "size",
                "zone"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SKSNodePool resources.\n",
                "properties": {
                    "antiAffinityGroupIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of Anti-Affinity Groups (IDs) the Compute instances managed by the SKS Nodepool are member of.\n"
                    },
                    "clusterId": {
                        "type": "string",
                        "description": "The ID of the parent SKS cluster.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "The creation date of the SKS Nodepool.\n"
                    },
                    "deployTargetId": {
                        "type": "string",
                        "description": "A Deploy Target ID to deploy managed Compute instances to.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the SKS Nodepool.\n"
                    },
                    "diskSize": {
                        "type": "integer",
                        "description": "The disk size of the Compute instances managed by the SKS Nodepool (default: `50`).\n"
                    },
                    "instancePoolId": {
                        "type": "string",
                        "description": "The ID of the Instance Pool managed by the SKS Nodepool.\n"
                    },
                    "instancePrefix": {
                        "type": "string",
                        "description": "The string to add as prefix to managed Compute instances name (default `pool`).\n"
                    },
                    "instanceType": {
                        "type": "string",
                        "description": "The [type][type] of Compute instances managed by the SKS Nodepool (format: `FAMILY.SIZE`, e.g. `standard.medium`, `memory.huge`).\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A map of key/value labels.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the SKS Nodepool.\n"
                    },
                    "privateNetworkIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of Private Networks (IDs) to be attached to the Compute instances managed by the SKS Nodepool.\n"
                    },
                    "securityGroupIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of Security Groups (IDs) the Compute instances managed by the SKS Nodepool are member of.\n"
                    },
                    "size": {
                        "type": "integer",
                        "description": "The number of Compute instances the SKS Nodepool manages.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "The current state of the SKS Nodepool.\n"
                    },
                    "taints": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A map of key/value [Kubernetes taints][k8s-taints] (value format: `VALUE:EFFECT`).\n"
                    },
                    "templateId": {
                        "type": "string",
                        "description": "The ID of the Compute instance template used by the SKS Nodepool members.\n"
                    },
                    "version": {
                        "type": "string",
                        "description": "The Kubernetes version of the SKS Nodepool members.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The name of the [zone][zone] to deploy the SKS Nodepool into.\n"
                    }
                },
                "type": "object"
            }
        },
        "exoscale:index/sSHKey:SSHKey": {
            "description": "Provides an Exoscale [SSH Key][ssh-keys-doc] resource. This can be used to create and delete SSH Keys.\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as exoscale from \"@pulumi/exoscale\";\n\nconst example = new exoscale.SSHKey(\"example\", {\n    publicKey: \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDGRY...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_exoscale as exoscale\n\nexample = exoscale.SSHKey(\"example\", public_key=\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDGRY...\")\n```\n```csharp\nusing Pulumi;\nusing Exoscale = Pulumi.Exoscale;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = new Exoscale.SSHKey(\"example\", new Exoscale.SSHKeyArgs\n        {\n            PublicKey = \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDGRY...\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-exoscale/sdk/go/exoscale\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := exoscale.NewSSHKey(ctx, \"example\", \u0026exoscale.SSHKeyArgs{\n\t\t\tPublicKey: pulumi.String(\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDGRY...\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nAn existing SSH Key can be imported as a resource by nameconsole\n\n```sh\n $ pulumi import exoscale:index/sSHKey:SSHKey my-key my-key\n```\n\n [ssh-keys-doc]https://community.exoscale.com/documentation/compute/ssh-keys/ ",
            "properties": {
                "fingerprint": {
                    "type": "string",
                    "description": "The unique identifier of the SSH Key.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the SSH Key.\n"
                },
                "publicKey": {
                    "type": "string",
                    "description": "A SSH public key that will be copied into the Compute instances at **first** boot.\n"
                }
            },
            "required": [
                "fingerprint",
                "name",
                "publicKey"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The name of the SSH Key.\n"
                },
                "publicKey": {
                    "type": "string",
                    "description": "A SSH public key that will be copied into the Compute instances at **first** boot.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SSHKey resources.\n",
                "properties": {
                    "fingerprint": {
                        "type": "string",
                        "description": "The unique identifier of the SSH Key.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the SSH Key.\n"
                    },
                    "publicKey": {
                        "type": "string",
                        "description": "A SSH public key that will be copied into the Compute instances at **first** boot.\n"
                    }
                },
                "type": "object"
            }
        },
        "exoscale:index/sSHKeyPair:SSHKeyPair": {
            "description": "Provides an Exoscale [SSH Keypair][ssh-keypairs-doc] resource. This can be used to create and delete SSH Keypairs.\n\n!\u003e **WARNING:** This resource is deprecated and will be removed in the next major version.\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as exoscale from \"@pulumi/exoscale\";\n\nconst admin = new exoscale.SSHKeyPair(\"admin\", {\n    publicKey: \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDGRY...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_exoscale as exoscale\n\nadmin = exoscale.SSHKeyPair(\"admin\", public_key=\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDGRY...\")\n```\n```csharp\nusing Pulumi;\nusing Exoscale = Pulumi.Exoscale;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var admin = new Exoscale.SSHKeyPair(\"admin\", new Exoscale.SSHKeyPairArgs\n        {\n            PublicKey = \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDGRY...\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-exoscale/sdk/go/exoscale\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := exoscale.NewSSHKeyPair(ctx, \"admin\", \u0026exoscale.SSHKeyPairArgs{\n\t\t\tPublicKey: pulumi.String(\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDGRY...\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nAn existing SSH Keypair can be imported as a resource by nameconsole\n\n```sh\n $ pulumi import exoscale:index/sSHKeyPair:SSHKeyPair mykey my-key\n```\n\n [ssh-keypairs-doc]https://community.exoscale.com/documentation/compute/ssh-keypairs/ ",
            "properties": {
                "fingerprint": {
                    "type": "string",
                    "description": "The unique identifier of the SSH Keypair.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the SSH Keypair.\n"
                },
                "privateKey": {
                    "type": "string",
                    "description": "The SSH private key generated if no public key was provided.\n"
                },
                "publicKey": {
                    "type": "string",
                    "description": "A SSH public key that will be copied into the instances at **first** boot. If not provided, a SSH keypair is generated and the is saved locally (see the `private_key` attribute).\n"
                }
            },
            "required": [
                "fingerprint",
                "name",
                "privateKey"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The name of the SSH Keypair.\n"
                },
                "publicKey": {
                    "type": "string",
                    "description": "A SSH public key that will be copied into the instances at **first** boot. If not provided, a SSH keypair is generated and the is saved locally (see the `private_key` attribute).\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SSHKeyPair resources.\n",
                "properties": {
                    "fingerprint": {
                        "type": "string",
                        "description": "The unique identifier of the SSH Keypair.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the SSH Keypair.\n"
                    },
                    "privateKey": {
                        "type": "string",
                        "description": "The SSH private key generated if no public key was provided.\n"
                    },
                    "publicKey": {
                        "type": "string",
                        "description": "A SSH public key that will be copied into the instances at **first** boot. If not provided, a SSH keypair is generated and the is saved locally (see the `private_key` attribute).\n"
                    }
                },
                "type": "object"
            }
        },
        "exoscale:index/secondaryIPAddress:SecondaryIPAddress": {
            "description": "Provides a resource for assigning an existing Exoscale [Elastic IP][r-ipaddress] to a [Compute instance][r-compute].\n\n\u003e **NOTE:** The network interfaces of the Compute instance itself still have to be configured accordingly (unless using a *managed* Elastic IP).\n\n!\u003e **WARNING:** This resource is deprecated and will be removed in the next major version.\n\n\n## Import\n\nThis resource is automatically imported when importing an `exoscale_compute` resource. [r-compute]compute.html [r-ipaddress]ipaddress.html ",
            "properties": {
                "computeId": {
                    "type": "string",
                    "description": "The ID of the [Compute instance][r-compute].\n"
                },
                "ipAddress": {
                    "type": "string",
                    "description": "The [Elastic IP][r-ipaddress] address to assign.\n"
                },
                "networkId": {
                    "type": "string",
                    "description": "The ID of the Network the Compute instance NIC is attached to.\n"
                },
                "nicId": {
                    "type": "string",
                    "description": "The ID of the NIC.\n"
                }
            },
            "required": [
                "computeId",
                "ipAddress",
                "networkId",
                "nicId"
            ],
            "inputProperties": {
                "computeId": {
                    "type": "string",
                    "description": "The ID of the [Compute instance][r-compute].\n"
                },
                "ipAddress": {
                    "type": "string",
                    "description": "The [Elastic IP][r-ipaddress] address to assign.\n"
                }
            },
            "requiredInputs": [
                "computeId",
                "ipAddress"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SecondaryIPAddress resources.\n",
                "properties": {
                    "computeId": {
                        "type": "string",
                        "description": "The ID of the [Compute instance][r-compute].\n"
                    },
                    "ipAddress": {
                        "type": "string",
                        "description": "The [Elastic IP][r-ipaddress] address to assign.\n"
                    },
                    "networkId": {
                        "type": "string",
                        "description": "The ID of the Network the Compute instance NIC is attached to.\n"
                    },
                    "nicId": {
                        "type": "string",
                        "description": "The ID of the NIC.\n"
                    }
                },
                "type": "object"
            }
        },
        "exoscale:index/securityGroup:SecurityGroup": {
            "description": "Provides an Exoscale [Security Group][sg-doc] resource. This can be used to create and delete Security Groups.\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as exoscale from \"@pulumi/exoscale\";\n\nconst web = new exoscale.SecurityGroup(\"web\", {\n    description: \"Webservers\",\n    externalSources: [\n        \"1.2.3.4/32\",\n        \"5.6.7.8/32\",\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_exoscale as exoscale\n\nweb = exoscale.SecurityGroup(\"web\",\n    description=\"Webservers\",\n    external_sources=[\n        \"1.2.3.4/32\",\n        \"5.6.7.8/32\",\n    ])\n```\n```csharp\nusing Pulumi;\nusing Exoscale = Pulumi.Exoscale;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var web = new Exoscale.SecurityGroup(\"web\", new Exoscale.SecurityGroupArgs\n        {\n            Description = \"Webservers\",\n            ExternalSources = \n            {\n                \"1.2.3.4/32\",\n                \"5.6.7.8/32\",\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-exoscale/sdk/go/exoscale\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := exoscale.NewSecurityGroup(ctx, \"web\", \u0026exoscale.SecurityGroupArgs{\n\t\t\tDescription: pulumi.String(\"Webservers\"),\n\t\t\tExternalSources: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"1.2.3.4/32\"),\n\t\t\t\tpulumi.String(\"5.6.7.8/32\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nAn existing Security Group can be imported as a resource by its IDconsole\n\n```sh\n $ pulumi import exoscale:index/securityGroup:SecurityGroup http eb556678-ec59-4be6-8c54-0406ae0f6da6\n```\n\n [cidr]https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing#CIDR_notatio [r-security_group_rule]security_group_rule.html [sg-doc]https://community.exoscale.com/documentation/compute/security-groups/ ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "A free-form text describing the Security Group purpose.\n"
                },
                "externalSources": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of external network sources in [CIDR][cidr] notation.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Security Group.\n"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "A free-form text describing the Security Group purpose.\n"
                },
                "externalSources": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of external network sources in [CIDR][cidr] notation.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Security Group.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SecurityGroup resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "A free-form text describing the Security Group purpose.\n"
                    },
                    "externalSources": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of external network sources in [CIDR][cidr] notation.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Security Group.\n"
                    }
                },
                "type": "object"
            }
        },
        "exoscale:index/securityGroupRule:SecurityGroupRule": {
            "description": "Provides an Exoscale [Security Group][r-security_group] rule resource. This can be used to create and delete Security Group rules.\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as exoscale from \"@pulumi/exoscale\";\n\nconst webservers = new exoscale.SecurityGroup(\"webservers\", {});\n// ...\nconst http = new exoscale.SecurityGroupRule(\"http\", {\n    securityGroupId: webservers.id,\n    type: \"INGRESS\",\n    protocol: \"TCP\",\n    cidr: \"0.0.0.0/0\",\n    startPort: 80,\n    endPort: 80,\n});\n```\n```python\nimport pulumi\nimport pulumi_exoscale as exoscale\n\nwebservers = exoscale.SecurityGroup(\"webservers\")\n# ...\nhttp = exoscale.SecurityGroupRule(\"http\",\n    security_group_id=webservers.id,\n    type=\"INGRESS\",\n    protocol=\"TCP\",\n    cidr=\"0.0.0.0/0\",\n    start_port=80,\n    end_port=80)\n```\n```csharp\nusing Pulumi;\nusing Exoscale = Pulumi.Exoscale;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var webservers = new Exoscale.SecurityGroup(\"webservers\", new Exoscale.SecurityGroupArgs\n        {\n        });\n        // ...\n        var http = new Exoscale.SecurityGroupRule(\"http\", new Exoscale.SecurityGroupRuleArgs\n        {\n            SecurityGroupId = webservers.Id,\n            Type = \"INGRESS\",\n            Protocol = \"TCP\",\n            Cidr = \"0.0.0.0/0\",\n            StartPort = 80,\n            EndPort = 80,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-exoscale/sdk/go/exoscale\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\twebservers, err := exoscale.NewSecurityGroup(ctx, \"webservers\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = exoscale.NewSecurityGroupRule(ctx, \"http\", \u0026exoscale.SecurityGroupRuleArgs{\n\t\t\tSecurityGroupId: webservers.ID(),\n\t\t\tType:            pulumi.String(\"INGRESS\"),\n\t\t\tProtocol:        pulumi.String(\"TCP\"),\n\t\t\tCidr:            pulumi.String(\"0.0.0.0/0\"),\n\t\t\tStartPort:       pulumi.Int(80),\n\t\t\tEndPort:         pulumi.Int(80),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nAn existing Security Group rule can be imported as a resource by `\u003cSECURITY-GROUP-ID\u003e/\u003cSECURITY-GROUP-RULE-ID\u003e`console\n\n```sh\n $ pulumi import exoscale:index/securityGroupRule:SecurityGroupRule http eb556678-ec59-4be6-8c54-0406ae0f6da6/846831cb-a0fc-454b-9abd-cb526559fcf9\n```\n\n [cidr]https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing#CIDR_notation [icmp]https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol#Control_messages [r-security_group]security_group.html ",
            "properties": {
                "cidr": {
                    "type": "string",
                    "description": "A source (for ingress)/destination (for egress) IP subnet (in [CIDR notation][cidr]) to match (conflicts with `user_security_group`/`security_group_id`).\n"
                },
                "description": {
                    "type": "string",
                    "description": "A free-form text describing the Security Group rule purpose.\n* `start_port`/`end_port` - A `TCP`/`UDP` port range to match.\n* `icmp_type`/`icmp_code` - An ICMP/ICMPv6 [type/code][icmp] to match.\n"
                },
                "endPort": {
                    "type": "integer"
                },
                "icmpCode": {
                    "type": "integer"
                },
                "icmpType": {
                    "type": "integer"
                },
                "protocol": {
                    "type": "string",
                    "description": "The network protocol to match. Supported values are: `TCP`, `UDP`, `ICMP`, `ICMPv6`, `AH`, `ESP`, `GRE`, `IPIP` and `ALL`.\n"
                },
                "securityGroup": {
                    "type": "string",
                    "description": "The Security Group name the rule applies to.\n"
                },
                "securityGroupId": {
                    "type": "string",
                    "description": "The Security Group ID the rule applies to.\n"
                },
                "startPort": {
                    "type": "integer"
                },
                "type": {
                    "type": "string",
                    "description": "The traffic direction to match (`INGRESS` or `EGRESS`).\n"
                },
                "userSecurityGroup": {
                    "type": "string",
                    "description": "A source (for ingress)/destination (for egress) Security Group name to match (conflicts with `cidr`/`security_group_id`).\n"
                },
                "userSecurityGroupId": {
                    "type": "string",
                    "description": "A source (for ingress)/destination (for egress) Security Group ID to match (conflicts with `cidr`/`security_group)`).\n"
                }
            },
            "required": [
                "securityGroup",
                "securityGroupId",
                "type",
                "userSecurityGroup"
            ],
            "inputProperties": {
                "cidr": {
                    "type": "string",
                    "description": "A source (for ingress)/destination (for egress) IP subnet (in [CIDR notation][cidr]) to match (conflicts with `user_security_group`/`security_group_id`).\n"
                },
                "description": {
                    "type": "string",
                    "description": "A free-form text describing the Security Group rule purpose.\n* `start_port`/`end_port` - A `TCP`/`UDP` port range to match.\n* `icmp_type`/`icmp_code` - An ICMP/ICMPv6 [type/code][icmp] to match.\n"
                },
                "endPort": {
                    "type": "integer"
                },
                "icmpCode": {
                    "type": "integer"
                },
                "icmpType": {
                    "type": "integer"
                },
                "protocol": {
                    "type": "string",
                    "description": "The network protocol to match. Supported values are: `TCP`, `UDP`, `ICMP`, `ICMPv6`, `AH`, `ESP`, `GRE`, `IPIP` and `ALL`.\n"
                },
                "securityGroup": {
                    "type": "string",
                    "description": "The Security Group name the rule applies to.\n"
                },
                "securityGroupId": {
                    "type": "string",
                    "description": "The Security Group ID the rule applies to.\n"
                },
                "startPort": {
                    "type": "integer"
                },
                "type": {
                    "type": "string",
                    "description": "The traffic direction to match (`INGRESS` or `EGRESS`).\n"
                },
                "userSecurityGroup": {
                    "type": "string",
                    "description": "A source (for ingress)/destination (for egress) Security Group name to match (conflicts with `cidr`/`security_group_id`).\n"
                },
                "userSecurityGroupId": {
                    "type": "string",
                    "description": "A source (for ingress)/destination (for egress) Security Group ID to match (conflicts with `cidr`/`security_group)`).\n"
                }
            },
            "requiredInputs": [
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SecurityGroupRule resources.\n",
                "properties": {
                    "cidr": {
                        "type": "string",
                        "description": "A source (for ingress)/destination (for egress) IP subnet (in [CIDR notation][cidr]) to match (conflicts with `user_security_group`/`security_group_id`).\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A free-form text describing the Security Group rule purpose.\n* `start_port`/`end_port` - A `TCP`/`UDP` port range to match.\n* `icmp_type`/`icmp_code` - An ICMP/ICMPv6 [type/code][icmp] to match.\n"
                    },
                    "endPort": {
                        "type": "integer"
                    },
                    "icmpCode": {
                        "type": "integer"
                    },
                    "icmpType": {
                        "type": "integer"
                    },
                    "protocol": {
                        "type": "string",
                        "description": "The network protocol to match. Supported values are: `TCP`, `UDP`, `ICMP`, `ICMPv6`, `AH`, `ESP`, `GRE`, `IPIP` and `ALL`.\n"
                    },
                    "securityGroup": {
                        "type": "string",
                        "description": "The Security Group name the rule applies to.\n"
                    },
                    "securityGroupId": {
                        "type": "string",
                        "description": "The Security Group ID the rule applies to.\n"
                    },
                    "startPort": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "string",
                        "description": "The traffic direction to match (`INGRESS` or `EGRESS`).\n"
                    },
                    "userSecurityGroup": {
                        "type": "string",
                        "description": "A source (for ingress)/destination (for egress) Security Group name to match (conflicts with `cidr`/`security_group_id`).\n"
                    },
                    "userSecurityGroupId": {
                        "type": "string",
                        "description": "A source (for ingress)/destination (for egress) Security Group ID to match (conflicts with `cidr`/`security_group)`).\n"
                    }
                },
                "type": "object"
            }
        },
        "exoscale:index/securityGroupRules:SecurityGroupRules": {
            "description": "Provides a resource for assigning multiple rules to an existing Exoscale [Security Group][r-security_group].\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as exoscale from \"@pulumi/exoscale\";\n\nconst webservers = new exoscale.SecurityGroup(\"webservers\", {});\n// ...\nconst admin = new exoscale.SecurityGroupRules(\"admin\", {\n    securityGroup: webservers.name,\n    ingresses: [\n        {\n            protocol: \"ICMP\",\n            icmpType: 8,\n            userSecurityGroupLists: [\"bastion\"],\n        },\n        {\n            protocol: \"TCP\",\n            ports: [\"22\"],\n            userSecurityGroupLists: [\"bastion\"],\n        },\n    ],\n});\nconst web = new exoscale.SecurityGroupRules(\"web\", {\n    securityGroupId: webservers.id,\n    ingresses: [{\n        protocol: \"TCP\",\n        ports: [\n            \"80\",\n            \"443\",\n        ],\n        cidrLists: [\n            \"0.0.0.0/0\",\n            \"::/0\",\n        ],\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_exoscale as exoscale\n\nwebservers = exoscale.SecurityGroup(\"webservers\")\n# ...\nadmin = exoscale.SecurityGroupRules(\"admin\",\n    security_group=webservers.name,\n    ingresses=[\n        exoscale.SecurityGroupRulesIngressArgs(\n            protocol=\"ICMP\",\n            icmp_type=8,\n            user_security_group_lists=[\"bastion\"],\n        ),\n        exoscale.SecurityGroupRulesIngressArgs(\n            protocol=\"TCP\",\n            ports=[\"22\"],\n            user_security_group_lists=[\"bastion\"],\n        ),\n    ])\nweb = exoscale.SecurityGroupRules(\"web\",\n    security_group_id=webservers.id,\n    ingresses=[exoscale.SecurityGroupRulesIngressArgs(\n        protocol=\"TCP\",\n        ports=[\n            \"80\",\n            \"443\",\n        ],\n        cidr_lists=[\n            \"0.0.0.0/0\",\n            \"::/0\",\n        ],\n    )])\n```\n```csharp\nusing Pulumi;\nusing Exoscale = Pulumi.Exoscale;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var webservers = new Exoscale.SecurityGroup(\"webservers\", new Exoscale.SecurityGroupArgs\n        {\n        });\n        // ...\n        var admin = new Exoscale.SecurityGroupRules(\"admin\", new Exoscale.SecurityGroupRulesArgs\n        {\n            SecurityGroup = webservers.Name,\n            Ingresses = \n            {\n                new Exoscale.Inputs.SecurityGroupRulesIngressArgs\n                {\n                    Protocol = \"ICMP\",\n                    IcmpType = 8,\n                    UserSecurityGroupLists = \n                    {\n                        \"bastion\",\n                    },\n                },\n                new Exoscale.Inputs.SecurityGroupRulesIngressArgs\n                {\n                    Protocol = \"TCP\",\n                    Ports = \n                    {\n                        \"22\",\n                    },\n                    UserSecurityGroupLists = \n                    {\n                        \"bastion\",\n                    },\n                },\n            },\n        });\n        var web = new Exoscale.SecurityGroupRules(\"web\", new Exoscale.SecurityGroupRulesArgs\n        {\n            SecurityGroupId = webservers.Id,\n            Ingresses = \n            {\n                new Exoscale.Inputs.SecurityGroupRulesIngressArgs\n                {\n                    Protocol = \"TCP\",\n                    Ports = \n                    {\n                        \"80\",\n                        \"443\",\n                    },\n                    CidrLists = \n                    {\n                        \"0.0.0.0/0\",\n                        \"::/0\",\n                    },\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-exoscale/sdk/go/exoscale\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\twebservers, err := exoscale.NewSecurityGroup(ctx, \"webservers\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = exoscale.NewSecurityGroupRules(ctx, \"admin\", \u0026exoscale.SecurityGroupRulesArgs{\n\t\t\tSecurityGroup: webservers.Name,\n\t\t\tIngresses: SecurityGroupRulesIngressArray{\n\t\t\t\t\u0026SecurityGroupRulesIngressArgs{\n\t\t\t\t\tProtocol: pulumi.String(\"ICMP\"),\n\t\t\t\t\tIcmpType: pulumi.Int(8),\n\t\t\t\t\tUserSecurityGroupLists: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"bastion\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\u0026SecurityGroupRulesIngressArgs{\n\t\t\t\t\tProtocol: pulumi.String(\"TCP\"),\n\t\t\t\t\tPorts: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"22\"),\n\t\t\t\t\t},\n\t\t\t\t\tUserSecurityGroupLists: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"bastion\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = exoscale.NewSecurityGroupRules(ctx, \"web\", \u0026exoscale.SecurityGroupRulesArgs{\n\t\t\tSecurityGroupId: webservers.ID(),\n\t\t\tIngresses: SecurityGroupRulesIngressArray{\n\t\t\t\t\u0026SecurityGroupRulesIngressArgs{\n\t\t\t\t\tProtocol: pulumi.String(\"TCP\"),\n\t\t\t\t\tPorts: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"80\"),\n\t\t\t\t\t\tpulumi.String(\"443\"),\n\t\t\t\t\t},\n\t\t\t\t\tCidrLists: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"0.0.0.0/0\"),\n\t\t\t\t\t\tpulumi.String(\"::/0\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "egresses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/exoscale:index/SecurityGroupRulesEgress:SecurityGroupRulesEgress"
                    }
                },
                "ingresses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/exoscale:index/SecurityGroupRulesIngress:SecurityGroupRulesIngress"
                    }
                },
                "securityGroup": {
                    "type": "string",
                    "description": "The Security Group name the rules apply to (conflicts with `security_group_id`).\n"
                },
                "securityGroupId": {
                    "type": "string",
                    "description": "The Security Group ID the rules apply to (conficts with `security_group)`.\n* `ingress`/`egress` - A Security Group rule definition.\n"
                }
            },
            "required": [
                "securityGroup",
                "securityGroupId"
            ],
            "inputProperties": {
                "egresses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/exoscale:index/SecurityGroupRulesEgress:SecurityGroupRulesEgress"
                    }
                },
                "ingresses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/exoscale:index/SecurityGroupRulesIngress:SecurityGroupRulesIngress"
                    }
                },
                "securityGroup": {
                    "type": "string",
                    "description": "The Security Group name the rules apply to (conflicts with `security_group_id`).\n"
                },
                "securityGroupId": {
                    "type": "string",
                    "description": "The Security Group ID the rules apply to (conficts with `security_group)`.\n* `ingress`/`egress` - A Security Group rule definition.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SecurityGroupRules resources.\n",
                "properties": {
                    "egresses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/exoscale:index/SecurityGroupRulesEgress:SecurityGroupRulesEgress"
                        }
                    },
                    "ingresses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/exoscale:index/SecurityGroupRulesIngress:SecurityGroupRulesIngress"
                        }
                    },
                    "securityGroup": {
                        "type": "string",
                        "description": "The Security Group name the rules apply to (conflicts with `security_group_id`).\n"
                    },
                    "securityGroupId": {
                        "type": "string",
                        "description": "The Security Group ID the rules apply to (conficts with `security_group)`.\n* `ingress`/`egress` - A Security Group rule definition.\n"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "exoscale:index/getAffinity:getAffinity": {
            "description": "Provides information on an [Anti-Affinity Group][aag-doc] for use in other resources such as a [`exoscale.Compute`][r-compute] resource.\n\n!\u003e **WARNING:** This data source is deprecated and will be removed in the next major version.\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as exoscale from \"@pulumi/exoscale\";\n\nconst zone = \"ch-gva-2\";\nconst web = exoscale.getAffinity({\n    name: \"web\",\n});\nconst ubuntu = exoscale.getComputeTemplate({\n    zone: zone,\n    name: \"Linux Ubuntu 20.04 LTS 64-bit\",\n});\nconst myServer = new exoscale.Compute(\"myServer\", {\n    zone: zone,\n    templateId: ubuntu.then(ubuntu =\u003e ubuntu.id),\n    diskSize: 20,\n    affinityGroupIds: [web.then(web =\u003e web.id)],\n});\n```\n```python\nimport pulumi\nimport pulumi_exoscale as exoscale\n\nzone = \"ch-gva-2\"\nweb = exoscale.get_affinity(name=\"web\")\nubuntu = exoscale.get_compute_template(zone=zone,\n    name=\"Linux Ubuntu 20.04 LTS 64-bit\")\nmy_server = exoscale.Compute(\"myServer\",\n    zone=zone,\n    template_id=ubuntu.id,\n    disk_size=20,\n    affinity_group_ids=[web.id])\n```\n```csharp\nusing Pulumi;\nusing Exoscale = Pulumi.Exoscale;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var zone = \"ch-gva-2\";\n        var web = Output.Create(Exoscale.GetAffinity.InvokeAsync(new Exoscale.GetAffinityArgs\n        {\n            Name = \"web\",\n        }));\n        var ubuntu = Output.Create(Exoscale.GetComputeTemplate.InvokeAsync(new Exoscale.GetComputeTemplateArgs\n        {\n            Zone = zone,\n            Name = \"Linux Ubuntu 20.04 LTS 64-bit\",\n        }));\n        var myServer = new Exoscale.Compute(\"myServer\", new Exoscale.ComputeArgs\n        {\n            Zone = zone,\n            TemplateId = ubuntu.Apply(ubuntu =\u003e ubuntu.Id),\n            DiskSize = 20,\n            AffinityGroupIds = \n            {\n                web.Apply(web =\u003e web.Id),\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-exoscale/sdk/go/exoscale\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tzone := \"ch-gva-2\"\n\t\topt0 := \"web\"\n\t\tweb, err := exoscale.LookupAffinity(ctx, \u0026GetAffinityArgs{\n\t\t\tName: \u0026opt0,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\topt1 := \"Linux Ubuntu 20.04 LTS 64-bit\"\n\t\tubuntu, err := exoscale.GetComputeTemplate(ctx, \u0026GetComputeTemplateArgs{\n\t\t\tZone: zone,\n\t\t\tName: \u0026opt1,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = exoscale.NewCompute(ctx, \"myServer\", \u0026exoscale.ComputeArgs{\n\t\t\tZone:       pulumi.String(zone),\n\t\t\tTemplateId: pulumi.String(ubuntu.Id),\n\t\t\tDiskSize:   pulumi.Int(20),\n\t\t\tAffinityGroupIds: pulumi.StringArray{\n\t\t\t\tpulumi.String(web.Id),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getAffinity.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of the Anti-Affinity Group (conflicts with `name`)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Anti-Affinity Group (conflicts with `id`)\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getAffinity.\n",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "exoscale:index/getAntiAffinityGroup:getAntiAffinityGroup": {
            "description": "Provides information on an [Anti-Affinity Group][aag-doc] for use in other resources such as a [`exoscale.Compute`][r-compute] resource.\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as exoscale from \"@pulumi/exoscale\";\n\nconst zone = \"ch-gva-2\";\nconst web = exoscale.getAntiAffinityGroup({\n    name: \"web\",\n});\nconst ubuntu = exoscale.getComputeTemplate({\n    zone: zone,\n    name: \"Linux Ubuntu 20.04 LTS 64-bit\",\n});\nconst my_server = new exoscale.ComputeInstance(\"my-server\", {\n    zone: zone,\n    type: \"standard.medium\",\n    templateId: ubuntu.then(ubuntu =\u003e ubuntu.id),\n    diskSize: 20,\n    antiAffinityGroupIds: [web.then(web =\u003e web.id)],\n});\n```\n```python\nimport pulumi\nimport pulumi_exoscale as exoscale\n\nzone = \"ch-gva-2\"\nweb = exoscale.get_anti_affinity_group(name=\"web\")\nubuntu = exoscale.get_compute_template(zone=zone,\n    name=\"Linux Ubuntu 20.04 LTS 64-bit\")\nmy_server = exoscale.ComputeInstance(\"my-server\",\n    zone=zone,\n    type=\"standard.medium\",\n    template_id=ubuntu.id,\n    disk_size=20,\n    anti_affinity_group_ids=[web.id])\n```\n```csharp\nusing Pulumi;\nusing Exoscale = Pulumi.Exoscale;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var zone = \"ch-gva-2\";\n        var web = Output.Create(Exoscale.GetAntiAffinityGroup.InvokeAsync(new Exoscale.GetAntiAffinityGroupArgs\n        {\n            Name = \"web\",\n        }));\n        var ubuntu = Output.Create(Exoscale.GetComputeTemplate.InvokeAsync(new Exoscale.GetComputeTemplateArgs\n        {\n            Zone = zone,\n            Name = \"Linux Ubuntu 20.04 LTS 64-bit\",\n        }));\n        var my_server = new Exoscale.ComputeInstance(\"my-server\", new Exoscale.ComputeInstanceArgs\n        {\n            Zone = zone,\n            Type = \"standard.medium\",\n            TemplateId = ubuntu.Apply(ubuntu =\u003e ubuntu.Id),\n            DiskSize = 20,\n            AntiAffinityGroupIds = \n            {\n                web.Apply(web =\u003e web.Id),\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-exoscale/sdk/go/exoscale\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tzone := \"ch-gva-2\"\n\t\topt0 := \"web\"\n\t\tweb, err := exoscale.LookupAntiAffinityGroup(ctx, \u0026GetAntiAffinityGroupArgs{\n\t\t\tName: \u0026opt0,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\topt1 := \"Linux Ubuntu 20.04 LTS 64-bit\"\n\t\tubuntu, err := exoscale.GetComputeTemplate(ctx, \u0026GetComputeTemplateArgs{\n\t\t\tZone: zone,\n\t\t\tName: \u0026opt1,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = exoscale.NewComputeInstance(ctx, \"my-server\", \u0026exoscale.ComputeInstanceArgs{\n\t\t\tZone:       pulumi.String(zone),\n\t\t\tType:       pulumi.String(\"standard.medium\"),\n\t\t\tTemplateId: pulumi.String(ubuntu.Id),\n\t\t\tDiskSize:   pulumi.Int(20),\n\t\t\tAntiAffinityGroupIds: pulumi.StringArray{\n\t\t\t\tpulumi.String(web.Id),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getAntiAffinityGroup.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of the Anti-Affinity Group (conflicts with `name`).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Anti-Affinity Group (conflicts with `id`).\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getAntiAffinityGroup.\n",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "instances": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of Compute instance IDs belonging to the Anti-Affinity Group.\n"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "instances"
                ]
            }
        },
        "exoscale:index/getCompute:getCompute": {
            "description": "Provides information on an [Exoscale Compute instance][compute-doc].\n\n!\u003e **WARNING:** This data source is deprecated and will be removed in the next major version.\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as exoscale from \"@pulumi/exoscale\";\n\nconst myServer = pulumi.output(exoscale.getCompute({\n    hostname: \"my server\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_exoscale as exoscale\n\nmy_server = exoscale.get_compute(hostname=\"my server\")\n```\n```csharp\nusing Pulumi;\nusing Exoscale = Pulumi.Exoscale;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var myServer = Output.Create(Exoscale.GetCompute.InvokeAsync(new Exoscale.GetComputeArgs\n        {\n            Hostname = \"my server\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-exoscale/sdk/go/exoscale\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\topt0 := \"my server\"\n\t\t_, err := exoscale.LookupCompute(ctx, \u0026GetComputeArgs{\n\t\t\tHostname: \u0026opt0,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getCompute.\n",
                "properties": {
                    "hostname": {
                        "type": "string",
                        "description": "The hostname of the Compute instance.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of the Compute instance.\n"
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The tags to find the Compute instance (key: value).\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getCompute.\n",
                "properties": {
                    "cpu": {
                        "type": "integer",
                        "description": "Number of cpu the Compute instance is running with.\n"
                    },
                    "created": {
                        "type": "string",
                        "description": "Creation date of the Compute instance.\n"
                    },
                    "diskSize": {
                        "type": "integer",
                        "description": "Size of the Compute instance disk.\n"
                    },
                    "hostname": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "ip6Address": {
                        "type": "string",
                        "description": "Public IPv6 address of the Compute instance (if IPv6 is enabled).\n"
                    },
                    "ipAddress": {
                        "type": "string",
                        "description": "Public IPv4 address of the Compute instance.\n"
                    },
                    "memory": {
                        "type": "integer",
                        "description": "Memory allocated for the Compute instance.\n"
                    },
                    "privateNetworkIpAddresses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of Compute private IP addresses (in managed Private Networks only).\n"
                    },
                    "size": {
                        "type": "string",
                        "description": "Current size of the Compute instance.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "State of the Compute instance.\n"
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "template": {
                        "type": "string",
                        "description": "Name of the template.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "Name of the zone.\n"
                    }
                },
                "type": "object",
                "required": [
                    "cpu",
                    "created",
                    "diskSize",
                    "ip6Address",
                    "ipAddress",
                    "memory",
                    "privateNetworkIpAddresses",
                    "size",
                    "state",
                    "template",
                    "zone"
                ]
            }
        },
        "exoscale:index/getComputeIPAddress:getComputeIPAddress": {
            "description": "Provides information on a Compute [Elastic IP address][eip-doc].\n\n!\u003e **WARNING:** This data source is deprecated and will be removed in the next major version.\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as exoscale from \"@pulumi/exoscale\";\n\nconst zone = \"ch-gva-2\";\nconst eip = exoscale.getComputeIPAddress({\n    zone: zone,\n    ipAddress: \"159.162.3.4\",\n});\n```\n```python\nimport pulumi\nimport pulumi_exoscale as exoscale\n\nzone = \"ch-gva-2\"\neip = exoscale.get_compute_ip_address(zone=zone,\n    ip_address=\"159.162.3.4\")\n```\n```csharp\nusing Pulumi;\nusing Exoscale = Pulumi.Exoscale;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var zone = \"ch-gva-2\";\n        var eip = Output.Create(Exoscale.GetComputeIPAddress.InvokeAsync(new Exoscale.GetComputeIPAddressArgs\n        {\n            Zone = zone,\n            IpAddress = \"159.162.3.4\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-exoscale/sdk/go/exoscale\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tzone := \"ch-gva-2\"\n\t\topt0 := \"159.162.3.4\"\n\t\t_, err := exoscale.GetComputeIPAddress(ctx, \u0026GetComputeIPAddressArgs{\n\t\t\tZone:      zone,\n\t\t\tIpAddress: \u0026opt0,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getComputeIPAddress.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The Description to find the IP Address.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of the IP Address.\n"
                    },
                    "ipAddress": {
                        "type": "string",
                        "description": "The IP Address of the EIP.\n"
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The tags to find the IP Address.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The name of the [zone][zone] where to look for the IP Address.\n"
                    }
                },
                "type": "object",
                "required": [
                    "zone"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getComputeIPAddress.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "ipAddress": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "zone"
                ]
            }
        },
        "exoscale:index/getComputeInstance:getComputeInstance": {
            "description": "Provides information on an [Exoscale Compute instance][compute-doc].\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as exoscale from \"@pulumi/exoscale\";\n\nconst example = pulumi.output(exoscale.getComputeInstance({\n    name: \"my-instance\",\n    zone: \"ch-gva-2\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_exoscale as exoscale\n\nexample = exoscale.get_compute_instance(name=\"my-instance\",\n    zone=\"ch-gva-2\")\n```\n```csharp\nusing Pulumi;\nusing Exoscale = Pulumi.Exoscale;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = Output.Create(Exoscale.GetComputeInstance.InvokeAsync(new Exoscale.GetComputeInstanceArgs\n        {\n            Name = \"my-instance\",\n            Zone = \"ch-gva-2\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-exoscale/sdk/go/exoscale\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\topt0 := \"my-instance\"\n\t\t_, err := exoscale.LookupComputeInstance(ctx, \u0026GetComputeInstanceArgs{\n\t\t\tName: \u0026opt0,\n\t\t\tZone: \"ch-gva-2\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getComputeInstance.\n",
                "properties": {
                    "antiAffinityGroupIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of [Anti-Affinity Group][r-anti_affinity_group] IDs.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of the Compute instance.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A map of key/value labels.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Compute instance.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The [zone][zone] of the Compute instance.\n"
                    }
                },
                "type": "object",
                "required": [
                    "zone"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getComputeInstance.\n",
                "properties": {
                    "antiAffinityGroupIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of [Anti-Affinity Group][r-anti_affinity_group] IDs.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "The creation date of the Compute instance.\n"
                    },
                    "deployTargetId": {
                        "type": "string",
                        "description": "A Deploy Target ID.\n"
                    },
                    "diskSize": {
                        "type": "integer",
                        "description": "The Compute instance disk size in GiB.\n"
                    },
                    "elasticIpIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of [Elastic IP][r-elastic_ip] IDs attached to the Compute instance.\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "ipv6": {
                        "type": "boolean",
                        "description": "Whether IPv6 is enabled on the Compute instance.\n"
                    },
                    "ipv6Address": {
                        "type": "string",
                        "description": "The IPv6 address of the Compute instance main network interface.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A map of key/value labels.\n"
                    },
                    "managerId": {
                        "type": "string",
                        "description": "The ID of the Compute instance manager, if any.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "privateNetworkIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of [Private Network][r-private_network] IDs attached to the Compute instance.\n"
                    },
                    "publicIpAddress": {
                        "type": "string",
                        "description": "The IPv4 address of the Compute instance's main network interface.\n"
                    },
                    "securityGroupIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of [Security Group][r-security_group] IDs attached to the Compute instance.\n"
                    },
                    "sshKey": {
                        "type": "string",
                        "description": "The name of the [SSH key pair][sshkeypair] installed to the Compute instance's user account during creation.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "The state of the Compute instance.\n"
                    },
                    "templateId": {
                        "type": "string",
                        "description": "The ID of the instance [template][template] used when creating the Compute instance.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The Compute instance [type][type].\n"
                    },
                    "userData": {
                        "type": "string",
                        "description": "A [cloud-init][cloudinit] configuration.\n"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "createdAt",
                    "deployTargetId",
                    "diskSize",
                    "elasticIpIds",
                    "ipv6",
                    "ipv6Address",
                    "managerId",
                    "privateNetworkIds",
                    "publicIpAddress",
                    "securityGroupIds",
                    "sshKey",
                    "state",
                    "templateId",
                    "type",
                    "userData",
                    "zone"
                ]
            }
        },
        "exoscale:index/getComputeTemplate:getComputeTemplate": {
            "description": "Provides information on a Compute [template][templates] for use in other resources such as a [`exoscale.Compute`][r-compute] resource.\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as exoscale from \"@pulumi/exoscale\";\n\nconst zone = \"ch-gva-2\";\nconst ubuntu = exoscale.getComputeTemplate({\n    zone: zone,\n    name: \"Linux Ubuntu 20.04 LTS 64-bit\",\n});\nconst my_server = new exoscale.ComputeInstance(\"my-server\", {\n    zone: zone,\n    type: \"standard.medium\",\n    templateId: ubuntu.then(ubuntu =\u003e ubuntu.id),\n    diskSize: 20,\n});\n```\n```python\nimport pulumi\nimport pulumi_exoscale as exoscale\n\nzone = \"ch-gva-2\"\nubuntu = exoscale.get_compute_template(zone=zone,\n    name=\"Linux Ubuntu 20.04 LTS 64-bit\")\nmy_server = exoscale.ComputeInstance(\"my-server\",\n    zone=zone,\n    type=\"standard.medium\",\n    template_id=ubuntu.id,\n    disk_size=20)\n```\n```csharp\nusing Pulumi;\nusing Exoscale = Pulumi.Exoscale;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var zone = \"ch-gva-2\";\n        var ubuntu = Output.Create(Exoscale.GetComputeTemplate.InvokeAsync(new Exoscale.GetComputeTemplateArgs\n        {\n            Zone = zone,\n            Name = \"Linux Ubuntu 20.04 LTS 64-bit\",\n        }));\n        var my_server = new Exoscale.ComputeInstance(\"my-server\", new Exoscale.ComputeInstanceArgs\n        {\n            Zone = zone,\n            Type = \"standard.medium\",\n            TemplateId = ubuntu.Apply(ubuntu =\u003e ubuntu.Id),\n            DiskSize = 20,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-exoscale/sdk/go/exoscale\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tzone := \"ch-gva-2\"\n\t\topt0 := \"Linux Ubuntu 20.04 LTS 64-bit\"\n\t\tubuntu, err := exoscale.GetComputeTemplate(ctx, \u0026GetComputeTemplateArgs{\n\t\t\tZone: zone,\n\t\t\tName: \u0026opt0,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = exoscale.NewComputeInstance(ctx, \"my-server\", \u0026exoscale.ComputeInstanceArgs{\n\t\t\tZone:       pulumi.String(zone),\n\t\t\tType:       pulumi.String(\"standard.medium\"),\n\t\t\tTemplateId: pulumi.String(ubuntu.Id),\n\t\t\tDiskSize:   pulumi.Int(20),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getComputeTemplate.\n",
                "properties": {
                    "filter": {
                        "type": "string",
                        "description": "A Compute template search filter, must be either `featured` (official Exoscale templates), `community` (community-contributed templates) or `mine` (custom templates private to my organization). Default is `featured`.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of the Compute template (conflicts with `name`).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Compute template (conflicts with `id`).\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The name of the [zone][zone] where to look for the Compute template.\n"
                    }
                },
                "type": "object",
                "required": [
                    "zone"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getComputeTemplate.\n",
                "properties": {
                    "filter": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "username": {
                        "type": "string",
                        "description": "Username to use to log into a Compute Instance based on this template\n"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "username",
                    "zone"
                ]
            }
        },
        "exoscale:index/getDomain:getDomain": {
            "description": "Provides information on a domain name hosted on [Exoscale DNS][exo-dns].\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as exoscale from \"@pulumi/exoscale\";\n\nconst my_company_com = pulumi.output(exoscale.getDomain({\n    name: \"my-company.com\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_exoscale as exoscale\n\nmy_company_com = exoscale.get_domain(name=\"my-company.com\")\n```\n```csharp\nusing Pulumi;\nusing Exoscale = Pulumi.Exoscale;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var my_company_com = Output.Create(Exoscale.GetDomain.InvokeAsync(new Exoscale.GetDomainArgs\n        {\n            Name = \"my-company.com\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-exoscale/sdk/go/exoscale\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := exoscale.LookupDomain(ctx, \u0026GetDomainArgs{\n\t\t\tName: \"my-company.com\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDomain.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the domain.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDomain.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "id"
                ]
            }
        },
        "exoscale:index/getDomainRecord:getDomainRecord": {
            "description": "Provides information on [domain records][r-domain_record] hosted on [Exoscale DNS][exo-dns].\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nThe example below matches all domain records that match with name `mailserver` and Record type `MX`.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as exoscale from \"@pulumi/exoscale\";\n\nconst mycompany = exoscale.getDomain({\n    name: my_company.com,\n});\nconst mycompanyMailservers = mycompany.then(mycompany =\u003e exoscale.getDomainRecord({\n    domain: mycompany.name,\n    filter: {\n        name: \"mailserver\",\n        recordeType: \"MX\",\n    },\n}));\nconst mycompanyNameservers = mycompany.then(mycompany =\u003e exoscale.getDomainRecord({\n    domain: mycompany.name,\n    filter: {\n        contentRegex: \"ns.*\",\n    },\n}));\nexport const firstDomainRecordName = mycompanyMailservers.then(mycompanyMailservers =\u003e mycompanyMailservers.records?[0]?.name);\nexport const firstDomainRecordContent = mycompanyNameservers.then(mycompanyNameservers =\u003e mycompanyNameservers.records?[0]?.content);\n```\n```python\nimport pulumi\nimport pulumi_exoscale as exoscale\n\nmycompany = exoscale.get_domain(name=my_company[\"com\"])\nmycompany_mailservers = exoscale.get_domain_record(domain=mycompany.name,\n    filter=exoscale.GetDomainRecordFilterArgs(\n        name=\"mailserver\",\n        recorde_type=\"MX\",\n    ))\nmycompany_nameservers = exoscale.get_domain_record(domain=mycompany.name,\n    filter=exoscale.GetDomainRecordFilterArgs(\n        content_regex=\"ns.*\",\n    ))\npulumi.export(\"firstDomainRecordName\", mycompany_mailservers.records[0].name)\npulumi.export(\"firstDomainRecordContent\", mycompany_nameservers.records[0].content)\n```\n```csharp\nusing Pulumi;\nusing Exoscale = Pulumi.Exoscale;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var mycompany = Output.Create(Exoscale.GetDomain.InvokeAsync(new Exoscale.GetDomainArgs\n        {\n            Name = my_company.Com,\n        }));\n        var mycompanyMailservers = mycompany.Apply(mycompany =\u003e Output.Create(Exoscale.GetDomainRecord.InvokeAsync(new Exoscale.GetDomainRecordArgs\n        {\n            Domain = mycompany.Name,\n            Filter = new Exoscale.Inputs.GetDomainRecordFilterArgs\n            {\n                Name = \"mailserver\",\n                RecordeType = \"MX\",\n            },\n        })));\n        var mycompanyNameservers = mycompany.Apply(mycompany =\u003e Output.Create(Exoscale.GetDomainRecord.InvokeAsync(new Exoscale.GetDomainRecordArgs\n        {\n            Domain = mycompany.Name,\n            Filter = new Exoscale.Inputs.GetDomainRecordFilterArgs\n            {\n                ContentRegex = \"ns.*\",\n            },\n        })));\n        this.FirstDomainRecordName = mycompanyMailservers.Apply(mycompanyMailservers =\u003e mycompanyMailservers.Records?[0]?.Name);\n        this.FirstDomainRecordContent = mycompanyNameservers.Apply(mycompanyNameservers =\u003e mycompanyNameservers.Records?[0]?.Content);\n    }\n\n    [Output(\"firstDomainRecordName\")]\n    public Output\u003cstring\u003e FirstDomainRecordName { get; set; }\n    [Output(\"firstDomainRecordContent\")]\n    public Output\u003cstring\u003e FirstDomainRecordContent { get; set; }\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-exoscale/sdk/go/exoscale\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmycompany, err := exoscale.LookupDomain(ctx, \u0026GetDomainArgs{\n\t\t\tName: my_company.Com,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmycompanyMailservers, err := exoscale.LookupDomainRecord(ctx, \u0026GetDomainRecordArgs{\n\t\t\tDomain: mycompany.Name,\n\t\t\tFilter: GetDomainRecordFilter{\n\t\t\t\tName:        \"mailserver\",\n\t\t\t\tRecordeType: \"MX\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmycompanyNameservers, err := exoscale.LookupDomainRecord(ctx, \u0026GetDomainRecordArgs{\n\t\t\tDomain: mycompany.Name,\n\t\t\tFilter: GetDomainRecordFilter{\n\t\t\t\tContentRegex: \"ns.*\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"firstDomainRecordName\", mycompanyMailservers.Records[0].Name)\n\t\tctx.Export(\"firstDomainRecordContent\", mycompanyNameservers.Records[0].Content)\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDomainRecord.\n",
                "properties": {
                    "domain": {
                        "type": "string",
                        "description": "The name of the [domain][r-domain] where to look for domain records.\n"
                    },
                    "filter": {
                        "$ref": "#/types/exoscale:index/getDomainRecordFilter:getDomainRecordFilter",
                        "description": "Filter to apply when looking up domain records.\n"
                    }
                },
                "type": "object",
                "required": [
                    "domain",
                    "filter"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDomainRecord.\n",
                "properties": {
                    "domain": {
                        "type": "string"
                    },
                    "filter": {
                        "$ref": "#/types/exoscale:index/getDomainRecordFilter:getDomainRecordFilter"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "records": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/exoscale:index/getDomainRecordRecord:getDomainRecordRecord"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "domain",
                    "filter",
                    "records",
                    "id"
                ]
            }
        },
        "exoscale:index/getElasticIP:getElasticIP": {
            "description": "Provides information on an [Elastic IP][eip-doc].\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as exoscale from \"@pulumi/exoscale\";\n\nconst zone = \"ch-gva-2\";\nconst vip = exoscale.getElasticIP({\n    zone: zone,\n    ipAddress: \"1.2.3.4\",\n});\nconst ubuntu = exoscale.getComputeTemplate({\n    zone: zone,\n    name: \"Linux Ubuntu 20.04 LTS 64-bit\",\n});\nconst example = new exoscale.ComputeInstance(\"example\", {\n    zone: zone,\n    type: \"standard.medium\",\n    templateId: ubuntu.then(ubuntu =\u003e ubuntu.id),\n    elasticIpIds: [vip.then(vip =\u003e vip.id)],\n});\n```\n```python\nimport pulumi\nimport pulumi_exoscale as exoscale\n\nzone = \"ch-gva-2\"\nvip = exoscale.get_elastic_ip(zone=zone,\n    ip_address=\"1.2.3.4\")\nubuntu = exoscale.get_compute_template(zone=zone,\n    name=\"Linux Ubuntu 20.04 LTS 64-bit\")\nexample = exoscale.ComputeInstance(\"example\",\n    zone=zone,\n    type=\"standard.medium\",\n    template_id=ubuntu.id,\n    elastic_ip_ids=[vip.id])\n```\n```csharp\nusing Pulumi;\nusing Exoscale = Pulumi.Exoscale;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var zone = \"ch-gva-2\";\n        var vip = Output.Create(Exoscale.GetElasticIP.InvokeAsync(new Exoscale.GetElasticIPArgs\n        {\n            Zone = zone,\n            IpAddress = \"1.2.3.4\",\n        }));\n        var ubuntu = Output.Create(Exoscale.GetComputeTemplate.InvokeAsync(new Exoscale.GetComputeTemplateArgs\n        {\n            Zone = zone,\n            Name = \"Linux Ubuntu 20.04 LTS 64-bit\",\n        }));\n        var example = new Exoscale.ComputeInstance(\"example\", new Exoscale.ComputeInstanceArgs\n        {\n            Zone = zone,\n            Type = \"standard.medium\",\n            TemplateId = ubuntu.Apply(ubuntu =\u003e ubuntu.Id),\n            ElasticIpIds = \n            {\n                vip.Apply(vip =\u003e vip.Id),\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-exoscale/sdk/go/exoscale\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tzone := \"ch-gva-2\"\n\t\topt0 := \"1.2.3.4\"\n\t\tvip, err := exoscale.LookupElasticIP(ctx, \u0026GetElasticIPArgs{\n\t\t\tZone:      zone,\n\t\t\tIpAddress: \u0026opt0,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\topt1 := \"Linux Ubuntu 20.04 LTS 64-bit\"\n\t\tubuntu, err := exoscale.GetComputeTemplate(ctx, \u0026GetComputeTemplateArgs{\n\t\t\tZone: zone,\n\t\t\tName: \u0026opt1,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = exoscale.NewComputeInstance(ctx, \"example\", \u0026exoscale.ComputeInstanceArgs{\n\t\t\tZone:       pulumi.String(zone),\n\t\t\tType:       pulumi.String(\"standard.medium\"),\n\t\t\tTemplateId: pulumi.String(ubuntu.Id),\n\t\t\tElasticIpIds: pulumi.StringArray{\n\t\t\t\tpulumi.String(vip.Id),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getElasticIP.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of the Elastic IP (conflicts with `ip_address`).\n"
                    },
                    "ipAddress": {
                        "type": "string",
                        "description": "The IP address of the Elastic IP (conflicts with `id`).\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The [zone][zone] of the Elastic IP.\n"
                    }
                },
                "type": "object",
                "required": [
                    "zone"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getElasticIP.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the Elastic IP.\n"
                    },
                    "healthchecks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/exoscale:index/getElasticIPHealthcheck:getElasticIPHealthcheck"
                        },
                        "description": "A health checking configuration for managed Elastic IPs. Structure is documented below.\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "ipAddress": {
                        "type": "string"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "healthchecks",
                    "zone"
                ]
            }
        },
        "exoscale:index/getNLB:getNLB": {
            "description": "Provides information on a [Network Load Balancer][nlb-doc] (NLB) instance for use in other resources such as a [`exoscale.NLBService`][r-nlb_service] resource.\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as exoscale from \"@pulumi/exoscale\";\n\nconst prod = exoscale.getNLB({\n    zone: \"ch-gva-2\",\n    name: \"prod\",\n});\nexport const nlbProdIpAddress = prod.then(prod =\u003e prod.ipAddress);\n```\n```python\nimport pulumi\nimport pulumi_exoscale as exoscale\n\nprod = exoscale.get_nlb(zone=\"ch-gva-2\",\n    name=\"prod\")\npulumi.export(\"nlbProdIpAddress\", prod.ip_address)\n```\n```csharp\nusing Pulumi;\nusing Exoscale = Pulumi.Exoscale;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var prod = Output.Create(Exoscale.GetNLB.InvokeAsync(new Exoscale.GetNLBArgs\n        {\n            Zone = \"ch-gva-2\",\n            Name = \"prod\",\n        }));\n        this.NlbProdIpAddress = prod.Apply(prod =\u003e prod.IpAddress);\n    }\n\n    [Output(\"nlbProdIpAddress\")]\n    public Output\u003cstring\u003e NlbProdIpAddress { get; set; }\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-exoscale/sdk/go/exoscale\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\topt0 := \"prod\"\n\t\tprod, err := exoscale.LookupNLB(ctx, \u0026GetNLBArgs{\n\t\t\tZone: \"ch-gva-2\",\n\t\t\tName: \u0026opt0,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"nlbProdIpAddress\", prod.IpAddress)\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getNLB.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of the NLB (conflicts with `name`).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of NLB (conflicts with `id`).\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The [zone][zone] of the NLB.\n"
                    }
                },
                "type": "object",
                "required": [
                    "zone"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getNLB.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "The creation date of the NLB.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the NLB.\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "ipAddress": {
                        "type": "string",
                        "description": "The public IP address of the NLB.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "state": {
                        "type": "string",
                        "description": "The current state of the NLB.\n"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "createdAt",
                    "description",
                    "ipAddress",
                    "state",
                    "zone"
                ]
            }
        },
        "exoscale:index/getNetwork:getNetwork": {
            "description": "Provides information on a [Private Network][privnet-doc] for use in other resources such as a [`exoscale.InstancePool`][r-instance_pool] resource.\n\n!\u003e **WARNING:** This data source is deprecated and will be removed in the next major version.\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as exoscale from \"@pulumi/exoscale\";\n\nconst zone = \"ch-gva-2\";\nconst db = exoscale.getNetwork({\n    zone: zone,\n    name: \"db\",\n});\nconst ubuntu = exoscale.getComputeTemplate({\n    zone: zone,\n    name: \"Linux Ubuntu 20.04 LTS 64-bit\",\n});\nconst webservers = new exoscale.InstancePool(\"webservers\", {\n    zone: zone,\n    templateId: ubuntu.then(ubuntu =\u003e ubuntu.id),\n    size: 5,\n    serviceOffering: \"medium\",\n    networkIds: [db.then(db =\u003e db.id)],\n});\n```\n```python\nimport pulumi\nimport pulumi_exoscale as exoscale\n\nzone = \"ch-gva-2\"\ndb = exoscale.get_network(zone=zone,\n    name=\"db\")\nubuntu = exoscale.get_compute_template(zone=zone,\n    name=\"Linux Ubuntu 20.04 LTS 64-bit\")\nwebservers = exoscale.InstancePool(\"webservers\",\n    zone=zone,\n    template_id=ubuntu.id,\n    size=5,\n    service_offering=\"medium\",\n    network_ids=[db.id])\n```\n```csharp\nusing Pulumi;\nusing Exoscale = Pulumi.Exoscale;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var zone = \"ch-gva-2\";\n        var db = Output.Create(Exoscale.GetNetwork.InvokeAsync(new Exoscale.GetNetworkArgs\n        {\n            Zone = zone,\n            Name = \"db\",\n        }));\n        var ubuntu = Output.Create(Exoscale.GetComputeTemplate.InvokeAsync(new Exoscale.GetComputeTemplateArgs\n        {\n            Zone = zone,\n            Name = \"Linux Ubuntu 20.04 LTS 64-bit\",\n        }));\n        var webservers = new Exoscale.InstancePool(\"webservers\", new Exoscale.InstancePoolArgs\n        {\n            Zone = zone,\n            TemplateId = ubuntu.Apply(ubuntu =\u003e ubuntu.Id),\n            Size = 5,\n            ServiceOffering = \"medium\",\n            NetworkIds = \n            {\n                db.Apply(db =\u003e db.Id),\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-exoscale/sdk/go/exoscale\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tzone := \"ch-gva-2\"\n\t\topt0 := \"db\"\n\t\tdb, err := exoscale.LookupNetwork(ctx, \u0026GetNetworkArgs{\n\t\t\tZone: zone,\n\t\t\tName: \u0026opt0,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\topt1 := \"Linux Ubuntu 20.04 LTS 64-bit\"\n\t\tubuntu, err := exoscale.GetComputeTemplate(ctx, \u0026GetComputeTemplateArgs{\n\t\t\tZone: zone,\n\t\t\tName: \u0026opt1,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = exoscale.NewInstancePool(ctx, \"webservers\", \u0026exoscale.InstancePoolArgs{\n\t\t\tZone:            pulumi.String(zone),\n\t\t\tTemplateId:      pulumi.String(ubuntu.Id),\n\t\t\tSize:            pulumi.Int(5),\n\t\t\tServiceOffering: pulumi.String(\"medium\"),\n\t\t\tNetworkIds: pulumi.StringArray{\n\t\t\t\tpulumi.String(db.Id),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getNetwork.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of the Private Network (conflicts with `name`)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Private Network (conflicts with `id`)\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The [zone][zone] of the Private Network\n"
                    }
                },
                "type": "object",
                "required": [
                    "zone"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getNetwork.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the Private Network\n"
                    },
                    "endIp": {
                        "type": "string",
                        "description": "The last address of the IP range used by the DHCP service (for *managed* Private Networks)\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "netmask": {
                        "type": "string",
                        "description": "The netmask defining the IP network allowed for the static lease (for *managed* Private Networks)\n"
                    },
                    "startIp": {
                        "type": "string",
                        "description": "The first address of IP range used by the DHCP service to automatically assign (for *managed* Private Networks)\n"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "endIp",
                    "netmask",
                    "startIp",
                    "zone"
                ]
            }
        },
        "exoscale:index/getPrivateNetwork:getPrivateNetwork": {
            "description": "Provides information on a [Private Network][privnet-doc] for use in other resources such as a [`exoscale.InstancePool`][r-instance_pool] resource.\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as exoscale from \"@pulumi/exoscale\";\n\nconst zone = \"ch-gva-2\";\nconst db = exoscale.getPrivateNetwork({\n    zone: zone,\n    name: \"db\",\n});\nconst ubuntu = exoscale.getComputeTemplate({\n    zone: zone,\n    name: \"Linux Ubuntu 20.04 LTS 64-bit\",\n});\nconst webservers = new exoscale.InstancePool(\"webservers\", {\n    zone: zone,\n    templateId: ubuntu.then(ubuntu =\u003e ubuntu.id),\n    size: 5,\n    serviceOffering: \"standard.medium\",\n    networkIds: [db.then(db =\u003e db.id)],\n});\n```\n```python\nimport pulumi\nimport pulumi_exoscale as exoscale\n\nzone = \"ch-gva-2\"\ndb = exoscale.get_private_network(zone=zone,\n    name=\"db\")\nubuntu = exoscale.get_compute_template(zone=zone,\n    name=\"Linux Ubuntu 20.04 LTS 64-bit\")\nwebservers = exoscale.InstancePool(\"webservers\",\n    zone=zone,\n    template_id=ubuntu.id,\n    size=5,\n    service_offering=\"standard.medium\",\n    network_ids=[db.id])\n```\n```csharp\nusing Pulumi;\nusing Exoscale = Pulumi.Exoscale;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var zone = \"ch-gva-2\";\n        var db = Output.Create(Exoscale.GetPrivateNetwork.InvokeAsync(new Exoscale.GetPrivateNetworkArgs\n        {\n            Zone = zone,\n            Name = \"db\",\n        }));\n        var ubuntu = Output.Create(Exoscale.GetComputeTemplate.InvokeAsync(new Exoscale.GetComputeTemplateArgs\n        {\n            Zone = zone,\n            Name = \"Linux Ubuntu 20.04 LTS 64-bit\",\n        }));\n        var webservers = new Exoscale.InstancePool(\"webservers\", new Exoscale.InstancePoolArgs\n        {\n            Zone = zone,\n            TemplateId = ubuntu.Apply(ubuntu =\u003e ubuntu.Id),\n            Size = 5,\n            ServiceOffering = \"standard.medium\",\n            NetworkIds = \n            {\n                db.Apply(db =\u003e db.Id),\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-exoscale/sdk/go/exoscale\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tzone := \"ch-gva-2\"\n\t\topt0 := \"db\"\n\t\tdb, err := exoscale.LookupPrivateNetwork(ctx, \u0026GetPrivateNetworkArgs{\n\t\t\tZone: zone,\n\t\t\tName: \u0026opt0,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\topt1 := \"Linux Ubuntu 20.04 LTS 64-bit\"\n\t\tubuntu, err := exoscale.GetComputeTemplate(ctx, \u0026GetComputeTemplateArgs{\n\t\t\tZone: zone,\n\t\t\tName: \u0026opt1,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = exoscale.NewInstancePool(ctx, \"webservers\", \u0026exoscale.InstancePoolArgs{\n\t\t\tZone:            pulumi.String(zone),\n\t\t\tTemplateId:      pulumi.String(ubuntu.Id),\n\t\t\tSize:            pulumi.Int(5),\n\t\t\tServiceOffering: pulumi.String(\"standard.medium\"),\n\t\t\tNetworkIds: pulumi.StringArray{\n\t\t\t\tpulumi.String(db.Id),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getPrivateNetwork.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the Private Network.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of the Private Network (conflicts with `name`).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Private Network (conflicts with `id`).\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The [zone][zone] of the Private Network.\n"
                    }
                },
                "type": "object",
                "required": [
                    "zone"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPrivateNetwork.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the Private Network.\n"
                    },
                    "endIp": {
                        "type": "string",
                        "description": "The last address of the IP range used by the DHCP service (for *managed* Private Networks).\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "netmask": {
                        "type": "string",
                        "description": "The netmask defining the IP network allowed for the static lease (for *managed* Private Networks).\n"
                    },
                    "startIp": {
                        "type": "string",
                        "description": "The first address of IP range used by the DHCP service to automatically assign (for *managed* Private Networks).\n"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "endIp",
                    "netmask",
                    "startIp",
                    "zone"
                ]
            }
        },
        "exoscale:index/getSecurityGroup:getSecurityGroup": {
            "description": "Provides information on a [Security Group][sg-doc] for use in other resources such as a [`exoscale.InstancePool`][r-instance_pool] resource.\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as exoscale from \"@pulumi/exoscale\";\n\nconst zone = \"ch-gva-2\";\nconst web = exoscale.getSecurityGroup({\n    name: \"web\",\n});\nconst ubuntu = exoscale.getComputeTemplate({\n    zone: zone,\n    name: \"Linux Ubuntu 20.04 LTS 64-bit\",\n});\nconst webservers = new exoscale.InstancePool(\"webservers\", {\n    zone: zone,\n    templateId: ubuntu.then(ubuntu =\u003e ubuntu.id),\n    size: 5,\n    serviceOffering: \"medium\",\n    securityGroupIds: [web.then(web =\u003e web.id)],\n});\n```\n```python\nimport pulumi\nimport pulumi_exoscale as exoscale\n\nzone = \"ch-gva-2\"\nweb = exoscale.get_security_group(name=\"web\")\nubuntu = exoscale.get_compute_template(zone=zone,\n    name=\"Linux Ubuntu 20.04 LTS 64-bit\")\nwebservers = exoscale.InstancePool(\"webservers\",\n    zone=zone,\n    template_id=ubuntu.id,\n    size=5,\n    service_offering=\"medium\",\n    security_group_ids=[web.id])\n```\n```csharp\nusing Pulumi;\nusing Exoscale = Pulumi.Exoscale;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var zone = \"ch-gva-2\";\n        var web = Output.Create(Exoscale.GetSecurityGroup.InvokeAsync(new Exoscale.GetSecurityGroupArgs\n        {\n            Name = \"web\",\n        }));\n        var ubuntu = Output.Create(Exoscale.GetComputeTemplate.InvokeAsync(new Exoscale.GetComputeTemplateArgs\n        {\n            Zone = zone,\n            Name = \"Linux Ubuntu 20.04 LTS 64-bit\",\n        }));\n        var webservers = new Exoscale.InstancePool(\"webservers\", new Exoscale.InstancePoolArgs\n        {\n            Zone = zone,\n            TemplateId = ubuntu.Apply(ubuntu =\u003e ubuntu.Id),\n            Size = 5,\n            ServiceOffering = \"medium\",\n            SecurityGroupIds = \n            {\n                web.Apply(web =\u003e web.Id),\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-exoscale/sdk/go/exoscale\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tzone := \"ch-gva-2\"\n\t\topt0 := \"web\"\n\t\tweb, err := exoscale.LookupSecurityGroup(ctx, \u0026GetSecurityGroupArgs{\n\t\t\tName: \u0026opt0,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\topt1 := \"Linux Ubuntu 20.04 LTS 64-bit\"\n\t\tubuntu, err := exoscale.GetComputeTemplate(ctx, \u0026GetComputeTemplateArgs{\n\t\t\tZone: zone,\n\t\t\tName: \u0026opt1,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = exoscale.NewInstancePool(ctx, \"webservers\", \u0026exoscale.InstancePoolArgs{\n\t\t\tZone:            pulumi.String(zone),\n\t\t\tTemplateId:      pulumi.String(ubuntu.Id),\n\t\t\tSize:            pulumi.Int(5),\n\t\t\tServiceOffering: pulumi.String(\"medium\"),\n\t\t\tSecurityGroupIds: pulumi.StringArray{\n\t\t\t\tpulumi.String(web.Id),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSecurityGroup.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of the Security Group (conflicts with `name`)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Security Group (conflicts with `id`)\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getSecurityGroup.\n",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        }
    },
    "language": {
        "csharp": {
            "compatibility": "tfbridge20",
            "namespaces": null,
            "packageReferences": {
                "Pulumi": "3.*"
            }
        },
        "go": {
            "generateExtraInputTypes": true,
            "generateResourceContainerTypes": true,
            "importBasePath": "github.com/pulumi/pulumi-exoscale/sdk/go/exoscale"
        },
        "nodejs": {
            "compatibility": "tfbridge20",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "disableUnionOutputTypes": true,
            "packageDescription": "A Pulumi package for creating and managing exoscale cloud resources.",
            "packageName": "",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/exoscale/terraform-provider-exoscale)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi/pulumi-exoscale` repo](https://github.com/pulumi/pulumi-exoscale/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`exoscale/terraform-provider-exoscale` repo](https://github.com/exoscale/terraform-provider-exoscale/issues).",
            "typescriptVersion": ""
        },
        "python": {
            "compatibility": "tfbridge20",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/exoscale/terraform-provider-exoscale)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi/pulumi-exoscale` repo](https://github.com/pulumi/pulumi-exoscale/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`exoscale/terraform-provider-exoscale` repo](https://github.com/exoscale/terraform-provider-exoscale/issues).",
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            }
        }
    }
}